[
  {
    "name": "rate",
    "description": "aggregate.rate() calculates the average rate of increase per window of time for each\ninput table.aggregate.rate() requires that input data have _start and _stop columns\nto calculate windows of time to operate on.\nUse range() to assign _start and _stop values.This function is designed to replicate the\nPrometheus rate() function\nand should only be used with counters.(Required)\nDuration of time windows.List of columns to group by. Default is [].Time duration to use when calculating the rate. Default is 1s.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "every",
        "description": "(Required)\nDuration of time windows.",
        "required": true
      },
      {
        "name": "groupColumns",
        "description": "List of columns to group by. Default is [].",
        "required": false
      },
      {
        "name": "unit",
        "description": "Time duration to use when calculating the rate. Default is 1s.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "aggregate"
  },
  {
    "name": "aggregateWindow",
    "description": "aggregateWindow() downsamples data by grouping data into fixed windows of time\nand applying an aggregate or selector function to each window.All columns not in the group key other than the specified column are dropped\nfrom output tables. This includes _time. aggregateWindow() uses the\ntimeSrc and timeDst parameters to assign a time to the aggregate value.aggregateWindow() requires _start and _stop columns in input data.\nUse range() to assign _start and _stop values.This function is intended to be used when timeColumn (_time by default) is not in the group key.\nIf timeColumn is in the group key, resulting output is confusing and generally not useful.every, period, and offset parameters support all valid duration units,\nincluding calendar months (1mo) and years (1y).When windowing by week (1w), weeks are determined using the Unix epoch\n(1970-01-01T00:00:00Z UTC). The Unix epoch was on a Thursday, so all\ncalculated weeks begin on Thursday.(Required)\nDuration of time between windows.Duration of windows. Default is the every value.period can be negative, indicating the start and stop boundaries are reversed.Duration to shift the window boundaries by. Defualt is 0s.offset can be negative, indicating that the offset goes backwards in time.(Required)\nAggregate or selector function to apply to each time window.Location used to determine timezone. Default is the location option.Column to operate on.Column to use as the source of the new time value for aggregate values.\nDefault is _stop.Column to store time values for aggregate values in.\nDefault is _time.Create empty tables for empty window. Default is true.Note: When using createEmpty: true, aggregate functions return empty\ntables, but selector functions do not. By design, selectors drop empty tables.Input data. Default is piped-forward data (<-).To use functions that don\u2019t provide defaults for required parameters with\naggregateWindow(), define an anonymous function with column and tables\nparameters that pipes-forward tables into the aggregate or selector function\nwith all required parameters defined:Flux increments weeks from the Unix epoch, which was a Thursday.\nBecause of this, by default, all 1w windows begin on Thursday.\nUse the offset parameter to shift the start of weekly windows to the\ndesired day of the week.",
    "params": [
      {
        "name": "every",
        "description": "(Required)\nDuration of time between windows.",
        "required": true
      },
      {
        "name": "period",
        "description": "Duration of windows. Default is the every value.period can be negative, indicating the start and stop boundaries are reversed.",
        "required": false
      },
      {
        "name": "offset",
        "description": "Duration to shift the window boundaries by. Defualt is 0s.offset can be negative, indicating that the offset goes backwards in time.",
        "required": false
      },
      {
        "name": "fn",
        "description": "(Required)\nAggregate or selector function to apply to each time window.",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone. Default is the location option.",
        "required": false
      },
      {
        "name": "column",
        "description": "Column to operate on.",
        "required": false
      },
      {
        "name": "timeSrc",
        "description": "Column to use as the source of the new time value for aggregate values.\nDefault is _stop.",
        "required": false
      },
      {
        "name": "timeDst",
        "description": "Column to store time values for aggregate values in.\nDefault is _time.",
        "required": false
      },
      {
        "name": "createEmpty",
        "description": "Create empty tables for empty window. Default is true.Note: When using createEmpty: true, aggregate functions return empty\ntables, but selector functions do not. By design, selectors drop empty tables.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "alert",
    "description": "alerta.alert() sends an alert to Alerta.(Required)\n(Required) Alerta URL.(Required)\n(Required) Alerta API key.(Required)\n(Required) Resource associated with the alert.(Required)\n(Required) Event name.Alerta environment. Valid values: \u201cProduction\u201d, \u201cDevelopment\u201d or empty string (default).(Required)\n(Required) Event severity. See Alerta severities.List of affected services. Default is [].Alerta event group. Default is \"\".Event value. Default is \"\".Alerta text description. Default is \"\".List of event tags. Default is [].(Required)\n(Required) Alert attributes.monitoring component.Event type. Default is \"\".time alert was generated. Default is now().",
    "params": [
      {
        "name": "url",
        "description": "(Required)\n(Required) Alerta URL.",
        "required": true
      },
      {
        "name": "apiKey",
        "description": "(Required)\n(Required) Alerta API key.",
        "required": true
      },
      {
        "name": "resource",
        "description": "(Required)\n(Required) Resource associated with the alert.",
        "required": true
      },
      {
        "name": "event",
        "description": "(Required)\n(Required) Event name.",
        "required": true
      },
      {
        "name": "environment",
        "description": "Alerta environment. Valid values: \u201cProduction\u201d, \u201cDevelopment\u201d or empty string (default).",
        "required": false
      },
      {
        "name": "severity",
        "description": "(Required)\n(Required) Event severity. See Alerta severities.",
        "required": true
      },
      {
        "name": "service",
        "description": "List of affected services. Default is [].",
        "required": false
      },
      {
        "name": "group",
        "description": "Alerta event group. Default is \"\".",
        "required": false
      },
      {
        "name": "value",
        "description": "Event value. Default is \"\".",
        "required": false
      },
      {
        "name": "text",
        "description": "Alerta text description. Default is \"\".",
        "required": false
      },
      {
        "name": "tags",
        "description": "List of event tags. Default is [].",
        "required": false
      },
      {
        "name": "attributes",
        "description": "(Required)\n(Required) Alert attributes.",
        "required": true
      },
      {
        "name": "origin",
        "description": "monitoring component.",
        "required": false
      },
      {
        "name": "type",
        "description": "Event type. Default is \"\".",
        "required": false
      },
      {
        "name": "timestamp",
        "description": "time alert was generated. Default is now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "alerta"
  },
  {
    "name": "endpoint",
    "description": "alerta.endpoint() sends alerts to Alerta using data from input rows.alerta.endpoint is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the object used to generate the POST request. Requires an r parameter.mapFn accepts a table row (r) and returns an object that must include the following fields:For more information, see alerta.alert() parameters.(Required)\n(Required) Alerta URL.(Required)\n(Required) Alerta API key.Alert environment. Default is \"\".\nValid values: \u201cProduction\u201d, \u201cDevelopment\u201d, or empty string (default).Alert origin. Default is \"InfluxDB\".",
    "params": [
      {
        "name": "url",
        "description": "(Required)\n(Required) Alerta URL.",
        "required": true
      },
      {
        "name": "apiKey",
        "description": "(Required)\n(Required) Alerta API key.",
        "required": true
      },
      {
        "name": "environment",
        "description": "Alert environment. Default is \"\".\nValid values: \u201cProduction\u201d, \u201cDevelopment\u201d, or empty string (default).",
        "required": false
      },
      {
        "name": "origin",
        "description": "Alert origin. Default is \"InfluxDB\".",
        "required": false
      }
    ],
    "examples": null,
    "package": "alerta"
  },
  {
    "name": "mad",
    "description": "anomalydetection.mad() uses the median absolute deviation (MAD) algorithm to detect anomalies in a data set.Input data requires _time and _value columns.\nOutput data is grouped by _time and includes the following columns of interest:Deviation threshold for anomalies.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "threshold",
        "description": "Deviation threshold for anomalies.",
        "required": false
      },
      {
        "name": "table",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "anomalydetection"
  },
  {
    "name": "concat",
    "description": "array.concat() appends two arrays and returns a new array.Neither input array is mutated and a new array is returned.First array. Default is the piped-forward array (<-).(Required)\nArray to append to the first array.",
    "params": [
      {
        "name": "arr",
        "description": "First array. Default is the piped-forward array (<-).",
        "required": false
      },
      {
        "name": "v",
        "description": "(Required)\nArray to append to the first array.",
        "required": true
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "concat",
    "description": "array.concat() appends two arrays and returns a new array.Neither input array is mutated and a new array is returned.First array. Default is the piped-forward array (<-).(Required)\nArray to append to the first array.",
    "params": [
      {
        "name": "arr",
        "description": "First array. Default is the piped-forward array (<-).",
        "required": false
      },
      {
        "name": "v",
        "description": "(Required)\nArray to append to the first array.",
        "required": true
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "filter",
    "description": "array.filter() iterates over an array, evaluates each element with a predicate function, and then returns\na new array with only elements that match the predicate.Array to filter. Default is the piped-forward array (<-).(Required)\nPredicate function to evaluate on each element.\nThe element is represented by x in the predicate function.",
    "params": [
      {
        "name": "arr",
        "description": "Array to filter. Default is the piped-forward array (<-).",
        "required": false
      },
      {
        "name": "fn",
        "description": "(Required)\nPredicate function to evaluate on each element.\nThe element is represented by x in the predicate function.",
        "required": true
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "filter",
    "description": "array.filter() iterates over an array, evaluates each element with a predicate function, and then returns\na new array with only elements that match the predicate.Array to filter. Default is the piped-forward array (<-).(Required)\nPredicate function to evaluate on each element.\nThe element is represented by x in the predicate function.",
    "params": [
      {
        "name": "arr",
        "description": "Array to filter. Default is the piped-forward array (<-).",
        "required": false
      },
      {
        "name": "fn",
        "description": "(Required)\nPredicate function to evaluate on each element.\nThe element is represented by x in the predicate function.",
        "required": true
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "from",
    "description": "array.from() constructs a table from an array of records.Each record in the array is converted into an output row or record. All\nrecords must have the same keys and data types.Array of records to construct a table with. Default is the piped-forward array (<-).",
    "params": [
      {
        "name": "rows",
        "description": "Array of records to construct a table with. Default is the piped-forward array (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "from",
    "description": "array.from() constructs a table from an array of records.Each record in the array is converted into an output row or record. All\nrecords must have the same keys and data types.Array of records to construct a table with.",
    "params": [
      {
        "name": "rows",
        "description": "Array of records to construct a table with.",
        "required": false
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "map",
    "description": "array.map() iterates over an array, applies a function to each element to produce a new element,\nand then returns a new array.Array to operate on. Defaults is the piped-forward array (<-).(Required)\nFunction to apply to elements. The element is represented by x in the function.",
    "params": [
      {
        "name": "arr",
        "description": "Array to operate on. Defaults is the piped-forward array (<-).",
        "required": false
      },
      {
        "name": "fn",
        "description": "(Required)\nFunction to apply to elements. The element is represented by x in the function.",
        "required": true
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "map",
    "description": "array.map() iterates over an array, applies a function to each element to produce a new element,\nand then returns a new array.Array to operate on. Defaults is the piped-forward array (<-).(Required)\nFunction to apply to elements. The element is represented by x in the function.",
    "params": [
      {
        "name": "arr",
        "description": "Array to operate on. Defaults is the piped-forward array (<-).",
        "required": false
      },
      {
        "name": "fn",
        "description": "(Required)\nFunction to apply to elements. The element is represented by x in the function.",
        "required": true
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "toBool",
    "description": "array.toBool() converts all values in an array to booleans.Array of values to convert. Default is the piped-forward array (<-).",
    "params": [
      {
        "name": "arr",
        "description": "Array of values to convert. Default is the piped-forward array (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "toDuration",
    "description": "array.toDuration() converts all values in an array to durations.Array of values to convert. Default is the piped-forward array (<-).",
    "params": [
      {
        "name": "arr",
        "description": "Array of values to convert. Default is the piped-forward array (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "toFloat",
    "description": "array.toFloat() converts all values in an array to floats.Array of values to convert. Default is the piped-forward array (<-).",
    "params": [
      {
        "name": "arr",
        "description": "Array of values to convert. Default is the piped-forward array (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "toInt",
    "description": "array.toInt() converts all values in an array to integers.Array of values to convert. Default is the piped-forward array (<-).",
    "params": [
      {
        "name": "arr",
        "description": "Array of values to convert. Default is the piped-forward array (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "toString",
    "description": "array.toString() converts all values in an array to strings.Array of values to convert. Default is the piped-forward array (<-).",
    "params": [
      {
        "name": "arr",
        "description": "Array of values to convert. Default is the piped-forward array (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "toTime",
    "description": "array.toTime() converts all values in an array to times.Array of values to convert. Default is the piped-forward array (<-).",
    "params": [
      {
        "name": "arr",
        "description": "Array of values to convert. Default is the piped-forward array (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "toUInt",
    "description": "array.toUInt() converts all values in an array to unsigned integers.Array of values to convert. Default is the piped-forward array (<-).",
    "params": [
      {
        "name": "arr",
        "description": "Array of values to convert. Default is the piped-forward array (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "array"
  },
  {
    "name": "endpoint",
    "description": "bigpanda.endpoint() sends alerts to BigPanda using data from input rows.bigpanda.endpoint is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the object used to generate the POST request. Requires an r parameter.mapFn accepts a table row (r) and returns an object that must include the following fields:For more information, see bigpanda.sendAlert() parameters.BigPanda alerts API URL.\nDefault is the value of the bigpanda.defaultURL option.(Required)\nBigPanda API Authorization token (API key).(Required)\nBigPanda App Key.",
    "params": [
      {
        "name": "url",
        "description": "BigPanda alerts API URL.\nDefault is the value of the bigpanda.defaultURL option.",
        "required": false
      },
      {
        "name": "token",
        "description": "(Required)\nBigPanda API Authorization token (API key).",
        "required": true
      },
      {
        "name": "appKey",
        "description": "(Required)\nBigPanda App Key.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bigpanda"
  },
  {
    "name": "sendAlert",
    "description": "bigpanda.sendAlert() sends an alert to BigPanda.(Required)\nBigPanda alerts API URL.\nDefault is the value of the bigpanda.defaultURL option.(Required)\nBigPanda API Authorization token (API key).(Required)\nBigPanda App Key.(Required)\nBigPanda alert status.Supported statuses:(Required)\nAdditional alert parameters to send to the BigPanda alert API.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nBigPanda alerts API URL.\nDefault is the value of the bigpanda.defaultURL option.",
        "required": true
      },
      {
        "name": "token",
        "description": "(Required)\nBigPanda API Authorization token (API key).",
        "required": true
      },
      {
        "name": "appKey",
        "description": "(Required)\nBigPanda App Key.",
        "required": true
      },
      {
        "name": "status",
        "description": "(Required)\nBigPanda alert status.Supported statuses:",
        "required": true
      },
      {
        "name": "rec",
        "description": "(Required)\nAdditional alert parameters to send to the BigPanda alert API.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bigpanda"
  },
  {
    "name": "statusFromLevel",
    "description": "bigpanda.statusFromLevel() converts an alert level to a BigPanda status.BigPanda accepts one of ok, warning, or critical,.(Required)\nAlert level.Use map() to iterate over rows in a stream of tables and convert alert levels to Big Panda statuses.",
    "params": [
      {
        "name": "level",
        "description": "(Required)\nAlert level.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bigpanda"
  },
  {
    "name": "from",
    "description": "bigtable.from() retrieves data from a Google Cloud Bigtable data source.(Required)\nGoogle Cloud IAM token to use to access the Cloud Bigtable database.For more information, see the following:(Required)\nCloud Bigtable project ID.(Required)\nCloud Bigtable instance ID.(Required)\nCloud Bigtable table name.",
    "params": [
      {
        "name": "token",
        "description": "(Required)\nGoogle Cloud IAM token to use to access the Cloud Bigtable database.For more information, see the following:",
        "required": true
      },
      {
        "name": "project",
        "description": "(Required)\nCloud Bigtable project ID.",
        "required": true
      },
      {
        "name": "instance",
        "description": "(Required)\nCloud Bigtable instance ID.",
        "required": true
      },
      {
        "name": "table",
        "description": "(Required)\nCloud Bigtable table name.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bigtable"
  },
  {
    "name": "sand",
    "description": "bitwise.sand() performs the bitwise operation, a AND b, with integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "sand",
    "description": "bitwise.sand() performs the bitwise operation, a AND b, with integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "sclear",
    "description": "bitwise.sclear() performs the bitwise operation a AND NOT b.\nBoth a and b are integers.(Required)\nLeft hand operand.(Required)\nBits to clear.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nBits to clear.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "sclear",
    "description": "bitwise.sclear() performs the bitwise operation a AND NOT b.\nBoth a and b are integers.(Required)\nLeft hand operand.(Required)\nBits to clear.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nBits to clear.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "slshift",
    "description": "bitwise.slshift() shifts the bits in a left by b bits.\nBoth a and b are integers.(Required)\nLeft hand operand.(Required)\nNumber of bits to shift.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nNumber of bits to shift.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "slshift",
    "description": "bitwise.slshift() shifts the bits in a left by b bits.\nBoth a and b are integers.(Required)\nLeft hand operand.(Required)\nNumber of bits to shift.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nNumber of bits to shift.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "snot",
    "description": "bitwise.snot() inverts every bit in a, an integer.(Required)\nInteger to invert.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nInteger to invert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "snot",
    "description": "bitwise.snot() inverts every bit in a, an integer.(Required)\nInteger to invert.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nInteger to invert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "sor",
    "description": "bitwise.sor() performs the bitwise operation, a OR b, with integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "sor",
    "description": "bitwise.sor() performs the bitwise operation, a OR b, with integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "srshift",
    "description": "bitwise.srshift() shifts the bits in a right by b bits.\nBoth a and b are integers.(Required)\nLeft hand operand.(Required)\nNumber of bits to shift.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nNumber of bits to shift.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "srshift",
    "description": "bitwise.srshift() shifts the bits in a right by b bits.\nBoth a and b are integers.(Required)\nLeft hand operand.(Required)\nNumber of bits to shift.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nNumber of bits to shift.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "sxor",
    "description": "bitwise.sxor() performs the bitwise operation, a XOR b, with integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "sxor",
    "description": "bitwise.sxor() performs the bitwise operation, a XOR b, with integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "uand",
    "description": "bitwise.uand() performs the bitwise operation, a AND b, with unsigned integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "uand",
    "description": "bitwise.uand() performs the bitwise operation, a AND b, with unsigned integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "uclear",
    "description": "bitwise.uclear() performs the bitwise operation a AND NOT b, with unsigned integers.(Required)\nLeft hand operand.(Required)\nBits to clear.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nBits to clear.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "uclear",
    "description": "bitwise.uclear() performs the bitwise operation a AND NOT b, with unsigned integers.(Required)\nLeft hand operand.(Required)\nBits to clear.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nBits to clear.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "ulshift",
    "description": "bitwise.ulshift() shifts the bits in a left by b bits.\nBoth a and b are unsigned integers.(Required)\nLeft hand operand.(Required)\nNumber of bits to shift.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nNumber of bits to shift.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "ulshift",
    "description": "bitwise.ulshift() shifts the bits in a left by b bits.\nBoth a and b are unsigned integers.(Required)\nLeft hand operand.(Required)\nNumber of bits to shift.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nNumber of bits to shift.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "unot",
    "description": "bitwise.unot() inverts every bit in a, an unsigned integer.(Required)\nUnsigned integer to invert.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nUnsigned integer to invert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "unot",
    "description": "bitwise.unot() inverts every bit in a, an unsigned integer.(Required)\nUnsigned integer to invert.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nUnsigned integer to invert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "uor",
    "description": "bitwise.uor() performs the bitwise operation, a OR b, with unsigned integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "uor",
    "description": "bitwise.uor() performs the bitwise operation, a OR b, with unsigned integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "urshift",
    "description": "bitwise.urshift() shifts the bits in a right by b bits.\nBoth a and b are unsigned integers.(Required)\nLeft hand operand.(Required)\nNumber of bits to shift.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nNumber of bits to shift.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "urshift",
    "description": "bitwise.urshift() shifts the bits in a right by b bits.\nBoth a and b are unsigned integers.(Required)\nLeft hand operand.(Required)\nNumber of bits to shift.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nNumber of bits to shift.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "uxor",
    "description": "bitwise.uxor() performs the bitwise operation, a XOR b, with unsigned integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "uxor",
    "description": "bitwise.uxor() performs the bitwise operation, a XOR b, with unsigned integers.(Required)\nLeft hand operand.(Required)\nRight hand operand.",
    "params": [
      {
        "name": "a",
        "description": "(Required)\nLeft hand operand.",
        "required": true
      },
      {
        "name": "b",
        "description": "(Required)\nRight hand operand.",
        "required": true
      }
    ],
    "examples": null,
    "package": "bitwise"
  },
  {
    "name": "bool",
    "description": "bool() converts a value to a boolean type.(Required)\nValue to convert.If converting the _value column to boolean types, use toBool().\nIf converting columns other than _value, use map() to iterate over each\nrow and bool() to covert a column value to a boolean type.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "bottom",
    "description": "bottom() sorts each input table by specified columns and keeps the bottom n\nrecords in each table.Note: bottom() drops empty tables.(Required)\nNumber of rows to return from each input table.List of columns to sort by. Default is [\"_value\"].Sort precedence is determined by list order (left to right).Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of rows to return from each input table.",
        "required": true
      },
      {
        "name": "columns",
        "description": "List of columns to sort by. Default is [\"_value\"].Sort precedence is determined by list order (left to right).",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "friday",
    "description": "boundaries.friday() returns a record with start and stop boundary timestamps for last Friday.Last Friday is relative to now(). If today is Friday, the function returns boundaries for the previous Friday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "friday",
    "description": "boundaries.friday() returns a record with start and stop boundary timestamps for last Friday.Last Friday is relative to now(). If today is Friday, the function returns boundaries for the previous Friday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "monday",
    "description": "boundaries.monday() returns a record with start and stop boundary timestamps of last Monday.\nLast Monday is relative to now(). If today is Monday, the function returns boundaries for the previous Monday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "monday",
    "description": "boundaries.monday() returns a record with start and stop boundary timestamps of last Monday.\nLast Monday is relative to now(). If today is Monday, the function returns boundaries for the previous Monday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "month",
    "description": "boundaries.month() returns a record with start and stop boundary timestamps for the current month.now() determines the current month.Number of months to offset from the current month. Default is 0.Use a negative offset to return boundaries from previous months.\nUse a positive offset to return boundaries for future months.",
    "params": [
      {
        "name": "month_offset",
        "description": "Number of months to offset from the current month. Default is 0.Use a negative offset to return boundaries from previous months.\nUse a positive offset to return boundaries for future months.",
        "required": false
      }
    ],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "month",
    "description": "boundaries.month() returns a record with start and stop boundary timestamps for the current month.now() determines the current month.Number of months to offset from the current month. Default is 0.Use a negative offset to return boundaries from previous months.\nUse a positive offset to return boundaries for future months.",
    "params": [
      {
        "name": "month_offset",
        "description": "Number of months to offset from the current month. Default is 0.Use a negative offset to return boundaries from previous months.\nUse a positive offset to return boundaries for future months.",
        "required": false
      }
    ],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "saturday",
    "description": "boundaries.saturday() returns a record with start and stop boundary timestamps for last Saturday.Last Saturday is relative to now(). If today is Saturday, the function returns boundaries for the previous Saturday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "saturday",
    "description": "boundaries.saturday() returns a record with start and stop boundary timestamps for last Saturday.Last Saturday is relative to now(). If today is Saturday, the function returns boundaries for the previous Saturday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "sunday",
    "description": "boundaries.sunday() returns a record with start and stop boundary timestamps for last Sunday.Last Sunday is relative to now(). If today is Sunday, the function returns boundaries for the previous Sunday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "sunday",
    "description": "boundaries.sunday() returns a record with start and stop boundary timestamps for last Sunday.Last Sunday is relative to now(). If today is Sunday, the function returns boundaries for the previous Sunday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "thursday",
    "description": "boundaries.thursday() returns a record with start and stop boundary timestamps for last Thursday.Last Thursday is relative to now(). If today is Thursday, the function returns boundaries for the previous Thursday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "thursday",
    "description": "boundaries.thursday() returns a record with start and stop boundary timestamps for last Thursday.Last Thursday is relative to now(). If today is Thursday, the function returns boundaries for the previous Thursday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "tuesday",
    "description": "boundaries.tuesday() returns a record with start and stop boundary timestamps of last Tuesday.Last Tuesday is relative to now(). If today is Tuesday, the function returns boundaries for the previous Tuesday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "tuesday",
    "description": "boundaries.tuesday() returns a record with start and stop boundary timestamps of last Tuesday.Last Tuesday is relative to now(). If today is Tuesday, the function returns boundaries for the previous Tuesday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "wednesday",
    "description": "boundaries.wednesday() returns a record with start and stop boundary timestamps for last Wednesday.Last Wednesday is relative to now(). If today is Wednesday, the function returns boundaries for the previous Wednesday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "wednesday",
    "description": "boundaries.wednesday() returns a record with start and stop boundary timestamps for last Wednesday.Last Wednesday is relative to now(). If today is Wednesday, the function returns boundaries for the previous Wednesday.",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "week",
    "description": "boundaries.week() returns a record with start and stop boundary timestamps of the current week.\nBy default, weeks start on Monday.Indicate if the week starts on Sunday. Default is false.When set to false, the week starts on Monday.Number of weeks to offset from the current week. Default is 0.Use a negative offset to return boundaries from previous weeks.\nUse a positive offset to return boundaries for future weeks.",
    "params": [
      {
        "name": "start_sunday",
        "description": "Indicate if the week starts on Sunday. Default is false.When set to false, the week starts on Monday.",
        "required": false
      },
      {
        "name": "week_offset",
        "description": "Number of weeks to offset from the current week. Default is 0.Use a negative offset to return boundaries from previous weeks.\nUse a positive offset to return boundaries for future weeks.",
        "required": false
      }
    ],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "week",
    "description": "boundaries.week() returns a record with start and stop boundary timestamps of the current week.\nBy default, weeks start on Monday.Indicate if the week starts on Sunday. Default is false.When set to false, the week starts on Monday.Number of weeks to offset from the current week. Default is 0.Use a negative offset to return boundaries from previous weeks.\nUse a positive offset to return boundaries for future weeks.",
    "params": [
      {
        "name": "start_sunday",
        "description": "Indicate if the week starts on Sunday. Default is false.When set to false, the week starts on Monday.",
        "required": false
      },
      {
        "name": "week_offset",
        "description": "Number of weeks to offset from the current week. Default is 0.Use a negative offset to return boundaries from previous weeks.\nUse a positive offset to return boundaries for future weeks.",
        "required": false
      }
    ],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "yesterday",
    "description": "boundaries.yesterday() returns a record with start and stop boundary timestamps for yesterday.Yesterday is relative to now().",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "yesterday",
    "description": "boundaries.yesterday() returns a record with start and stop boundary timestamps for yesterday.Yesterday is relative to now().",
    "params": [],
    "examples": null,
    "package": "boundaries"
  },
  {
    "name": "buckets",
    "description": "buckets() returns a list of buckets in the specified organization.Organization name. Default is the current organization.org and orgID are mutually exclusive.Organization ID. Default is the ID of the current organization.org and orgID are mutually exclusive.URL of the InfluxDB instance.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.\nhost is required when org or orgID are specified.InfluxDB API token.token is required when host, org, or orgID` are specified.",
    "params": [
      {
        "name": "org",
        "description": "Organization name. Default is the current organization.org and orgID are mutually exclusive.",
        "required": false
      },
      {
        "name": "orgID",
        "description": "Organization ID. Default is the ID of the current organization.org and orgID are mutually exclusive.",
        "required": false
      },
      {
        "name": "host",
        "description": "URL of the InfluxDB instance.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.\nhost is required when org or orgID are specified.",
        "required": false
      },
      {
        "name": "token",
        "description": "InfluxDB API token.token is required when host, org, or orgID` are specified.",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "bytes",
    "description": "bytes() converts a string value to a bytes type.(Required)\nValue to convert.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "chandeMomentumOscillator",
    "description": "chandeMomentumOscillator() applies the technical momentum indicator developed\nby Tushar Chande to input data.The Chande Momentum Oscillator (CMO) indicator does the following:For each input table with x rows, chandeMomentumOscillator() outputs a\ntable with x - n rows.(Required)\nPeriod or number of points to use in the calculation.List of columns to operate on. Default is [\"_value\"].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nPeriod or number of points to use in the calculation.",
        "required": true
      },
      {
        "name": "columns",
        "description": "List of columns to operate on. Default is [\"_value\"].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "query",
    "description": "clickhouse.query() queries data from ClickHouse using specified parameters.ClickHouse HTTP API URL. Default is http://127.0.0.1:8123.(Required)\nClickHouse query to execute.Query rows limit. Defaults is 100.Request remote CORS headers. Defaults is 1.Query bytes limit. Default is 10000000.Query format. Default is CSVWithNames.For information about available formats, see ClickHouse formats.",
    "params": [
      {
        "name": "url",
        "description": "ClickHouse HTTP API URL. Default is http://127.0.0.1:8123.",
        "required": false
      },
      {
        "name": "query",
        "description": "(Required)\nClickHouse query to execute.",
        "required": true
      },
      {
        "name": "limit",
        "description": "Query rows limit. Defaults is 100.",
        "required": false
      },
      {
        "name": "cors",
        "description": "Request remote CORS headers. Defaults is 1.",
        "required": false
      },
      {
        "name": "max_bytes",
        "description": "Query bytes limit. Default is 10000000.",
        "required": false
      },
      {
        "name": "format",
        "description": "Query format. Default is CSVWithNames.For information about available formats, see ClickHouse formats.",
        "required": false
      }
    ],
    "examples": null,
    "package": "clickhouse"
  },
  {
    "name": "columns",
    "description": "columns() returns the column labels in each input table.For each input table, columns outputs a table with the same group key\ncolumns and a new column containing the column labels in the input table.\nEach row in an output table contains the group key value and the label of one\ncolumn of the input table.\nEach output table has the same number of rows as the number of columns of the\ninput table.Name of the output column to store column labels in.\nDefault is \u201c_value\u201d.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Name of the output column to store column labels in.\nDefault is \u201c_value\u201d.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "contains",
    "description": "contains() tests if an array contains a specified value and returns true or false.(Required)\nValue to search for.(Required)\nArray to search.",
    "params": [
      {
        "name": "value",
        "description": "(Required)\nValue to search for.",
        "required": true
      },
      {
        "name": "set",
        "description": "(Required)\nArray to search.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "count",
    "description": "count() returns the number of records in each input table.The function counts both null and non-null records.count() returns 0 for empty tables.\nTo keep empty tables in your data, set the following parameters for the\nfollowing functions:Column to count values in and store the total count.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to count values in and store the total count.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "cov",
    "description": "cov() computes the covariance between two streams of tables.(Required)\nFirst input stream.(Required)\nSecond input stream.(Required)\nList of columns to join on.Normalize results to the Pearson R coefficient. Default is false.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nFirst input stream.",
        "required": true
      },
      {
        "name": "y",
        "description": "(Required)\nSecond input stream.",
        "required": true
      },
      {
        "name": "on",
        "description": "(Required)\nList of columns to join on.",
        "required": true
      },
      {
        "name": "pearsonr",
        "description": "Normalize results to the Pearson R coefficient. Default is false.",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "covariance",
    "description": "covariance() computes the covariance between two columns.(Required)\nList of two columns to operate on.Normalize results to the Pearson R coefficient. Default is false.Column to store the result in. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "columns",
        "description": "(Required)\nList of two columns to operate on.",
        "required": true
      },
      {
        "name": "pearsonr",
        "description": "Normalize results to the Pearson R coefficient. Default is false.",
        "required": false
      },
      {
        "name": "valueDst",
        "description": "Column to store the result in. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "from",
    "description": "csv.from() retrieves data from a comma separated value (CSV) data source and\nreturns a stream of tables.CSV data.Supports anonotated CSV or raw CSV. Use mode to specify the parsing mode.File path of the CSV file to query.The path can be absolute or relative.\nIf relative, it is relative to the working directory of the fluxd process.\nThe CSV file must exist in the same file system running the fluxd process.is the CSV parsing mode. Default is annotations.Available annotation modes",
    "params": [
      {
        "name": "csv",
        "description": "CSV data.Supports anonotated CSV or raw CSV. Use mode to specify the parsing mode.",
        "required": false
      },
      {
        "name": "file",
        "description": "File path of the CSV file to query.The path can be absolute or relative.\nIf relative, it is relative to the working directory of the fluxd process.\nThe CSV file must exist in the same file system running the fluxd process.",
        "required": false
      },
      {
        "name": "mode",
        "description": "is the CSV parsing mode. Default is annotations.Available annotation modes",
        "required": false
      }
    ],
    "examples": null,
    "package": "csv"
  },
  {
    "name": "from",
    "description": "csv.from() retrieves annotated CSV from a URL.Note: Experimental csv.from() is an alternative to the standard\ncsv.from() function.(Required)\nURL to retrieve annotated CSV from.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nURL to retrieve annotated CSV from.",
        "required": true
      }
    ],
    "examples": null,
    "package": "csv"
  },
  {
    "name": "cumulativeSum",
    "description": "cumulativeSum() computes a running sum for non-null records in a table.The output table schema will be the same as the input table.List of columns to operate on. Default is [\"_value\"].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "columns",
        "description": "List of columns to operate on. Default is [\"_value\"].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "add",
    "description": "date.add() adds a duration to a time value and returns the resulting time value.(Required)\nDuration to add.(Required)\nTime to add the duration to.Location to use for the time value.Use an absolute time or a relative duration.\nDurations are relative to now().A time may be represented as either an explicit timestamp\nor as a relative time from the current now time. add can\nsupport either type of value.",
    "params": [
      {
        "name": "d",
        "description": "(Required)\nDuration to add.",
        "required": true
      },
      {
        "name": "to",
        "description": "(Required)\nTime to add the duration to.",
        "required": true
      },
      {
        "name": "location",
        "description": "Location to use for the time value.Use an absolute time or a relative duration.\nDurations are relative to now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "hour",
    "description": "date.hour() returns the hour of a specified time. Results range from [0 - 23].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "microsecond",
    "description": "date.microsecond() returns the microseconds for a specified time.\nResults range from [0-999999].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "millisecond",
    "description": "date.millisecond() returns the milliseconds for a specified time.\nResults range from [0-999].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "minute",
    "description": "date.minute() returns the minute of a specified time. Results range from [0 - 59].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "month",
    "description": "date.month() returns the month of a specified time. Results range from [1 - 12].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "monthDay",
    "description": "date.monthDay() returns the day of the month for a specified time.\nResults range from [1 - 31].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "nanosecond",
    "description": "date.nanosecond() returns the nanoseconds for a specified time.\nResults range from [0-999999999].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "quarter",
    "description": "date.quarter() returns the quarter for a specified time. Results range from [1-4].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "scale",
    "description": "date.scale() will multiply the duration by the given value.(Required)\nDuration to scale.(Required)\nAmount to scale the duration by.",
    "params": [
      {
        "name": "d",
        "description": "(Required)\nDuration to scale.",
        "required": true
      },
      {
        "name": "n",
        "description": "(Required)\nAmount to scale the duration by.",
        "required": true
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "second",
    "description": "date.second() returns the second of a specified time. Results range from [0 - 59].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "sub",
    "description": "date.sub() subtracts a duration from a time value and returns the resulting time value.(Required)\nTime to subtract the duration from.Use an absolute time or a relative duration.\nDurations are relative to now().(Required)\nDuration to subtract.Location to use for the time value.A time may be represented as either an explicit timestamp\nor as a relative time from the current now time. sub can\nsupport either type of value.",
    "params": [
      {
        "name": "from",
        "description": "(Required)\nTime to subtract the duration from.Use an absolute time or a relative duration.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "d",
        "description": "(Required)\nDuration to subtract.",
        "required": true
      },
      {
        "name": "location",
        "description": "Location to use for the time value.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "time",
    "description": "date.time() returns the time value of a specified relative duration or time.date.time assumes duration values are relative to now().(Required)\nDuration or time value.Use an absolute time or relative duration.\nDurations are relative to now().Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nDuration or time value.Use an absolute time or relative duration.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "truncate",
    "description": "date.truncate() returns a time truncated to the specified duration unit.(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().(Required)\nUnit of time to truncate to.Only use 1 and the unit of time to specify the unit.\nFor example: 1s, 1m, 1h.Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "unit",
        "description": "(Required)\nUnit of time to truncate to.Only use 1 and the unit of time to specify the unit.\nFor example: 1s, 1m, 1h.",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "week",
    "description": "date.week() returns the ISO week of the year for a specified time.\nResults range from [1 - 53].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "weekDay",
    "description": "date.weekDay() returns the day of the week for a specified time.\nResults range from [0 - 6].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "year",
    "description": "date.year() returns the year of a specified time.(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "yearDay",
    "description": "date.yearDay() returns the day of the year for a specified time.\nResults can include leap days and range from [1 - 366].(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().Location used to determine timezone.\nDefault is the location option.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime to operate on.Use an absolute time, relative duration, or integer.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone.\nDefault is the location option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "date"
  },
  {
    "name": "feature",
    "description": "debug.feature() returns the value associated with the given feature flag.(Required)\nFeature flag name.",
    "params": [
      {
        "name": "key",
        "description": "(Required)\nFeature flag name.",
        "required": true
      }
    ],
    "examples": null,
    "package": "debug"
  },
  {
    "name": "getOption",
    "description": "debug.getOption() gets the value of an option using a form of reflection.(Required)\nFull path of the package.(Required)\nOption name.",
    "params": [
      {
        "name": "pkg",
        "description": "(Required)\nFull path of the package.",
        "required": true
      },
      {
        "name": "name",
        "description": "(Required)\nOption name.",
        "required": true
      }
    ],
    "examples": null,
    "package": "debug"
  },
  {
    "name": "null",
    "description": "debug.null() returns the null value with a given type.Null type.Supported types:",
    "params": [
      {
        "name": "type",
        "description": "Null type.Supported types:",
        "required": false
      }
    ],
    "examples": null,
    "package": "debug"
  },
  {
    "name": "opaque",
    "description": "debug.opaque() works like pass in that it passes any incoming tables directly to the\nfollowing transformation, save for its type signature does not indicate that the\ninput type has any correlation with the output type.Stream to pass unmodified to next transformation.",
    "params": [
      {
        "name": "tables",
        "description": "Stream to pass unmodified to next transformation.",
        "required": false
      }
    ],
    "examples": null,
    "package": "debug"
  },
  {
    "name": "pass",
    "description": "debug.pass() will pass any incoming tables directly next to the following transformation.\nIt is best used to interrupt any planner rules that rely on a specific ordering.Stream to pass unmodified to next transformation.",
    "params": [
      {
        "name": "tables",
        "description": "Stream to pass unmodified to next transformation.",
        "required": false
      }
    ],
    "examples": null,
    "package": "debug"
  },
  {
    "name": "sink",
    "description": "debug.sink() will discard all data that comes into it.Stream to discard.",
    "params": [
      {
        "name": "tables",
        "description": "Stream to discard.",
        "required": false
      }
    ],
    "examples": null,
    "package": "debug"
  },
  {
    "name": "slurp",
    "description": "debug.slurp() will read the incoming tables and concatenate buffers with the same group key\ninto a single in memory table buffer. This is useful for testing the performance impact of multiple\nbuffers versus a single buffer.Stream to consume into single buffers per table.",
    "params": [
      {
        "name": "tables",
        "description": "Stream to consume into single buffers per table.",
        "required": false
      }
    ],
    "examples": null,
    "package": "debug"
  },
  {
    "name": "derivative",
    "description": "derivative() computes the rate of change per unit of time between subsequent\nnon-null records.The function assumes rows are ordered by the _time.The output table schema will be the same as the input table.\nFor each input table with n rows, derivative() outputs a table with\nn - 1 rows.Time duration used to calculate the derivative. Default is 1s.Disallow negative derivative values. Default is false.When true, if a value is less than the previous value, the function\nassumes the previous value should have been a zero.List of columns to operate on. Default is [\"_value\"].Column containing time values to use in the calculation.\nDefault is _time.Use zero (0) as the initial value in the derivative calculation\nwhen the subsequent value is less than the previous value and nonNegative is\ntrue. Default is false.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "unit",
        "description": "Time duration used to calculate the derivative. Default is 1s.",
        "required": false
      },
      {
        "name": "nonNegative",
        "description": "Disallow negative derivative values. Default is false.When true, if a value is less than the previous value, the function\nassumes the previous value should have been a zero.",
        "required": false
      },
      {
        "name": "columns",
        "description": "List of columns to operate on. Default is [\"_value\"].",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Column containing time values to use in the calculation.\nDefault is _time.",
        "required": false
      },
      {
        "name": "initialZero",
        "description": "Use zero (0) as the initial value in the derivative calculation\nwhen the subsequent value is less than the previous value and nonNegative is\ntrue. Default is false.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "fromList",
    "description": "dict.fromList() creates a dictionary from a list of records with key and value\nproperties.(Required)\nList of records with key and value properties.",
    "params": [
      {
        "name": "pairs",
        "description": "(Required)\nList of records with key and value properties.",
        "required": true
      }
    ],
    "examples": null,
    "package": "dict"
  },
  {
    "name": "get",
    "description": "dict.get() returns the value of a specified key in a dictionary or a default value\nif the key does not exist.(Required)\nDictionary to return a value from.(Required)\nKey to return from the dictionary.(Required)\nDefault value to return if the key does not exist in the\ndictionary. Must be the same type as values in the dictionary.",
    "params": [
      {
        "name": "dict",
        "description": "(Required)\nDictionary to return a value from.",
        "required": true
      },
      {
        "name": "key",
        "description": "(Required)\nKey to return from the dictionary.",
        "required": true
      },
      {
        "name": "default",
        "description": "(Required)\nDefault value to return if the key does not exist in the\ndictionary. Must be the same type as values in the dictionary.",
        "required": true
      }
    ],
    "examples": null,
    "package": "dict"
  },
  {
    "name": "insert",
    "description": "dict.insert() inserts a key-value pair into a dictionary and returns a new,\nupdated dictionary.If the key already exists in the dictionary, the function overwrites\nthe existing value.(Required)\nDictionary to update.(Required)\nKey to insert into the dictionary.\nMust be the same type as the existing keys in the dictionary.(Required)\nValue to insert into the dictionary.\nMust be the same type as the existing values in the dictionary.",
    "params": [
      {
        "name": "dict",
        "description": "(Required)\nDictionary to update.",
        "required": true
      },
      {
        "name": "key",
        "description": "(Required)\nKey to insert into the dictionary.\nMust be the same type as the existing keys in the dictionary.",
        "required": true
      },
      {
        "name": "value",
        "description": "(Required)\nValue to insert into the dictionary.\nMust be the same type as the existing values in the dictionary.",
        "required": true
      }
    ],
    "examples": null,
    "package": "dict"
  },
  {
    "name": "remove",
    "description": "dict.remove() removes a key value pair from a dictionary and returns an updated\ndictionary.(Required)\nDictionary to remove the key-value pair from.(Required)\nKey to remove from the dictionary.\nMust be the same type as existing keys in the dictionary.",
    "params": [
      {
        "name": "dict",
        "description": "(Required)\nDictionary to remove the key-value pair from.",
        "required": true
      },
      {
        "name": "key",
        "description": "(Required)\nKey to remove from the dictionary.\nMust be the same type as existing keys in the dictionary.",
        "required": true
      }
    ],
    "examples": null,
    "package": "dict"
  },
  {
    "name": "die",
    "description": "die() stops the Flux script execution and returns an error message.(Required)\nError message to return.",
    "params": [
      {
        "name": "msg",
        "description": "(Required)\nError message to return.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "difference",
    "description": "difference() returns the difference between subsequent values.For each input table with n rows, difference() outputs a table with\nn - 1 rows.Disallow negative differences. Default is false.When true, if a value is less than the previous value, the function\nassumes the previous value should have been a zero.List of columns to operate on. Default is [\"_value\"].Keep the first row in each input table. Default is false.If true, the difference of the first row of each output table is null.Use zero (0) as the initial value in the difference calculation\nwhen the subsequent value is less than the previous value and nonNegative is\ntrue. Default is false.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "nonNegative",
        "description": "Disallow negative differences. Default is false.When true, if a value is less than the previous value, the function\nassumes the previous value should have been a zero.",
        "required": false
      },
      {
        "name": "columns",
        "description": "List of columns to operate on. Default is [\"_value\"].",
        "required": false
      },
      {
        "name": "keepFirst",
        "description": "Keep the first row in each input table. Default is false.If true, the difference of the first row of each output table is null.",
        "required": false
      },
      {
        "name": "initialZero",
        "description": "Use zero (0) as the initial value in the difference calculation\nwhen the subsequent value is less than the previous value and nonNegative is\ntrue. Default is false.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "endpoint",
    "description": "discord.endpoint() sends a single message to a Discord channel using a\nDiscord webhook\nand data from table rows.discord.endpoint is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the record used to generate the Discord webhook request.\nRequires an r parameter.mapFn accepts a table row (r) and returns a record that must include the following field:For more information, see the discord.send() content parameter.(Required)\nDiscord webhook token.(Required)\nDiscord webhook ID.(Required)\nOverride the Discord webhook\u2019s default username.Override the Discord webhook\u2019s default avatar.",
    "params": [
      {
        "name": "webhookToken",
        "description": "(Required)\nDiscord webhook token.",
        "required": true
      },
      {
        "name": "webhookID",
        "description": "(Required)\nDiscord webhook ID.",
        "required": true
      },
      {
        "name": "username",
        "description": "(Required)\nOverride the Discord webhook\u2019s default username.",
        "required": true
      },
      {
        "name": "avatar_url",
        "description": "Override the Discord webhook\u2019s default avatar.",
        "required": false
      }
    ],
    "examples": null,
    "package": "discord"
  },
  {
    "name": "send",
    "description": "discord.send() sends a single message to a Discord channel using a Discord webhook.(Required)\nDiscord webhook token.(Required)\nDiscord webhook ID.(Required)\nOverride the Discord webhook\u2019s default username.(Required)\nMessage to send to Discord (2000 character limit).Override the Discord webhook\u2019s default avatar.",
    "params": [
      {
        "name": "webhookToken",
        "description": "(Required)\nDiscord webhook token.",
        "required": true
      },
      {
        "name": "webhookID",
        "description": "(Required)\nDiscord webhook ID.",
        "required": true
      },
      {
        "name": "username",
        "description": "(Required)\nOverride the Discord webhook\u2019s default username.",
        "required": true
      },
      {
        "name": "content",
        "description": "(Required)\nMessage to send to Discord (2000 character limit).",
        "required": true
      },
      {
        "name": "avatar_url",
        "description": "Override the Discord webhook\u2019s default avatar.",
        "required": false
      }
    ],
    "examples": null,
    "package": "discord"
  },
  {
    "name": "display",
    "description": "display() returns the Flux literal representation of any value as a string.Basic types are converted directly to a string.\nBytes types are represented as a string of lowercase hexadecimal characters prefixed with 0x.\nComposite types (arrays, dictionaries, and records) are represented in a syntax similar\nto their equivalent Flux literal representation.Note the following about the resulting string representation:display() differs from string() in that display() recursively converts values inside\ncomposite types to strings. string() does not operate on composite types.(Required)\nValue to convert for display.Use array.from() and display() to quickly observe any value.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert for display.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "distinct",
    "description": "distinct() returns all unique values in a specified column.The _value of each output record is set to a distinct value in the specified column.\nnull is considered its own distinct value if present.Column to return unique values from. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to return unique values from. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "doubleEMA",
    "description": "doubleEMA() returns the double exponential moving average (DEMA) of values in\nthe _value column grouped into n number of points, giving more weight to\nrecent data.(Required)\nNumber of points to average.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of points to average.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "drop",
    "description": "drop() removes specified columns from a table.Columns are specified either through a list or a predicate function.\nWhen a dropped column is part of the group key, it is removed from the key.\nIf a specified column is not present in a table, the function returns an error.List of columns to remove from input tables. Mutually exclusive with fn.Predicate function with a column parameter that returns a boolean\nvalue indicating whether or not the column should be removed from input tables.\nMutually exclusive with columns.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "columns",
        "description": "List of columns to remove from input tables. Mutually exclusive with fn.",
        "required": false
      },
      {
        "name": "fn",
        "description": "Predicate function with a column parameter that returns a boolean\nvalue indicating whether or not the column should be removed from input tables.\nMutually exclusive with columns.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "duplicate",
    "description": "duplicate() duplicates a specified column in a table.If the specified column is part of the group key, it will be duplicated, but\nthe duplicate column will not be part of the output\u2019s group key.(Required)\nColumn to duplicate.(Required)\nName to assign to the duplicate column.If the as column already exists, it will be overwritten by the duplicated column.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "(Required)\nColumn to duplicate.",
        "required": true
      },
      {
        "name": "as",
        "description": "(Required)\nName to assign to the duplicate column.If the as column already exists, it will be overwritten by the duplicated column.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "duration",
    "description": "duration() converts a value to a duration type.duration() treats integers and unsigned integers as nanoseconds.\nFor a string to be converted to a duration type, the string must use\nduration literal representation.(Required)\nValue to convert.Flux does not support duration column types.\nTo store durations in a column, convert duration types to strings.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "asArray",
    "description": "dynamic.asArray() converts a dynamic value into an array of dynamic elements.The dynamic input value must be an array. If it is not an array, dynamic.asArray() returns an error.Dynamic value to convert. Default is the piped-forward value (<-).",
    "params": [
      {
        "name": "v",
        "description": "Dynamic value to convert. Default is the piped-forward value (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "dynamic"
  },
  {
    "name": "dynamic",
    "description": "dynamic.dynamic() wraps a value so it can be used as a dynamic value.(Required)\nValue to wrap as dynamic.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to wrap as dynamic.",
        "required": true
      }
    ],
    "examples": null,
    "package": "dynamic"
  },
  {
    "name": "isType",
    "description": "dynamic.isType() tests if a dynamic type holds a value of a specified type.(Required)\nValue to test.(Required)\nString describing the type to check against.Supported types:",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to test.",
        "required": true
      },
      {
        "name": "type",
        "description": "(Required)\nString describing the type to check against.Supported types:",
        "required": true
      }
    ],
    "examples": null,
    "package": "dynamic"
  },
  {
    "name": "jsonEncode",
    "description": "dynamic.jsonEncode() converts a dynamic value into JSON bytes.(Required)\nValue to encode into JSON.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to encode into JSON.",
        "required": true
      }
    ],
    "examples": null,
    "package": "dynamic"
  },
  {
    "name": "jsonParse",
    "description": "dynamic.jsonParse() takes JSON data as bytes and returns dynamic values.JSON input is converted to dynamic-typed values which may be converted to\na statically typed value with dynamic.asArray() or casting functions in the dynamic package.(Required)\nJSON data (as bytes) to parse.",
    "params": [
      {
        "name": "data",
        "description": "(Required)\nJSON data (as bytes) to parse.",
        "required": true
      }
    ],
    "examples": null,
    "package": "dynamic"
  },
  {
    "name": "elapsed",
    "description": "elapsed() returns the time between subsequent records.For each input table, elapsed() returns the same table without the first row\n(because there is no previous time to derive the elapsed time from) and an\nadditional column containing the elapsed time.Unit of time used in the calculation. Default is 1s.Column to use to compute the elapsed time. Default is _time.Column to store elapsed times in. Default is elapsed.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "unit",
        "description": "Unit of time used in the calculation. Default is 1s.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Column to use to compute the elapsed time. Default is _time.",
        "required": false
      },
      {
        "name": "columnName",
        "description": "Column to store elapsed times in. Default is elapsed.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "duration",
    "description": "events.duration() calculates the duration of events.The function determines the time between a record and the subsequent record\nand associates the duration with the first record (start of the event).\nTo calculate the duration of the last event,\nthe function compares the timestamp of the final record\nto the timestamp in the stopColumn or the specified stop time.events.duration() is similar to elapsed() and stateDuration(), but differs in important ways:See the example below.Duration unit of the calculated state duration.\nDefault is 1ns.Name of the result column.\nDefault is \"duration\".Name of the time column.\nDefault is \"_time\".Name of the stop column.\nDefault is \"_stop\".The latest time to use when calculating results.If provided, stop overrides the time value in the stopColumn.Input data. Default is piped-forward data (<-).The example below includes output values of\nevents.duration(), elapsed(), and stateDuration()\nrelated to the _time and state values of input data.",
    "params": [
      {
        "name": "unit",
        "description": "Duration unit of the calculated state duration.\nDefault is 1ns.",
        "required": false
      },
      {
        "name": "columnName",
        "description": "Name of the result column.\nDefault is \"duration\".",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Name of the time column.\nDefault is \"_time\".",
        "required": false
      },
      {
        "name": "stopColumn",
        "description": "Name of the stop column.\nDefault is \"_stop\".",
        "required": false
      },
      {
        "name": "stop",
        "description": "The latest time to use when calculating results.If provided, stop overrides the time value in the stopColumn.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "events"
  },
  {
    "name": "planner",
    "description": "expect.planner() will cause the present testcase to\nexpect the given planner rules will be invoked\nexactly as many times as the number given.The key is the name of the planner rule.(Required)\nMapping of rules names to expected counts.",
    "params": [
      {
        "name": "rules",
        "description": "(Required)\nMapping of rules names to expected counts.",
        "required": true
      }
    ],
    "examples": null,
    "package": "expect"
  },
  {
    "name": "addDuration",
    "description": "experimental.addDuration() adds a duration to a time value and returns the resulting time value.(Required)\nDuration to add.(Required)\nTime to add the duration to.Location to use for the time value.Use an absolute time or a relative duration.\nDurations are relative to now().A time may be represented as either an explicit timestamp\nor as a relative time from the current now time. addDuration can\nsupport either type of value.",
    "params": [
      {
        "name": "d",
        "description": "(Required)\nDuration to add.",
        "required": true
      },
      {
        "name": "to",
        "description": "(Required)\nTime to add the duration to.",
        "required": true
      },
      {
        "name": "location",
        "description": "Location to use for the time value.Use an absolute time or a relative duration.\nDurations are relative to now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "alignTime",
    "description": "experimental.alignTime() shifts time values in input tables to all start at a common start time.Time to align tables to. Default is 1970-01-01T00:00:00Z.Input data. Default is piped-forward data (<-).Each output table represents data from a calendar month.\nWhen visualized, data is still grouped by month, but timestamps are aligned\nto a common start time and values can be compared by time.",
    "params": [
      {
        "name": "alignTo",
        "description": "Time to align tables to. Default is 1970-01-01T00:00:00Z.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "catch",
    "description": "experimental.catch() calls a function and returns any error as a string value.\nIf the function does not error the returned value is made into a string and returned.(Required)\nFunction to call.",
    "params": [
      {
        "name": "fn",
        "description": "(Required)\nFunction to call.",
        "required": true
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "chain",
    "description": "experimental.chain() runs two queries in a single Flux script sequentially and outputs the\nresults of the second query.Flux typically executes multiple queries in a single script in parallel.\nRunning the queries sequentially ensures any dependencies the second query\nhas on the results of the first query are met.(Required)\nFirst query to execute.(Required)\nSecond query to execute.",
    "params": [
      {
        "name": "first",
        "description": "(Required)\nFirst query to execute.",
        "required": true
      },
      {
        "name": "second",
        "description": "(Required)\nSecond query to execute.",
        "required": true
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "count",
    "description": "experimental.count() returns the number of records in each input table.The count is returned in the _value column and counts both null and non-null records.experimental.count() returns 0 for empty tables.\nTo keep empty tables in your data, set the following parameters when using\nthe following functions:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "diff",
    "description": "experimental.diff() takes two table streams as input and produces a diff.experimental.diff() compares tables with the same group key.\nIf compared tables are different, the function returns a table for that group key with one or more rows.\nIf there are no differences, the function does not return a table for that group key.Note: experimental.diff() cannot tell the difference between an empty table and a non-existent table.Important: The output format of the diff is not considered stable and the algorithm used to produce the diff may change.\nThe only guarantees are those mentioned above.(Required)\nInput stream for the - side of the diff.Input stream for the + side of the diff.",
    "params": [
      {
        "name": "want",
        "description": "(Required)\nInput stream for the - side of the diff.",
        "required": true
      },
      {
        "name": "got",
        "description": "Input stream for the + side of the diff.",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "distinct",
    "description": "experimental.distinct() returns unique values from the _value column.The _value of each output record is set to a distinct value in the specified column.\nnull is considered a distinct value.experimental.distinct() drops all columns not in the group key and\ndrops empty tables.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "fill",
    "description": "experimental.fill() replaces all null values in the _value column with a non-null value.Value to replace null values with.\nData type must match the type of the _value column.Replace null values with the value of the previous non-null row.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "value",
        "description": "Value to replace null values with.\nData type must match the type of the _value column.",
        "required": false
      },
      {
        "name": "usePrevious",
        "description": "Replace null values with the value of the previous non-null row.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "first",
    "description": "experimental.first() returns the first record with a non-null value in the _value column\nfor each input table.experimental.first() drops empty tables.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "group",
    "description": "experimental.group() introduces an extend mode to the existing group() function.(Required)\nList of columns to use in the grouping operation. Default is [].(Required)\nGrouping mode. extend is the only mode available to experimental.group().Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "columns",
        "description": "(Required)\nList of columns to use in the grouping operation. Default is [].",
        "required": true
      },
      {
        "name": "mode",
        "description": "(Required)\nGrouping mode. extend is the only mode available to experimental.group().",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "histogram",
    "description": "experimental.histogram() approximates the cumulative distribution of a dataset by counting\ndata frequencies for a list of bins.A bin is defined by an upper bound where all data points that are less than\nor equal to the bound are counted in the bin.\nBin counts are cumulative.(Required)\nList of upper bounds to use when computing histogram frequencies,\nincluding the maximum value of the data set.This value can be set to positive infinity (float(v: \"+Inf\")) if no maximum is known.The following helper functions can be used to generated bins.Convert count values into frequency values between 0 and 1.\nDefault is false.Note: Normalized histograms cannot be aggregated by summing their counts.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "bins",
        "description": "(Required)\nList of upper bounds to use when computing histogram frequencies,\nincluding the maximum value of the data set.This value can be set to positive infinity (float(v: \"+Inf\")) if no maximum is known.The following helper functions can be used to generated bins.",
        "required": true
      },
      {
        "name": "normalize",
        "description": "Convert count values into frequency values between 0 and 1.\nDefault is false.Note: Normalized histograms cannot be aggregated by summing their counts.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "histogramQuantile",
    "description": "experimental.histogramQuantile() approximates a quantile given a histogram with the\ncumulative distribution of the dataset.Each input table represents a single histogram.\nInput tables must have two columns: a count column (_value) and an upper bound\ncolumn (le). Neither column can be part of the group key.The count is the number of values that are less than or equal to the upper bound value (le).\nInput tables can have an unlimited number of records; each record represents an entry in the histogram.\nThe counts must be monotonically increasing when sorted by upper bound (le).\nIf any values in the _value or le columns are null, the function returns an error.Linear interpolation between the two closest bounds is used to compute the quantile.\nIf the either of the bounds used in interpolation are infinite,\nthen the other finite bound is used and no interpolation is performed.The output table has the same group key as the input table.\nThe function returns the value of the specified quantile from the histogram in the\n_value column and drops all columns not part of the group key.Quantile to compute ([0.0 - 1.0]).Assumed minimum value of the dataset. Default is 0.0.When the quantile falls below the lowest upper bound, the function\ninterpolates values between minValue and the lowest upper bound.\nIf minValue is equal to negative infinity, the lowest upper bound is used.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "quantile",
        "description": "Quantile to compute ([0.0 - 1.0]).",
        "required": false
      },
      {
        "name": "minValue",
        "description": "Assumed minimum value of the dataset. Default is 0.0.When the quantile falls below the lowest upper bound, the function\ninterpolates values between minValue and the lowest upper bound.\nIf minValue is equal to negative infinity, the lowest upper bound is used.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "integral",
    "description": "experimental.integral() computes the area under the curve per unit of time of subsequent non-null records.The curve is defined using _time as the domain and record values as the range.Input tables must have _start, _stop, _time, and _valuecolumns._startand_stop` must be part of the group key.Time duration used to compute the integral.Type of interpolation to use. Default is \"\" (no interpolation).Use one of the following interpolation options:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "unit",
        "description": "Time duration used to compute the integral.",
        "required": false
      },
      {
        "name": "interpolate",
        "description": "Type of interpolation to use. Default is \"\" (no interpolation).Use one of the following interpolation options:",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "join",
    "description": "experimental.join() joins two streams of tables on the group key and _time column.Use the fn parameter to map new output tables using values from input tables.Note: To join streams of tables with different fields or measurements,\nuse group() or drop() to remove _field and _measurement from the\ngroup key before joining.(Required)\nFirst of two streams of tables to join.(Required)\nSecond of two streams of tables to join.(Required)\nFunction with left and right arguments that maps a new output record\nusing values from the left and right input records.\nThe return value must be a record.",
    "params": [
      {
        "name": "left",
        "description": "(Required)\nFirst of two streams of tables to join.",
        "required": true
      },
      {
        "name": "right",
        "description": "(Required)\nSecond of two streams of tables to join.",
        "required": true
      },
      {
        "name": "fn",
        "description": "(Required)\nFunction with left and right arguments that maps a new output record\nusing values from the left and right input records.\nThe return value must be a record.",
        "required": true
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "kaufmansAMA",
    "description": "experimental.kaufmansAMA() calculates the Kaufman\u2019s Adaptive Moving Average (KAMA) of input\ntables using the _value column in each table.Kaufman\u2019s Adaptive Moving Average is a trend-following indicator designed to\naccount for market noise or volatility.(Required)\nPeriod or number of points to use in the calculation.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nPeriod or number of points to use in the calculation.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "last",
    "description": "experimental.last() returns the last record with a non-null value in the _value column\nfor each input table.experimental.last() drops empty tables.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "max",
    "description": "experimental.max() returns the record with the highest value in the _value column for each\ninput table.// experimental.max() drops empty tables.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "mean",
    "description": "experimental.mean() computes the mean or average of non-null values in the _value column\nof each input table.Output tables contain a single row the with the calculated mean in the _value column.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "min",
    "description": "experimental.min() returns the record with the lowest value in the _value column for each\ninput table.experimental.min() drops empty tables.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "mode",
    "description": "experimental.mode() computes the mode or value that occurs most often in the _value column\nin each input table.experimental.mode only considers non-null values.\nIf there are multiple modes, it returns all modes in a sorted table.\nIf there is no mode, it returns null.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "objectKeys",
    "description": "experimental.objectKeys() returns an array of property keys in a specified record.(Required)\nRecord to return property keys from.",
    "params": [
      {
        "name": "o",
        "description": "(Required)\nRecord to return property keys from.",
        "required": true
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "preview",
    "description": "experimental.preview() limits the number of rows and tables in the stream.Included group keys are not deterministic and depends on the order\nthat the engine sends them.Maximum number of rows per table to return. Default is 5.Maximum number of tables to return.\nDefault is 5.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "nrows",
        "description": "Maximum number of rows per table to return. Default is 5.",
        "required": false
      },
      {
        "name": "ntables",
        "description": "Maximum number of tables to return.\nDefault is 5.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "quantile",
    "description": "experimental.quantile() returns non-null records with values in the _value column that\nfall within the specified quantile or represent the specified quantile.The _value column must contain float values.experimental.quantile() behaves like an aggregate function or a\nselector function depending on the method parameter.\nThe following computation methods are available:An aggregate method that uses a t-digest data structure\nto compute an accurate quantile estimate on large data sources.\nWhen used, experimental.quantile() outputs non-null records with values\nthat fall within the specified quantile.An aggregate method that takes the average of the two points closest to the quantile value.\nWhen used, experimental.quantile() outputs non-null records with values\nthat fall within the specified quantile.A selector method that returns the data point for which at least q points are less than.\nWhen used, experimental.quantile() outputs the non-null record with the\nvalue that represents the specified quantile.(Required)\nQuantile to compute ([0 - 1]).Computation method. Default is estimate_tdigest.Supported methods:Number of centroids to use when compressing the dataset.\nDefault is 1000.0.A larger number produces a more accurate result at the cost of increased\nmemory requirements.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "q",
        "description": "(Required)\nQuantile to compute ([0 - 1]).",
        "required": true
      },
      {
        "name": "method",
        "description": "Computation method. Default is estimate_tdigest.Supported methods:",
        "required": false
      },
      {
        "name": "compression",
        "description": "Number of centroids to use when compressing the dataset.\nDefault is 1000.0.A larger number produces a more accurate result at the cost of increased\nmemory requirements.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "set",
    "description": "experimental.set() sets multiple static column values on all records.If a column already exists, the function updates the existing value.\nIf a column does not exist, the function adds it with the specified value.(Required)\nRecord that defines the columns and values to set.The key of each key-value pair defines the column name.\nThe value of each key-value pair defines the column value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "o",
        "description": "(Required)\nRecord that defines the columns and values to set.The key of each key-value pair defines the column name.\nThe value of each key-value pair defines the column value.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "skew",
    "description": "experimental.skew() returns the skew of non-null values in the _value column for each\ninput table as a float.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "spread",
    "description": "experimental.spread() returns the difference between the minimum and maximum values in the\n_value column for each input table.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "stddev",
    "description": "experimental.stddev() returns the standard deviation of non-null values in the _value\ncolumn for each input table.The following modes are avaialable when calculating the standard deviation of data.Calculate the sample standard deviation where the data is considered to be\npart of a larger population.Calculate the population standard deviation where the data is considered a\npopulation of its own.Standard deviation mode or type of standard deviation to calculate.\nDefault is sample.Available options:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "mode",
        "description": "Standard deviation mode or type of standard deviation to calculate.\nDefault is sample.Available options:",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "subDuration",
    "description": "experimental.subDuration() subtracts a duration from a time value and returns the resulting time value.(Required)\nTime to subtract the duration from.Use an absolute time or a relative duration.\nDurations are relative to now().(Required)\nDuration to subtract.Location to use for the time value.A time may be represented as either an explicit timestamp\nor as a relative time from the current now time. subDuration can\nsupport either type of value.",
    "params": [
      {
        "name": "from",
        "description": "(Required)\nTime to subtract the duration from.Use an absolute time or a relative duration.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "d",
        "description": "(Required)\nDuration to subtract.",
        "required": true
      },
      {
        "name": "location",
        "description": "Location to use for the time value.",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "sum",
    "description": "experimental.sum() returns the sum of non-null values in the _value column for each input table.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "to",
    "description": "experimental.to() writes pivoted data to an InfluxDB 2.x or InfluxDB Cloud bucket.If using from() to query data from InfluxDB, use pivot() to transform\ndata into the structure experimental.to() expects.Name of the bucket to write to.\nbucket and bucketID are mutually exclusive.String-encoded bucket ID to to write to.\nbucket and bucketID are mutually exclusive.URL of the InfluxDB instance to write to.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.\nhost is required when writing to a remote InfluxDB instance.\nIf specified, token is also required.Organization name.\norg and orgID are mutually exclusive.String-encoded organization ID to query.\norg and orgID are mutually exclusive.InfluxDB API token.InfluxDB 1.x or Enterprise: If authentication is disabled, provide an\nempty string (\"\"). If authentication is enabled, provide your InfluxDB\nusername and password using the <username>:<password> syntax.\ntoken is required when writing to another organization or when host\nis specified.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "bucket",
        "description": "Name of the bucket to write to.\nbucket and bucketID are mutually exclusive.",
        "required": false
      },
      {
        "name": "bucketID",
        "description": "String-encoded bucket ID to to write to.\nbucket and bucketID are mutually exclusive.",
        "required": false
      },
      {
        "name": "host",
        "description": "URL of the InfluxDB instance to write to.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.\nhost is required when writing to a remote InfluxDB instance.\nIf specified, token is also required.",
        "required": false
      },
      {
        "name": "org",
        "description": "Organization name.\norg and orgID are mutually exclusive.",
        "required": false
      },
      {
        "name": "orgID",
        "description": "String-encoded organization ID to query.\norg and orgID are mutually exclusive.",
        "required": false
      },
      {
        "name": "token",
        "description": "InfluxDB API token.InfluxDB 1.x or Enterprise: If authentication is disabled, provide an\nempty string (\"\"). If authentication is enabled, provide your InfluxDB\nusername and password using the <username>:<password> syntax.\ntoken is required when writing to another organization or when host\nis specified.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "unique",
    "description": "experimental.unique() returns all records containing unique values in the _value column.null is considered a unique value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "unpivot",
    "description": "experimental.unpivot() creates _field and _value columns pairs using all columns (other than _time)\nnot in the group key.\nThe _field column contains the original column label and the _value column\ncontains the original column value.The output stream retains the group key and all group key columns of the input stream.\n_field is added to the output group key.Input data. Default is piped-forward data (<-).List of column names that are not in the group key but are also not field columns. Default is [\"_time\"].",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "otherColumns",
        "description": "List of column names that are not in the group key but are also not field columns. Default is [\"_time\"].",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "window",
    "description": "experimental.window() groups records based on time._start and _stop columns are updated to reflect the bounds of\nthe window the row\u2019s time value is in.\nInput tables must have _start, _stop, and _time columns.A single input record can be placed into zero or more output tables depending\non the specific windowing function.By default the start boundary of a window will align with the Unix epoch\nmodified by the offset of the location option.every, period, and offset support all valid duration units, including\ncalendar months (1mo) and years (1y).Duration of time between windows. Default is the 0s.Duration of the window. Default is 0s.Period is the length of each interval.\nIt can be negative, indicating the start and stop boundaries are reversed.Duration to shift the window boundaries by. Default is 0s.offset can be negative, indicating that the offset goes backwards in time.Location used to determine timezone. Default is the location option.Create empty tables for empty windows. Default is false.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "every",
        "description": "Duration of time between windows. Default is the 0s.",
        "required": false
      },
      {
        "name": "period",
        "description": "Duration of the window. Default is 0s.Period is the length of each interval.\nIt can be negative, indicating the start and stop boundaries are reversed.",
        "required": false
      },
      {
        "name": "offset",
        "description": "Duration to shift the window boundaries by. Default is 0s.offset can be negative, indicating that the offset goes backwards in time.",
        "required": false
      },
      {
        "name": "location",
        "description": "Location used to determine timezone. Default is the location option.",
        "required": false
      },
      {
        "name": "createEmpty",
        "description": "Create empty tables for empty windows. Default is false.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "experimental"
  },
  {
    "name": "exponentialMovingAverage",
    "description": "exponentialMovingAverage() calculates the exponential moving average of n\nnumber of values in the _value column giving more weight to more recent data.(Required)\nNumber of values to average.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of values to average.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "fill",
    "description": "fill() replaces all null values in input tables with a non-null value.Output tables are the same as the input tables with all null values replaced\nin the specified column.Column to replace null values in. Default is _value.Constant value to replace null values with.Value type must match the type of the specified column.Replace null values with the previous non-null value.\nDefault is false.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to replace null values in. Default is _value.",
        "required": false
      },
      {
        "name": "value",
        "description": "Constant value to replace null values with.Value type must match the type of the specified column.",
        "required": false
      },
      {
        "name": "usePrevious",
        "description": "Replace null values with the previous non-null value.\nDefault is false.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "filter",
    "description": "filter() filters data based on conditions defined in a predicate function (fn).Output tables have the same schema as the corresponding input tables.(Required)\nSingle argument predicate function that evaluates true or false.Records representing each row are passed to the function as r.\nRecords that evaluate to true are included in output tables.\nRecords that evaluate to null or false are excluded from output tables.Action to take with empty tables. Default is drop.Supported values:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "fn",
        "description": "(Required)\nSingle argument predicate function that evaluates true or false.Records representing each row are passed to the function as r.\nRecords that evaluate to true are included in output tables.\nRecords that evaluate to null or false are excluded from output tables.",
        "required": true
      },
      {
        "name": "onEmpty",
        "description": "Action to take with empty tables. Default is drop.Supported values:",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "findColumn",
    "description": "findColumn() returns an array of values in a specified column from the first\ntable in a stream of tables that matches the specified predicate function.The function returns an empty array if no table is found or if the column\nlabel is not present in the set of columns.(Required)\nColumn to extract.(Required)\nPredicate function to evaluate input table group keys.findColumn() uses the first table that resolves as true.\nThe predicate function requires a key argument that represents each input\ntable\u2019s group key as a record.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "(Required)\nColumn to extract.",
        "required": true
      },
      {
        "name": "fn",
        "description": "(Required)\nPredicate function to evaluate input table group keys.findColumn() uses the first table that resolves as true.\nThe predicate function requires a key argument that represents each input\ntable\u2019s group key as a record.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "findRecord",
    "description": "findRecord() returns a row at a specified index as a record from the first\ntable in a stream of tables that matches the specified predicate function.The function returns an empty record if no table is found or if the index is\nout of bounds.(Required)\nIndex of the record to extract.(Required)\nPredicate function to evaluate input table group keys.findColumn() uses the first table that resolves as true.\nThe predicate function requires a key argument that represents each input\ntable\u2019s group key as a record.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "idx",
        "description": "(Required)\nIndex of the record to extract.",
        "required": true
      },
      {
        "name": "fn",
        "description": "(Required)\nPredicate function to evaluate input table group keys.findColumn() uses the first table that resolves as true.\nThe predicate function requires a key argument that represents each input\ntable\u2019s group key as a record.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "first",
    "description": "first() returns the first non-null record from each input table.Note: first() drops empty tables.Column to operate on. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "float",
    "description": "float() converts a value to a float type.(Required)\nValue to convert.If converting the _value column to float types, use toFloat().\nIf converting columns other than _value, use map() to iterate over each\nrow and float() to covert a column value to a float type.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "from",
    "description": "from() queries data from an InfluxDB data source.It returns a stream of tables from the specified bucket.\nEach unique series is contained within its own table.\nEach record in the table represents a single point in the series.Use from() to query data from remote InfluxDB OSS 1.7+,\nInfluxDB Enterprise 1.9+, and InfluxDB Cloud.\nTo query remote InfluxDB sources, include the host, token, and org\n(or orgID) parameters.from() is part of the influxdata/influxdb package, but is part of the\nFlux prelude and does not require an import statement or package namespace.Name of the bucket to query.\nbucket and bucketID are mutually exclusive.InfluxDB 1.x or Enterprise: Provide an empty string (\"\").String-encoded bucket ID to query.\nbucket and bucketID are mutually exclusive.InfluxDB 1.x or Enterprise: Provide an empty string (\"\").URL of the InfluxDB instance to query.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.Organization name.\norg and orgID are mutually exclusive.InfluxDB 1.x or Enterprise: Provide an empty string (\"\").String-encoded organization ID to query.\norg and orgID are mutually exclusive.InfluxDB 1.x or Enterprise: Provide an empty string (\"\").InfluxDB API token.InfluxDB 1.x or Enterprise: If authentication is disabled, provide an\nempty string (\"\"). If authentication is enabled, provide your InfluxDB\nusername and password using the <username>:<password> syntax.",
    "params": [
      {
        "name": "bucket",
        "description": "Name of the bucket to query.\nbucket and bucketID are mutually exclusive.InfluxDB 1.x or Enterprise: Provide an empty string (\"\").",
        "required": false
      },
      {
        "name": "bucketID",
        "description": "String-encoded bucket ID to query.\nbucket and bucketID are mutually exclusive.InfluxDB 1.x or Enterprise: Provide an empty string (\"\").",
        "required": false
      },
      {
        "name": "host",
        "description": "URL of the InfluxDB instance to query.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.",
        "required": false
      },
      {
        "name": "org",
        "description": "Organization name.\norg and orgID are mutually exclusive.InfluxDB 1.x or Enterprise: Provide an empty string (\"\").",
        "required": false
      },
      {
        "name": "orgID",
        "description": "String-encoded organization ID to query.\norg and orgID are mutually exclusive.InfluxDB 1.x or Enterprise: Provide an empty string (\"\").",
        "required": false
      },
      {
        "name": "token",
        "description": "InfluxDB API token.InfluxDB 1.x or Enterprise: If authentication is disabled, provide an\nempty string (\"\"). If authentication is enabled, provide your InfluxDB\nusername and password using the <username>:<password> syntax.",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "from",
    "description": "from() retrieves data from an InfluxDB bucket between the start and stop times.This version of from is equivalent to from() |> range() in a single call.(Required)\nName of the bucket to query.InfluxDB 1.x or Enterprise: Provide an empty string (\"\").(Required)\nEarliest time to include in results.Results include points that match the specified start time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().Latest time to include in results. Default is now().Results exclude points that match the specified stop time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().URL of the InfluxDB instance to query.See InfluxDB OSS URLs\nor InfluxDB Cloud regions.Organization name.InfluxDB API token.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nName of the bucket to query.InfluxDB 1.x or Enterprise: Provide an empty string (\"\").",
        "required": true
      },
      {
        "name": "start",
        "description": "(Required)\nEarliest time to include in results.Results include points that match the specified start time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "stop",
        "description": "Latest time to include in results. Default is now().Results exclude points that match the specified stop time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": false
      },
      {
        "name": "host",
        "description": "URL of the InfluxDB instance to query.See InfluxDB OSS URLs\nor InfluxDB Cloud regions.",
        "required": false
      },
      { "name": "org", "description": "Organization name.", "required": false },
      {
        "name": "token",
        "description": "InfluxDB API token.",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "tables",
    "description": "gen.tables() generates a stream of table data.(Required)\nNumber of rows to generate.Percentage chance that a null value will be used in the input. Valid value range is [0.0 - 1.0].Set of tags with their cardinality to generate.Pass seed to tables generator to get the very same sequence each time.",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of rows to generate.",
        "required": true
      },
      {
        "name": "nulls",
        "description": "Percentage chance that a null value will be used in the input. Valid value range is [0.0 - 1.0].",
        "required": false
      },
      {
        "name": "tags",
        "description": "Set of tags with their cardinality to generate.",
        "required": false
      },
      {
        "name": "seed",
        "description": "Pass seed to tables generator to get the very same sequence each time.",
        "required": false
      }
    ],
    "examples": null,
    "package": "gen"
  },
  {
    "name": "from",
    "description": "generate.from() generates data using the provided parameter values.(Required)\nNumber of rows to generate.(Required)\nFunction used to generate values.The function takes an n parameter that represents the row index, operates\non n, and then returns an integer value. Rows use zero-based indexing.(Required)\nBeginning of the time range to generate values in.(Required)\nEnd of the time range to generate values in.",
    "params": [
      {
        "name": "count",
        "description": "(Required)\nNumber of rows to generate.",
        "required": true
      },
      {
        "name": "fn",
        "description": "(Required)\nFunction used to generate values.The function takes an n parameter that represents the row index, operates\non n, and then returns an integer value. Rows use zero-based indexing.",
        "required": true
      },
      {
        "name": "start",
        "description": "(Required)\nBeginning of the time range to generate values in.",
        "required": true
      },
      {
        "name": "stop",
        "description": "(Required)\nEnd of the time range to generate values in.",
        "required": true
      }
    ],
    "examples": null,
    "package": "generate"
  },
  {
    "name": "asTracks",
    "description": "geo.asTracks() groups rows into tracks (sequential, related data points).Columns to group by. These columns should uniquely identify each track.\nDefault is [\"id\",\"tid\"].Columns to order results by. Default is [\"_time\"].Sort precedence is determined by list order (left to right).Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "groupBy",
        "description": "Columns to group by. These columns should uniquely identify each track.\nDefault is [\"id\",\"tid\"].",
        "required": false
      },
      {
        "name": "orderBy",
        "description": "Columns to order results by. Default is [\"_time\"].Sort precedence is determined by list order (left to right).",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "filterRows",
    "description": "geo.filterRows() filters data by a specified geographic region with the option of strict filtering.This function is a combination of geo.gridFilter() and geo.strictFilter().\nInput data must include an s2_cell_id column that is part of the group key.(Required)\nRegion containing the desired data points.Specify record properties for the shape.Minimum number of cells that cover the specified region.\nDefault is 24.Maximum number of cells that cover the specified region.\nDefault is -1 (unlimited).S2 cell level\nof grid cells. Default is -1.Note: level is mutually exclusive with minSize and maxSize and\nmust be less than or equal to s2cellIDLevel.S2 cell level\nused in the s2_cell_id tag. Default is -1 (detects S2 cell level from the s2_cell_id tag).Enable strict geographic data filtering. Default is true.Strict filtering returns only points with coordinates in the defined region.\nNon-strict filtering returns all points from S2 grid cells that are partially\ncovered by the defined region.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "region",
        "description": "(Required)\nRegion containing the desired data points.Specify record properties for the shape.",
        "required": true
      },
      {
        "name": "minSize",
        "description": "Minimum number of cells that cover the specified region.\nDefault is 24.",
        "required": false
      },
      {
        "name": "maxSize",
        "description": "Maximum number of cells that cover the specified region.\nDefault is -1 (unlimited).",
        "required": false
      },
      {
        "name": "level",
        "description": "S2 cell level\nof grid cells. Default is -1.Note: level is mutually exclusive with minSize and maxSize and\nmust be less than or equal to s2cellIDLevel.",
        "required": false
      },
      {
        "name": "s2cellIDLevel",
        "description": "S2 cell level\nused in the s2_cell_id tag. Default is -1 (detects S2 cell level from the s2_cell_id tag).",
        "required": false
      },
      {
        "name": "strict",
        "description": "Enable strict geographic data filtering. Default is true.Strict filtering returns only points with coordinates in the defined region.\nNon-strict filtering returns all points from S2 grid cells that are partially\ncovered by the defined region.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "getGrid",
    "description": "geo.getGrid() calculates a grid or set of cell ID tokens for a specified region.Note: S2 grid cells may not perfectly align with the defined region,\nso results include S2 grid cells fully and partially covered by the region.(Required)\nRegion used to return S2 cell ID tokens.\nSpecify record properties for the region shape.Minimum number of cells that cover the specified region.Minimum number of cells that cover the specified region.S2 cell level of grid cells.Maximumn S2 cell level of grid cells.(Required)\nRecord that defines the unit of measurement for distance.",
    "params": [
      {
        "name": "region",
        "description": "(Required)\nRegion used to return S2 cell ID tokens.\nSpecify record properties for the region shape.",
        "required": true
      },
      {
        "name": "minSize",
        "description": "Minimum number of cells that cover the specified region.",
        "required": false
      },
      {
        "name": "maxSize",
        "description": "Minimum number of cells that cover the specified region.",
        "required": false
      },
      {
        "name": "level",
        "description": "S2 cell level of grid cells.",
        "required": false
      },
      {
        "name": "maxLevel",
        "description": "Maximumn S2 cell level of grid cells.",
        "required": false
      },
      {
        "name": "units",
        "description": "(Required)\nRecord that defines the unit of measurement for distance.",
        "required": true
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "getLevel",
    "description": "geo.getLevel() returns the S2 cell level of specified cell ID token.(Required)\nS2 cell ID token.",
    "params": [
      {
        "name": "token",
        "description": "(Required)\nS2 cell ID token.",
        "required": true
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "gridFilter",
    "description": "geo.gridFilter() filters data by a specified geographic region.The function compares input data to a set of S2 cell ID tokens located in the specified region.\nInput data must include an s2_cell_id column that is part of the group key.Note: S2 Grid cells may not perfectly align with the defined region,\nso results may include data with coordinates outside the region, but inside\nS2 grid cells partially covered by the region.\nUse geo.toRows() and geo.strictFilter() after geo.gridFilter() to precisely filter points.(Required)\nRegion containing the desired data points.Specify record properties for the shape.Minimum number of cells that cover the specified region.\nDefault is 24.Maximum number of cells that cover the specified region.\nDefault is -1 (unlimited).S2 cell level\nof grid cells. Default is -1.Note: level is mutually exclusive with minSize and maxSize and\nmust be less than or equal to s2cellIDLevel.S2 cell level\nused in the s2_cell_id tag. Default is -1 (detects S2 cell level from the S2 cell ID token).Record that defines the unit of measurement for distance.\nDefault is the geo.units option.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "region",
        "description": "(Required)\nRegion containing the desired data points.Specify record properties for the shape.",
        "required": true
      },
      {
        "name": "minSize",
        "description": "Minimum number of cells that cover the specified region.\nDefault is 24.",
        "required": false
      },
      {
        "name": "maxSize",
        "description": "Maximum number of cells that cover the specified region.\nDefault is -1 (unlimited).",
        "required": false
      },
      {
        "name": "level",
        "description": "S2 cell level\nof grid cells. Default is -1.Note: level is mutually exclusive with minSize and maxSize and\nmust be less than or equal to s2cellIDLevel.",
        "required": false
      },
      {
        "name": "s2cellIDLevel",
        "description": "S2 cell level\nused in the s2_cell_id tag. Default is -1 (detects S2 cell level from the S2 cell ID token).",
        "required": false
      },
      {
        "name": "units",
        "description": "Record that defines the unit of measurement for distance.\nDefault is the geo.units option.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "groupByArea",
    "description": "geo.groupByArea() groups rows by geographic area.Area sizes are determined by the specified level.\nEach geographic area is assigned a unique identifier (the S2 cell ID token)\nwhich is stored in the newColumn.\nResults are grouped by newColumn.(Required)\nName of the new column for the unique identifier for each geographic area.(Required)\nS2 Cell level\nused to determine the size of each geographic area.S2 Cell level\nused in the s2_cell_id tag. Default is -1 (detects S2 cell level from the s2_cell_id tag).Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "newColumn",
        "description": "(Required)\nName of the new column for the unique identifier for each geographic area.",
        "required": true
      },
      {
        "name": "level",
        "description": "(Required)\nS2 Cell level\nused to determine the size of each geographic area.",
        "required": true
      },
      {
        "name": "s2cellIDLevel",
        "description": "S2 Cell level\nused in the s2_cell_id tag. Default is -1 (detects S2 cell level from the s2_cell_id tag).",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "s2CellIDToken",
    "description": "geo.s2CellIDToken() returns and S2 cell ID token for given cell or point at a\nspecified S2 cell level.S2 cell ID token to update.Useful for changing the S2 cell level of an existing S2 cell ID token.Record with lat and lon properties that specify the latitude and\nlongitude in decimal degrees (WGS 84) of a point.(Required)\nS2 cell level to use when generating the S2 cell ID token.",
    "params": [
      {
        "name": "token",
        "description": "S2 cell ID token to update.Useful for changing the S2 cell level of an existing S2 cell ID token.",
        "required": false
      },
      {
        "name": "point",
        "description": "Record with lat and lon properties that specify the latitude and\nlongitude in decimal degrees (WGS 84) of a point.",
        "required": false
      },
      {
        "name": "level",
        "description": "(Required)\nS2 cell level to use when generating the S2 cell ID token.",
        "required": true
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "s2CellLatLon",
    "description": "geo.s2CellLatLon() returns the latitude and longitude of the center of an S2 cell.(Required)\nS2 cell ID token.",
    "params": [
      {
        "name": "token",
        "description": "(Required)\nS2 cell ID token.",
        "required": true
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "shapeData",
    "description": "geo.shapeData() renames existing latitude and longitude fields to lat and lon\nand adds an s2_cell_id tag.Use geo.shapeData() to ensure geotemporal data meets the requirements of the Geo package:(Required)\nName of the existing field that contains the latitude value in decimal degrees (WGS 84).Field is renamed to lat.(Required)\nName of the existing field that contains the longitude value in decimal degrees (WGS 84).Field is renamed to lon.(Required)\nS2 cell level\nto use when generating the S2 cell ID token.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "latField",
        "description": "(Required)\nName of the existing field that contains the latitude value in decimal degrees (WGS 84).Field is renamed to lat.",
        "required": true
      },
      {
        "name": "lonField",
        "description": "(Required)\nName of the existing field that contains the longitude value in decimal degrees (WGS 84).Field is renamed to lon.",
        "required": true
      },
      {
        "name": "level",
        "description": "(Required)\nS2 cell level\nto use when generating the S2 cell ID token.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "ST_Contains",
    "description": "geo.ST_Contains() returns boolean indicating whether the defined region contains a\nspecified GIS geometry.(Required)\nRegion to test. Specify record properties for the shape.(Required)\nGIS geometry to test. Can be either point or linestring geometry.Record that defines the unit of measurement for distance.\nDefault is the geo.units option.",
    "params": [
      {
        "name": "region",
        "description": "(Required)\nRegion to test. Specify record properties for the shape.",
        "required": true
      },
      {
        "name": "geometry",
        "description": "(Required)\nGIS geometry to test. Can be either point or linestring geometry.",
        "required": true
      },
      {
        "name": "units",
        "description": "Record that defines the unit of measurement for distance.\nDefault is the geo.units option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "ST_Distance",
    "description": "geo.ST_Distance() returns the distance from a given region to a specified GIS geometry.(Required)\nRegion to test. Specify record properties for the shape.(Required)\nGIS geometry to test. Can be either point or linestring geometry.Record that defines the unit of measurement for distance.\nDefault is the geo.units option.",
    "params": [
      {
        "name": "region",
        "description": "(Required)\nRegion to test. Specify record properties for the shape.",
        "required": true
      },
      {
        "name": "geometry",
        "description": "(Required)\nGIS geometry to test. Can be either point or linestring geometry.",
        "required": true
      },
      {
        "name": "units",
        "description": "Record that defines the unit of measurement for distance.\nDefault is the geo.units option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "ST_DWithin",
    "description": "geo.ST_DWithin() tests if the specified region is within a defined distance from\nthe specified GIS geometry and returns true or false.(Required)\nRegion to test. Specify record properties for the shape.(Required)\nGIS geometry to test. Can be either point or linestring geometry.(Required)\nMaximum distance allowed between the region and geometry.\nDefine distance units with the geo.units option.Record that defines the unit of measurement for distance.\nDefault is the geo.units option.",
    "params": [
      {
        "name": "region",
        "description": "(Required)\nRegion to test. Specify record properties for the shape.",
        "required": true
      },
      {
        "name": "geometry",
        "description": "(Required)\nGIS geometry to test. Can be either point or linestring geometry.",
        "required": true
      },
      {
        "name": "distance",
        "description": "(Required)\nMaximum distance allowed between the region and geometry.\nDefine distance units with the geo.units option.",
        "required": true
      },
      {
        "name": "units",
        "description": "Record that defines the unit of measurement for distance.\nDefault is the geo.units option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "ST_Intersects",
    "description": "geo.ST_Intersects() tests if the specified GIS geometry intersects with the\nspecified region and returns true or false.(Required)\nRegion to test. Specify record properties for the shape.(Required)\nGIS geometry to test. Can be either point or linestring geometry.Record that defines the unit of measurement for distance.\nDefault is the geo.units option.",
    "params": [
      {
        "name": "region",
        "description": "(Required)\nRegion to test. Specify record properties for the shape.",
        "required": true
      },
      {
        "name": "geometry",
        "description": "(Required)\nGIS geometry to test. Can be either point or linestring geometry.",
        "required": true
      },
      {
        "name": "units",
        "description": "Record that defines the unit of measurement for distance.\nDefault is the geo.units option.",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "ST_Length",
    "description": "geo.ST_Length() returns the spherical length or distance\nof the specified GIS geometry.(Required)\nGIS geometry to test. Can be either point or linestring geometry.\nPoint geometry will always return 0.0.Record that defines the unit of measurement for distance.",
    "params": [
      {
        "name": "geometry",
        "description": "(Required)\nGIS geometry to test. Can be either point or linestring geometry.\nPoint geometry will always return 0.0.",
        "required": true
      },
      {
        "name": "units",
        "description": "Record that defines the unit of measurement for distance.",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "ST_LineString",
    "description": "geo.ST_LineString() converts a series of geographic points into linestring.Group data into meaningful, ordered paths to before converting to linestring.\nRows in each table must have lat and lon columns.\nOutput tables contain a single row with a st_linestring column containing\nthe resulting linestring.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "stContains",
    "description": "geo.stContains() returns boolean indicating whether the defined region contains a specified GIS geometry.geo.stContains is used as a helper function for geo.ST_Contains().(Required)\nRegion to test. Specify record properties for the shape.(Required)\nGIS geometry to test. Can be either point or linestring geometry.(Required)\nRecord that defines the unit of measurement for distance.",
    "params": [
      {
        "name": "region",
        "description": "(Required)\nRegion to test. Specify record properties for the shape.",
        "required": true
      },
      {
        "name": "geometry",
        "description": "(Required)\nGIS geometry to test. Can be either point or linestring geometry.",
        "required": true
      },
      {
        "name": "units",
        "description": "(Required)\nRecord that defines the unit of measurement for distance.",
        "required": true
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "stDistance",
    "description": "geo.stDistance() returns the distance from a given region to a specified GIS geometry.geo.stDistance is used as a helper function for geo.ST_Distance().(Required)\nRegion to test. Specify record properties for the shape.(Required)\nGIS geometry to test. Can be either point or linestring geometry.(Required)\nRecord that defines the unit of measurement for distance.",
    "params": [
      {
        "name": "region",
        "description": "(Required)\nRegion to test. Specify record properties for the shape.",
        "required": true
      },
      {
        "name": "geometry",
        "description": "(Required)\nGIS geometry to test. Can be either point or linestring geometry.",
        "required": true
      },
      {
        "name": "units",
        "description": "(Required)\nRecord that defines the unit of measurement for distance.",
        "required": true
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "stLength",
    "description": "geo.stLength() returns the spherical length or distance\nof the specified GIS geometry.geo.stLength is used as a helper function for geo.ST_Length().(Required)\nGIS geometry to test. Can be either point or linestring geometry.\nPoint geometry will always return 0.0.(Required)\nRecord that defines the unit of measurement for distance.",
    "params": [
      {
        "name": "geometry",
        "description": "(Required)\nGIS geometry to test. Can be either point or linestring geometry.\nPoint geometry will always return 0.0.",
        "required": true
      },
      {
        "name": "units",
        "description": "(Required)\nRecord that defines the unit of measurement for distance.",
        "required": true
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "strictFilter",
    "description": "geo.strictFilter() filters data by latitude and longitude in a specified region.This filter is more strict than geo.gridFilter(), but for the best performance,\nuse geo.strictFilter() after geo.gridFilter().\nInput rows must have lat and lon columns.(Required)\nRegion containing the desired data points.Specify record properties for the shape.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "region",
        "description": "(Required)\nRegion containing the desired data points.Specify record properties for the shape.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "toRows",
    "description": "geo.toRows() pivots fields into columns based on time.Latitude and longitude should be stored as fields in InfluxDB.\nBecause most geo package transformation functions require rows to have\nlat and lon columns, lat and lot fields must be pivoted into columns.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "totalDistance",
    "description": "geo.totalDistance() calculates the total distance covered by subsequent points\nin each input table.Each row must contain lat (latitude) and lon (longitude) columns that\nrepresent the geographic coordinates of the point.\nRow sort order determines the order in which distance between points is calculated.\nUse the geo.units option to specify the unit of distance to return (default is km).Total distance output column. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "outputColumn",
        "description": "Total distance output column. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "geo"
  },
  {
    "name": "getColumn",
    "description": "getColumn() extracts a specified column from a table as an array.If the specified column is not present in the table, the function returns an error.(Required)\nColumn to extract.Input table. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "(Required)\nColumn to extract.",
        "required": true
      },
      {
        "name": "table",
        "description": "Input table. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "getRecord",
    "description": "getRecord() extracts a row at a specified index from a table as a record.If the specified index is out of bounds, the function returns an error.(Required)\nIndex of the record to extract.Input table. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "idx",
        "description": "(Required)\nIndex of the record to extract.",
        "required": true
      },
      {
        "name": "table",
        "description": "Input table. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "group",
    "description": "group() regroups input data by modifying group key of input tables.Note: Group does not gaurantee sort order.\nTo ensure data is sorted correctly, use sort() after group().List of columns to use in the grouping operation. Default is [].Note: When columns is set to an empty array, group() ungroups\nall data merges it into a single output table.Grouping mode. Default is by.Avaliable modes:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "columns",
        "description": "List of columns to use in the grouping operation. Default is [].Note: When columns is set to an empty array, group() ungroups\nall data merges it into a single output table.",
        "required": false
      },
      {
        "name": "mode",
        "description": "Grouping mode. Default is by.Avaliable modes:",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "cityhash64",
    "description": "hash.cityhash64() converts a string value to a 64-bit hexadecimal hash using the CityHash64 algorithm.(Required)\nString to hash.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to hash.",
        "required": true
      }
    ],
    "examples": null,
    "package": "hash"
  },
  {
    "name": "sha256",
    "description": "hash.sha256() converts a string value to a hexadecimal hash using the SHA 256 hash algorithm.(Required)\nString to hash.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to hash.",
        "required": true
      }
    ],
    "examples": null,
    "package": "hash"
  },
  {
    "name": "xxhash64",
    "description": "hash.xxhash64() converts a string value to a 64-bit hexadecimal hash using the xxHash algorithm.(Required)\nString to hash.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to hash.",
        "required": true
      }
    ],
    "examples": null,
    "package": "hash"
  },
  {
    "name": "bytes",
    "description": "hex.bytes() converts a hexadecimal string to bytes.(Required)\nString to convert.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "hex"
  },
  {
    "name": "int",
    "description": "hex.int() converts a hexadecimal string to an integer.(Required)\nString to convert.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "hex"
  },
  {
    "name": "string",
    "description": "hex.string() converts a Flux basic type to a hexadecimal string.The function is similar to string(), but encodes int, uint, and bytes\ntypes to hexadecimal lowercase characters.(Required)\nValue to convert.Use map() to iterate over and update all input rows.\nUse hex.string() to update the value of a column.\nThe following example uses data provided by the sampledata package.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "hex"
  },
  {
    "name": "uint",
    "description": "hex.uint() converts a hexadecimal string to an unsigned integer.(Required)\nString to convert.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "hex"
  },
  {
    "name": "highestAverage",
    "description": "highestAverage() calculates the average of each input table and returns the\nhighest n averages.Note: highestAverage() drops empty tables.(Required)\nNumber of records to return.Column to evaluate. Default is _value.List of columns to group by. Default is [].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of records to return.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to evaluate. Default is _value.",
        "required": false
      },
      {
        "name": "groupColumns",
        "description": "List of columns to group by. Default is [].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "highestCurrent",
    "description": "highestCurrent() selects the last record from each input table and returns the\nhighest n records.Note: highestCurrent() drops empty tables.(Required)\nNumber of records to return.Column to evaluate. Default is _value.List of columns to group by. Default is [].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of records to return.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to evaluate. Default is _value.",
        "required": false
      },
      {
        "name": "groupColumns",
        "description": "List of columns to group by. Default is [].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "highestMax",
    "description": "highestMax() selects the record with the highest value in the specified column\nfrom each input table and returns the highest n records.Note: highestMax() drops empty tables.(Required)\nNumber of records to return.Column to evaluate. Default is _value.List of columns to group by. Default is [].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of records to return.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to evaluate. Default is _value.",
        "required": false
      },
      {
        "name": "groupColumns",
        "description": "List of columns to group by. Default is [].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "histogram",
    "description": "histogram() approximates the cumulative distribution of a dataset by counting\ndata frequencies for a list of bins.A bin is defined by an upper bound where all data points that are less than\nor equal to the bound are counted in the bin. Bin counts are cumulative.Each input table is converted into a single output table representing a single histogram.\nEach output table has the same group key as the corresponding input table.\nColumns not part of the group key are dropped.\nOutput tables include additional columns for the upper bound and count of bins.Column containing input values. Column must be of type float.\nDefault is _value.Column to store bin upper bounds in. Default is le.Column to store bin counts in. Default is _value.(Required)\nList of upper bounds to use when computing the histogram frequencies.Bins should contain a bin whose bound is the maximum value of the data set.\nThis value can be set to positive infinity if no maximum is known.The following helper functions can be used to generated bins.Convert counts into frequency values between 0 and 1.\nDefault is false.Note: Normalized histograms cannot be aggregated by summing their counts.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column containing input values. Column must be of type float.\nDefault is _value.",
        "required": false
      },
      {
        "name": "upperBoundColumn",
        "description": "Column to store bin upper bounds in. Default is le.",
        "required": false
      },
      {
        "name": "countColumn",
        "description": "Column to store bin counts in. Default is _value.",
        "required": false
      },
      {
        "name": "bins",
        "description": "(Required)\nList of upper bounds to use when computing the histogram frequencies.Bins should contain a bin whose bound is the maximum value of the data set.\nThis value can be set to positive infinity if no maximum is known.The following helper functions can be used to generated bins.",
        "required": true
      },
      {
        "name": "normalize",
        "description": "Convert counts into frequency values between 0 and 1.\nDefault is false.Note: Normalized histograms cannot be aggregated by summing their counts.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "histogramQuantile",
    "description": "histogramQuantile() approximates a quantile given a histogram that approximates\nthe cumulative distribution of the dataset.Each input table represents a single histogram.\nThe histogram tables must have two columns \u2013 a count column and an upper bound column.The count is the number of values that are less than or equal to the upper bound value.\nThe table can have any number of records, each representing a bin in the histogram.\nThe counts must be monotonically increasing when sorted by upper bound.\nIf any values in the count column or upper bound column are null, it returns an error.\nThe count and upper bound columns must not be part of the group key.The quantile is computed using linear interpolation between the two closest bounds.\nIf either of the bounds used in interpolation are infinite, the other finite\nbound is used and no interpolation is performed.Output tables have the same group key as corresponding input tables.\nColumns not part of the group key are dropped.\nA single value column of type float is added.\nThe value column represents the value of the desired quantile from the histogram.Quantile to compute. Value must be between 0 and 1.Column containing histogram bin counts. Default is _value.Column containing histogram bin upper bounds.\nDefault is le.Column to store the computed quantile in. Default is `_value.Assumed minimum value of the dataset. Default is 0.0.If the quantile falls below the lowest upper bound, interpolation is\nperformed between minValue and the lowest upper bound.\nWhen minValue is equal to negative infinity, the lowest upper bound is used.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "quantile",
        "description": "Quantile to compute. Value must be between 0 and 1.",
        "required": false
      },
      {
        "name": "countColumn",
        "description": "Column containing histogram bin counts. Default is _value.",
        "required": false
      },
      {
        "name": "upperBoundColumn",
        "description": "Column containing histogram bin upper bounds.\nDefault is le.",
        "required": false
      },
      {
        "name": "valueColumn",
        "description": "Column to store the computed quantile in. Default is `_value.",
        "required": false
      },
      {
        "name": "minValue",
        "description": "Assumed minimum value of the dataset. Default is 0.0.If the quantile falls below the lowest upper bound, interpolation is\nperformed between minValue and the lowest upper bound.\nWhen minValue is equal to negative infinity, the lowest upper bound is used.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "holtWinters",
    "description": "holtWinters() applies the Holt-Winters forecasting method to input tables.The Holt-Winters method predicts n seasonally-adjusted values for the\nspecified column at the specified interval. For example, if interval is six\nminutes (6m) and n is 3, results include three predicted values six\nminutes apart.seasonality delimits the length of a seasonal pattern according to interval.\nIf the interval is two minutes (2m) and seasonality is 4, then the\nseasonal pattern occurs every eight minutes or every four data points.\nIf your interval is two months (2mo) and seasonality is 4, then the\nseasonal pattern occurs every eight months or every four data points.\nIf data doesn\u2019t have a seasonal pattern, set seasonality to 0.holtWinters() expects values to be spaced at even time intervales.\nTo ensure values are spaced evenly in time, holtWinters() applies the\nfollowing rules:By default, holtWinters() uses the first value in each time bucket to run\nthe Holt-Winters calculation. To specify other values to use in the\ncalculation, use aggregateWindow to normalize irregular times and apply\nan aggregate or selector transformation.holtWinters() applies the Nelder-Mead optimization\nto include \u201cfitted\u201d data points in results when withFit is set to true.holtWinters() discards rows with null timestamps before running the\nHolt-Winters calculation.holtWinters() treats null values as missing data points and includes them\nin the Holt-Winters calculation.(Required)\nNumber of values to predict.(Required)\nInterval between two data points.Return fitted data in results. Default is false.Column to operate on. Default is _value.Column containing time values to use in the calculating.\nDefault is _time.Number of points in a season. Default is 0.Return minSSE data in results. Default is false.minSSE is the minimum sum squared error found when optimizing the holt winters fit to the data.\nA smaller minSSE means a better fit.\nExamining the minSSE value can help understand when the algorithm is getting a good fit versus not.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of values to predict.",
        "required": true
      },
      {
        "name": "interval",
        "description": "(Required)\nInterval between two data points.",
        "required": true
      },
      {
        "name": "withFit",
        "description": "Return fitted data in results. Default is false.",
        "required": false
      },
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Column containing time values to use in the calculating.\nDefault is _time.",
        "required": false
      },
      {
        "name": "seasonality",
        "description": "Number of points in a season. Default is 0.",
        "required": false
      },
      {
        "name": "withMinSSE",
        "description": "Return minSSE data in results. Default is false.minSSE is the minimum sum squared error found when optimizing the holt winters fit to the data.\nA smaller minSSE means a better fit.\nExamining the minSSE value can help understand when the algorithm is getting a good fit versus not.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "hourSelection",
    "description": "hourSelection() filters rows by time values in a specified hour range.(Required)\nFirst hour of the hour range (inclusive). Hours range from [0-23].(Required)\nLast hour of the hour range (inclusive). Hours range from [0-23].Location used to determine timezone. Default is the location option.Column that contains the time value. Default is _time.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "start",
        "description": "(Required)\nFirst hour of the hour range (inclusive). Hours range from [0-23].",
        "required": true
      },
      {
        "name": "stop",
        "description": "(Required)\nLast hour of the hour range (inclusive). Hours range from [0-23].",
        "required": true
      },
      {
        "name": "location",
        "description": "Location used to determine timezone. Default is the location option.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Column that contains the time value. Default is _time.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "basicAuth",
    "description": "http.basicAuth() returns a Base64-encoded basic authentication header\nusing a specified username and password combination.(Required)\nUsername to use in the basic authentication header.(Required)\nPassword to use in the basic authentication header.",
    "params": [
      {
        "name": "u",
        "description": "(Required)\nUsername to use in the basic authentication header.",
        "required": true
      },
      {
        "name": "p",
        "description": "(Required)\nPassword to use in the basic authentication header.",
        "required": true
      }
    ],
    "examples": null,
    "package": "http"
  },
  {
    "name": "endpoint",
    "description": "http.endpoint() iterates over input data and sends a single POST request per input row to\na specficied URL.This function is designed to be used with monitor.notify().http.endpoint() outputs a function that requires a mapFn parameter.\nmapFn is the function that builds the record used to generate the POST request.\nIt accepts a table row (r) and returns a record that must include the\nfollowing properties:For information about properties, see http.post.(Required)\nURL to send the POST reqeust to.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nURL to send the POST reqeust to.",
        "required": true
      }
    ],
    "examples": null,
    "package": "http"
  },
  {
    "name": "get",
    "description": "http.get() submits an HTTP GET request to the specified URL and returns the HTTP\nstatus code, response body, and response headers.http.get() returns a record with the following properties:(Required)\nURL to send the GET request to.Headers to include with the GET request.Timeout for the GET request. Default is 30s.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nURL to send the GET request to.",
        "required": true
      },
      {
        "name": "headers",
        "description": "Headers to include with the GET request.",
        "required": false
      },
      {
        "name": "timeout",
        "description": "Timeout for the GET request. Default is 30s.",
        "required": false
      }
    ],
    "examples": null,
    "package": "http"
  },
  {
    "name": "pathEscape",
    "description": "http.pathEscape() escapes special characters in a string (including /)\nand replaces non-ASCII characters with hexadecimal representations (%XX).(Required)\nString to escape.",
    "params": [
      {
        "name": "inputString",
        "description": "(Required)\nString to escape.",
        "required": true
      }
    ],
    "examples": null,
    "package": "http"
  },
  {
    "name": "post",
    "description": "http.post() sends an HTTP POST request to the specified URL with headers and data\nand returns the HTTP status code.(Required)\nURL to send the POST request to.Headers to include with the POST request.Header keys with special characters:\nWrap header keys that contain special characters in double quotes (\"\").Data body to include with the POST request.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nURL to send the POST request to.",
        "required": true
      },
      {
        "name": "headers",
        "description": "Headers to include with the POST request.Header keys with special characters:\nWrap header keys that contain special characters in double quotes (\"\").",
        "required": false
      },
      {
        "name": "data",
        "description": "Data body to include with the POST request.",
        "required": false
      }
    ],
    "examples": null,
    "package": "http"
  },
  {
    "name": "increase",
    "description": "increase() returns the cumulative sum of non-negative differences between subsequent values.The primary use case for increase() is tracking changes in counter values\nwhich may wrap overtime when they hit a threshold or are reset. In the case\nof a wrap/reset, increase() assumes that the absolute delta between two\npoints is at least their non-negative difference.List of columns to operate on. Default is [\"_value\"].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "columns",
        "description": "List of columns to operate on. Default is [\"_value\"].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "api",
    "description": "influxdb.api() submits an HTTP request to the specified InfluxDB API path and returns a\nrecord containing the HTTP status code, response headers, and the response body.Note: influxdb.api() uses the authorization of the specified token or, if executed\nfrom the InfluxDB UI, the authorization of the InfluxDB user that invokes the script.\nAuthorization permissions and limits apply to each request.influxdb.api() returns a record with the following properties:(Required)\nHTTP request method.(Required)\nInfluxDB API path.InfluxDB host URL (Required when executed outside of InfluxDB).\nDefault is \"\".InfluxDB API token\n(Required when executed outside of InfluxDB).\nDefault is \"\".HTTP request headers.URL query parameters.HTTP request timeout. Default is 30s.HTTP request body as bytes.",
    "params": [
      {
        "name": "method",
        "description": "(Required)\nHTTP request method.",
        "required": true
      },
      {
        "name": "path",
        "description": "(Required)\nInfluxDB API path.",
        "required": true
      },
      {
        "name": "host",
        "description": "InfluxDB host URL (Required when executed outside of InfluxDB).\nDefault is \"\".",
        "required": false
      },
      {
        "name": "token",
        "description": "InfluxDB API token\n(Required when executed outside of InfluxDB).\nDefault is \"\".",
        "required": false
      },
      {
        "name": "headers",
        "description": "HTTP request headers.",
        "required": false
      },
      {
        "name": "query",
        "description": "URL query parameters.",
        "required": false
      },
      {
        "name": "timeout",
        "description": "HTTP request timeout. Default is 30s.",
        "required": false
      },
      {
        "name": "body",
        "description": "HTTP request body as bytes.",
        "required": false
      }
    ],
    "examples": null,
    "package": "influxdb"
  },
  {
    "name": "cardinality",
    "description": "influxdb.cardinality() returns the series cardinality of data stored in InfluxDB.Bucket to query cardinality from.String-encoded bucket ID to query cardinality from.Organization name.String-encoded organization ID.URL of the InfluxDB instance to query.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.InfluxDB API token.(Required)\nEarliest time to include when calculating cardinality.The cardinality calculation includes points that match the specified start time.\nUse a relative duration or absolute time. For example, -1h or 2019-08-28T22:00:00Z.\nDurations are relative to now().Latest time to include when calculating cardinality.The cardinality calculation excludes points that match the specified start time.\nUse a relative duration or absolute time. For example, -1h or 2019-08-28T22:00:00Z.\nDurations are relative to now(). Default is now().Predicate function that filters records.\nDefault is (r) => true.",
    "params": [
      {
        "name": "bucket",
        "description": "Bucket to query cardinality from.",
        "required": false
      },
      {
        "name": "bucketID",
        "description": "String-encoded bucket ID to query cardinality from.",
        "required": false
      },
      { "name": "org", "description": "Organization name.", "required": false },
      {
        "name": "orgID",
        "description": "String-encoded organization ID.",
        "required": false
      },
      {
        "name": "host",
        "description": "URL of the InfluxDB instance to query.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.",
        "required": false
      },
      {
        "name": "token",
        "description": "InfluxDB API token.",
        "required": false
      },
      {
        "name": "start",
        "description": "(Required)\nEarliest time to include when calculating cardinality.The cardinality calculation includes points that match the specified start time.\nUse a relative duration or absolute time. For example, -1h or 2019-08-28T22:00:00Z.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "stop",
        "description": "Latest time to include when calculating cardinality.The cardinality calculation excludes points that match the specified start time.\nUse a relative duration or absolute time. For example, -1h or 2019-08-28T22:00:00Z.\nDurations are relative to now(). Default is now().",
        "required": false
      },
      {
        "name": "predicate",
        "description": "Predicate function that filters records.\nDefault is (r) => true.",
        "required": false
      }
    ],
    "examples": null,
    "package": "influxdb"
  },
  {
    "name": "select",
    "description": "influxdb.select() is an alternate implementation of from(),\nrange(), filter() and pivot() that returns pivoted query results and masks\nthe _measurement, _start, and _stop columns. Results are similar to those\nreturned by InfluxQL SELECT statements.(Required)\nName of the bucket to query.(Required)\nEarliest time to include in results.Results include points that match the specified start time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().Latest time to include in results. Default is now().Results exclude points that match the specified stop time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().(Required)\nName of the measurement to query.List of fields to query. Default is[].Returns all fields when list is empty or unspecified.Single argument predicate function that evaluates true or false\nand filters results based on tag values.\nDefault is (r) => true.Records are passed to the function before fields are pivoted into columns.\nRecords that evaluate to true are included in the output tables.\nRecords that evaluate to null or false are not included in the output tables.URL of the InfluxDB instance to query.See InfluxDB OSS URLs\nor InfluxDB Cloud regions.Organization name.InfluxDB API token.",
    "params": [
      {
        "name": "from",
        "description": "(Required)\nName of the bucket to query.",
        "required": true
      },
      {
        "name": "start",
        "description": "(Required)\nEarliest time to include in results.Results include points that match the specified start time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "stop",
        "description": "Latest time to include in results. Default is now().Results exclude points that match the specified stop time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": false
      },
      {
        "name": "m",
        "description": "(Required)\nName of the measurement to query.",
        "required": true
      },
      {
        "name": "fields",
        "description": "List of fields to query. Default is[].Returns all fields when list is empty or unspecified.",
        "required": false
      },
      {
        "name": "where",
        "description": "Single argument predicate function that evaluates true or false\nand filters results based on tag values.\nDefault is (r) => true.Records are passed to the function before fields are pivoted into columns.\nRecords that evaluate to true are included in the output tables.\nRecords that evaluate to null or false are not included in the output tables.",
        "required": false
      },
      {
        "name": "host",
        "description": "URL of the InfluxDB instance to query.See InfluxDB OSS URLs\nor InfluxDB Cloud regions.",
        "required": false
      },
      { "name": "org", "description": "Organization name.", "required": false },
      {
        "name": "token",
        "description": "InfluxDB API token.",
        "required": false
      }
    ],
    "examples": null,
    "package": "influxdb"
  },
  {
    "name": "wideTo",
    "description": "influxdb.wideTo() writes wide data to an InfluxDB 2.x or InfluxDB Cloud bucket.\nWide data is pivoted in that its fields are represented as columns making the table wider.If using the from() to query data from InfluxDB, use pivot() to transform\ndata into the structure experimental.to() expects.Name of the bucket to write to.\nbucket and bucketID are mutually exclusive.String-encoded bucket ID to to write to.\nbucket and bucketID are mutually exclusive.URL of the InfluxDB instance to write to.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.\nhost is required when writing to a remote InfluxDB instance.\nIf specified, token is also required.Organization name.\norg and orgID are mutually exclusive.String-encoded organization ID to query.\norg and orgID are mutually exclusive.InfluxDB API token.InfluxDB 1.x or Enterprise: If authentication is disabled, provide an\nempty string (\"\"). If authentication is enabled, provide your InfluxDB\nusername and password using the <username>:<password> syntax.\ntoken is required when writing to another organization or when host\nis specified.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "bucket",
        "description": "Name of the bucket to write to.\nbucket and bucketID are mutually exclusive.",
        "required": false
      },
      {
        "name": "bucketID",
        "description": "String-encoded bucket ID to to write to.\nbucket and bucketID are mutually exclusive.",
        "required": false
      },
      {
        "name": "host",
        "description": "URL of the InfluxDB instance to write to.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.\nhost is required when writing to a remote InfluxDB instance.\nIf specified, token is also required.",
        "required": false
      },
      {
        "name": "org",
        "description": "Organization name.\norg and orgID are mutually exclusive.",
        "required": false
      },
      {
        "name": "orgID",
        "description": "String-encoded organization ID to query.\norg and orgID are mutually exclusive.",
        "required": false
      },
      {
        "name": "token",
        "description": "InfluxDB API token.InfluxDB 1.x or Enterprise: If authentication is disabled, provide an\nempty string (\"\"). If authentication is enabled, provide your InfluxDB\nusername and password using the <username>:<password> syntax.\ntoken is required when writing to another organization or when host\nis specified.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "influxdb"
  },
  {
    "name": "int",
    "description": "int() converts a value to an integer type.int() behavior depends on the input data type:(Required)\nValue to convert.If converting the _value column to integer types, use toInt().\nIf converting columns other than _value, use map() to iterate over each\nrow and int() to covert a column value to a integer type.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "integral",
    "description": "integral() computes the area under the curve per unit of time of subsequent non-null records.integral() requires _start and _stop columns that are part of the group key.\nThe curve is defined using _time as the domain and record values as the range.Unit of time to use to compute the integral.Column to operate on. Default is _value.Column that contains time values to use in the operation.\nDefault is _time.Type of interpolation to use. Default is \"\".Available interplation types:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "unit",
        "description": "Unit of time to use to compute the integral.",
        "required": false
      },
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Column that contains time values to use in the operation.\nDefault is _time.",
        "required": false
      },
      {
        "name": "interpolate",
        "description": "Type of interpolation to use. Default is \"\".Available interplation types:",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "linear",
    "description": "interpolate.linear() inserts rows at regular intervals using linear interpolation to\ndetermine values for inserted rows.(Required)\nDuration of time between interpolated points.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "every",
        "description": "(Required)\nDuration of time between interpolated points.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "interpolate"
  },
  {
    "name": "from",
    "description": "iox.from() reads from the selected bucket and measurement in an IOx storage node.This function creates a source that reads data from IOx. Output data is\n\u201cpivoted\u201d on the time column and includes columns for each returned\ntag and field per time value.(Required)\nIOx bucket to read data from.(Required)\nMeasurement to read data from.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nIOx bucket to read data from.",
        "required": true
      },
      {
        "name": "measurement",
        "description": "(Required)\nMeasurement to read data from.",
        "required": true
      }
    ],
    "examples": null,
    "package": "iox"
  },
  {
    "name": "sql",
    "description": "iox.sql() executes an SQL query against a bucket in an IOx storage node.This function creates a source that reads data from IOx.(Required)\nIOx bucket to read data from.(Required)\nSQL query to execute.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nIOx bucket to read data from.",
        "required": true
      },
      {
        "name": "query",
        "description": "(Required)\nSQL query to execute.",
        "required": true
      }
    ],
    "examples": null,
    "package": "iox"
  },
  {
    "name": "sqlInterval",
    "description": "iox.sqlInterval() converts a duration value to a SQL interval string.SQL interval strings support down to millisecond precision.\nAny microsecond or nanosecond duration units are dropped from the duration value.\nIf the duration only consists of microseconds or nanosecond units,\niox.sqlInterval() returns 1 millisecond.\nDuration values must be positive to work as a SQL interval string.(Required)\nDuration value to convert to SQL interval string.",
    "params": [
      {
        "name": "d",
        "description": "(Required)\nDuration value to convert to SQL interval string.",
        "required": true
      }
    ],
    "examples": null,
    "package": "iox"
  },
  {
    "name": "full",
    "description": "join.full() performs a full outer join on two table streams.The function calls join.tables() with the method parameter set to \"full\".Left input stream. Default is piped-forward data (<-).(Required)\nRight input stream.(Required)\nFunction that takes a left and right record (l, and r respectively), and returns a boolean.The body of the function must be a single boolean expression, consisting of one\nor more equality comparisons between a property of l and a property of r,\neach chained together by the and operator.(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.In a full outer join, either l or r could be a default record, but they will\nnever both be a default record at the same time.To get non-null values for the output record, check both l and r to see which contains\nthe desired values.The example below defines a function for the as parameter that appropriately handles\nthe uncertainty of a full outer join.v_left and v_right still use values from l and r directly, because we expect\nthem to sometimes be null in the output table.For more information about the behavior of outer joins, see the Outer joins\nsection in the join package documentation.",
    "params": [
      {
        "name": "left",
        "description": "Left input stream. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "right",
        "description": "(Required)\nRight input stream.",
        "required": true
      },
      {
        "name": "on",
        "description": "(Required)\nFunction that takes a left and right record (l, and r respectively), and returns a boolean.The body of the function must be a single boolean expression, consisting of one\nor more equality comparisons between a property of l and a property of r,\neach chained together by the and operator.",
        "required": true
      },
      {
        "name": "as",
        "description": "(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.",
        "required": true
      }
    ],
    "examples": null,
    "package": "join"
  },
  {
    "name": "inner",
    "description": "join.inner() performs an inner join on two table streams.The function calls join.tables() with the method parameter set to \"inner\".Left input stream. Default is piped-forward data (<-).(Required)\nRight input stream.(Required)\nFunction that takes a left and right record (l, and r respectively), and returns a boolean.The body of the function must be a single boolean expression, consisting of one\nor more equality comparisons between a property of l and a property of r,\neach chained together by the and operator.(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.",
    "params": [
      {
        "name": "left",
        "description": "Left input stream. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "right",
        "description": "(Required)\nRight input stream.",
        "required": true
      },
      {
        "name": "on",
        "description": "(Required)\nFunction that takes a left and right record (l, and r respectively), and returns a boolean.The body of the function must be a single boolean expression, consisting of one\nor more equality comparisons between a property of l and a property of r,\neach chained together by the and operator.",
        "required": true
      },
      {
        "name": "as",
        "description": "(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.",
        "required": true
      }
    ],
    "examples": null,
    "package": "join"
  },
  {
    "name": "left",
    "description": "join.left() performs a left outer join on two table streams.The function calls join.tables() with the method parameter set to \"left\".Left input stream. Default is piped-forward data (<-).(Required)\nRight input stream.(Required)\nFunction that takes a left and right record (l, and r respectively), and returns a boolean.The body of the function must be a single boolean expression, consisting of one\nor more equality comparisons between a property of l and a property of r,\neach chained together by the and operator.(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.In a left outer join, l is guaranteed to not be a default record, but r may be a\ndefault record. Because r is more likely to contain null values, the output record\nis built almost entirely from proprties of l, with the exception of v_right, which\nwe expect to sometimes be null.For more information about the behavior of outer joins, see the Outer joins\nsection in the join package documentation.",
    "params": [
      {
        "name": "left",
        "description": "Left input stream. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "right",
        "description": "(Required)\nRight input stream.",
        "required": true
      },
      {
        "name": "on",
        "description": "(Required)\nFunction that takes a left and right record (l, and r respectively), and returns a boolean.The body of the function must be a single boolean expression, consisting of one\nor more equality comparisons between a property of l and a property of r,\neach chained together by the and operator.",
        "required": true
      },
      {
        "name": "as",
        "description": "(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.",
        "required": true
      }
    ],
    "examples": null,
    "package": "join"
  },
  {
    "name": "right",
    "description": "join.right() performs a right outer join on two table streams.The function calls join.tables() with the method parameter set to \"right\".Left input stream. Default is piped-forward data (<-).(Required)\nRight input stream.(Required)\nFunction that takes a left and right record (l, and r respectively), and returns a boolean.The body of the function must be a single boolean expression, consisting of one\nor more equality comparisons between a property of l and a property of r,\neach chained together by the and operator.(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.In a right outer join, r is guaranteed to not be a default record, but l may be a\ndefault record. Because l is more likely to contain null values, the output record\nis built almost entirely from proprties of r, with the exception of v_left, which\nwe expect to sometimes be null.For more information about the behavior of outer joins, see the Outer joins\nsection in the join package documentation.",
    "params": [
      {
        "name": "left",
        "description": "Left input stream. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "right",
        "description": "(Required)\nRight input stream.",
        "required": true
      },
      {
        "name": "on",
        "description": "(Required)\nFunction that takes a left and right record (l, and r respectively), and returns a boolean.The body of the function must be a single boolean expression, consisting of one\nor more equality comparisons between a property of l and a property of r,\neach chained together by the and operator.",
        "required": true
      },
      {
        "name": "as",
        "description": "(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.",
        "required": true
      }
    ],
    "examples": null,
    "package": "join"
  },
  {
    "name": "tables",
    "description": "join.tables() joins two input streams together using a specified method, predicate, and a function to join two corresponding records, one from each input stream.join.tables() only compares records with the same group key. Output tables have the same grouping as the input tables.Left input stream. Default is piped-forward data (<-).(Required)\nRight input stream.(Required)\nFunction that takes a left and right record (l, and r respectively), and returns a boolean.The body of the function must be a single boolean expression, consisting of one\nor more equality comparisons between a property of l and a property of r,\neach chained together by the and operator.(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.(Required)\nString that specifies the join method.Supported methods:If the join method is anything other than inner, pay special attention to how\nthe output record is constructed in the as function.Because of how flux handles outer joins, it\u2019s possible for either l or r to be a\ndefault record. This means any value in a non-group-key column could be null.For more information about the behavior of outer joins, see the Outer joins\nsection in the join package documentation.In the case of a left outer join, l is guaranteed to not be a default record. To\nensure that the output record has non-null values for any columns that aren\u2019t part\nof the group key, use values from l. Using a non-group-key value from r risks\nthat value being null.The example below constructs the output record almost entirely from properties of l.\nThe only exception is the v_right column which gets its value from r._value.\nIn this case, understand and expect that v_right will sometimes be null.The next example is nearly identical to the previous example,\nbut uses the right join method. With this method, r is guaranteed to not be a default\nrecord, but l may be a default record. Because l is more likely to contain null values,\nthe output record is built almost entirely from proprties of r, with the exception of\nv_left, which we expect to sometimes be null.In a full outer join, there are no guarantees about l or r. Either one of them could\nbe a default record, but they will never both be a default record at the same time.To get non-null values for the output record, check both l and r to see which contains\nthe desired values.The example below defines a function for the as parameter that appropriately handles\nthe uncertainty of a full outer join.v_left and v_right still use values from l and r directly, because we expect\nthem to sometimes be null in the output table.",
    "params": [
      {
        "name": "left",
        "description": "Left input stream. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "right",
        "description": "(Required)\nRight input stream.",
        "required": true
      },
      {
        "name": "on",
        "description": "(Required)\nFunction that takes a left and right record (l, and r respectively), and returns a boolean.The body of the function must be a single boolean expression, consisting of one\nor more equality comparisons between a property of l and a property of r,\neach chained together by the and operator.",
        "required": true
      },
      {
        "name": "as",
        "description": "(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.",
        "required": true
      },
      {
        "name": "method",
        "description": "(Required)\nString that specifies the join method.Supported methods:",
        "required": true
      }
    ],
    "examples": null,
    "package": "join"
  },
  {
    "name": "time",
    "description": "join.time() joins two table streams together exclusively on the _time column.This function calls join.tables() with the on parameter set to (l, r) => l._time == r._time.Left input stream. Default is piped-forward data (<-).(Required)\nRight input stream.(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.String that specifies the join method. Default is inner.Supported methods:",
    "params": [
      {
        "name": "left",
        "description": "Left input stream. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "right",
        "description": "(Required)\nRight input stream.",
        "required": true
      },
      {
        "name": "as",
        "description": "(Required)\nFunction that takes a left and a right record (l and r respectively), and returns a record.\nThe returned record is included in the final output.",
        "required": true
      },
      {
        "name": "method",
        "description": "String that specifies the join method. Default is inner.Supported methods:",
        "required": false
      }
    ],
    "examples": null,
    "package": "join"
  },
  {
    "name": "join",
    "description": "join() merges two streams of tables into a single output stream based on columns with equal values.\nNull values are not considered equal when comparing column values.\nThe resulting schema is the union of the input schemas.\nThe resulting group key is the union of the input group keys.The schema and group keys of the joined output output data is the union of\nthe input schemas and group keys.\nColumns that exist in both input streams that are not part specified as\ncolumns to join on are renamed using the pattern <column>_<table> to\nprevent ambiguity in joined tables.join() creates new rows based on common values in one or more specified columns.\nOutput rows also contain the differing values from each of the joined streams.\nunion() does not modify data in rows, but unions separate streams of tables\ninto a single stream of tables and groups rows of data based on existing group keys.Record containing two input streams to join.List of columns to join on.Join method. Default is inner.Supported methods:",
    "params": [
      {
        "name": "tables",
        "description": "Record containing two input streams to join.",
        "required": false
      },
      {
        "name": "on",
        "description": "List of columns to join on.",
        "required": false
      },
      {
        "name": "method",
        "description": "Join method. Default is inner.Supported methods:",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "encode",
    "description": "json.encode() converts a value into JSON bytes.This function encodes Flux types as follows:(Required)\nValue to convert.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "json"
  },
  {
    "name": "parse",
    "description": "json.parse() takes JSON data as bytes and returns a value.JSON types are converted to Flux types as follows:(Required)\nJSON data (as bytes) to parse.",
    "params": [
      {
        "name": "data",
        "description": "(Required)\nJSON data (as bytes) to parse.",
        "required": true
      }
    ],
    "examples": null,
    "package": "json"
  },
  {
    "name": "to",
    "description": "kafka.to() sends data to Apache Kafka brokers.(Required)\nList of Kafka brokers to send data to.(Required)\nKafka topic to send data to.Kafka load balancing strategy. Default is hash.The load balancing strategy determines how messages are routed to partitions\navailable on a Kafka cluster. The following strategies are available:Kafka metric name. Default is the value of the nameColumn.Column to use as the Kafka metric name.\nDefault is _measurement.Time column. Default is _time.List of tag columns in input data.List of value columns in input data. Default is [\"_value\"].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "brokers",
        "description": "(Required)\nList of Kafka brokers to send data to.",
        "required": true
      },
      {
        "name": "topic",
        "description": "(Required)\nKafka topic to send data to.",
        "required": true
      },
      {
        "name": "balancer",
        "description": "Kafka load balancing strategy. Default is hash.The load balancing strategy determines how messages are routed to partitions\navailable on a Kafka cluster. The following strategies are available:",
        "required": false
      },
      {
        "name": "name",
        "description": "Kafka metric name. Default is the value of the nameColumn.",
        "required": false
      },
      {
        "name": "nameColumn",
        "description": "Column to use as the Kafka metric name.\nDefault is _measurement.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Time column. Default is _time.",
        "required": false
      },
      {
        "name": "tagColumns",
        "description": "List of tag columns in input data.",
        "required": false
      },
      {
        "name": "valueColumns",
        "description": "List of value columns in input data. Default is [\"_value\"].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "kafka"
  },
  {
    "name": "kaufmansAMA",
    "description": "kaufmansAMA() calculates the Kaufman\u2019s Adaptive Moving Average (KAMA) using\nvalues in input tables.Kaufman\u2019s Adaptive Moving Average is a trend-following indicator designed to\naccount for market noise or volatility.(Required)\nPeriod or number of points to use in the calculation.Column to operate on. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nPeriod or number of points to use in the calculation.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "kaufmansER",
    "description": "kaufmansER() computes the Kaufman\u2019s Efficiency Ratio (KER) of values in the\n_value column for each input table.Kaufman\u2019s Efficiency Ratio indicator divides the absolute value of the Chande\nMomentum Oscillator by 100 to return a value between 0 and 1.\nHigher values represent a more efficient or trending market.(Required)\nPeriod or number of points to use in the calculation.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nPeriod or number of points to use in the calculation.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "keep",
    "description": "keep() returns a stream of tables containing only the specified columns.Columns in the group key that are not specifed in the columns parameter or\nidentified by the fn parameter are removed from the group key and dropped\nfrom output tables. keep() is the inverse of drop().Columns to keep in output tables. Cannot be used with fn.Predicate function that takes a column name as a parameter (column) and\nreturns a boolean indicating whether or not the column should be kept in\noutput tables. Cannot be used with columns.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "columns",
        "description": "Columns to keep in output tables. Cannot be used with fn.",
        "required": false
      },
      {
        "name": "fn",
        "description": "Predicate function that takes a column name as a parameter (column) and\nreturns a boolean indicating whether or not the column should be kept in\noutput tables. Cannot be used with columns.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "keys",
    "description": "keys() returns the columns that are in the group key of each input table.Each output table contains a row for each group key column label.\nA single group key column label is stored in the specified column for each row.\nAll columns not in the group key are dropped.Column to store group key labels in. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to store group key labels in. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "keyValues",
    "description": "keyValues() returns a stream of tables with each input tables\u2019 group key and\ntwo columns, _key and _value, that correspond to unique column label and value\npairs for each input table.List of columns from which values are extracted.All columns must be of the same type.\nEach input table must have all of the columns in the keyColumns parameter.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "keyColumns",
        "description": "List of columns from which values are extracted.All columns must be of the same type.\nEach input table must have all of the columns in the keyColumns parameter.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "last",
    "description": "last() returns the last row with a non-null value from each input table.Note: last() drops empty tables.Column to use to verify the existence of a value.\nDefault is _value.If this column is null in the last record, last() returns the previous\nrecord with a non-null value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to use to verify the existence of a value.\nDefault is _value.If this column is null in the last record, last() returns the previous\nrecord with a non-null value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "length",
    "description": "length() returns the number of elements in an array.Array to evaluate. Default is the piped-forward array (<-).",
    "params": [
      {
        "name": "arr",
        "description": "Array to evaluate. Default is the piped-forward array (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "limit",
    "description": "limit() returns the first n rows after the specified offset from each input table.If an input table has less than offset + n rows, limit() returns all rows\nafter the offset.(Required)\nMaximum number of rows to return.Number of rows to skip per table before limiting to n.\nDefault is 0.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nMaximum number of rows to return.",
        "required": true
      },
      {
        "name": "offset",
        "description": "Number of rows to skip per table before limiting to n.\nDefault is 0.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "linearBins",
    "description": "linearBins() generates a list of linearly separated float values.Use linearBins() to generate bin bounds for histogram().(Required)\nFirst value to return in the list.(Required)\nDistance between subsequent values.(Required)\nNumber of values to return.Include an infinite value at the end of the list. Default is true.",
    "params": [
      {
        "name": "start",
        "description": "(Required)\nFirst value to return in the list.",
        "required": true
      },
      {
        "name": "width",
        "description": "(Required)\nDistance between subsequent values.",
        "required": true
      },
      {
        "name": "count",
        "description": "(Required)\nNumber of values to return.",
        "required": true
      },
      {
        "name": "infinity",
        "description": "Include an infinite value at the end of the list. Default is true.",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "logarithmicBins",
    "description": "logarithmicBins() generates a list of exponentially separated float values.Use linearBins() to generate bin bounds for histogram().(Required)\nFirst value to return in the list.(Required)\nMultiplier to apply to subsequent values.(Required)\nNumber of values to return.Include an infinite value at the end of the list. Default is true.",
    "params": [
      {
        "name": "start",
        "description": "(Required)\nFirst value to return in the list.",
        "required": true
      },
      {
        "name": "factor",
        "description": "(Required)\nMultiplier to apply to subsequent values.",
        "required": true
      },
      {
        "name": "count",
        "description": "(Required)\nNumber of values to return.",
        "required": true
      },
      {
        "name": "infinity",
        "description": "Include an infinite value at the end of the list. Default is true.",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "query_range",
    "description": "logql.query_range() queries data from a specified LogQL query within given time bounds,\nfilters data by query, timerange, and optional limit expressions.\nAll values are returned as string values (using raw mode in csv.from)LogQL/qryn URL and port. Default is http://qryn:3100.LogQL query_range API path.Query limit. Default is 100.(Required)\nLogQL query to execute.Earliest time to include in results. Default is -1h.Results include points that match the specified start time.\nUse a relative duration or absolute time.\nFor example, -1h or 2022-01-01T22:00:00.801064Z.Latest time to include in results. Default is now().Results exclude points that match the specified stop time.\nUse a relative duration or absolute time.\nFor example, -1h or 2022-01-01T22:00:00.801064Z.Query resolution step width in seconds. Default is 10.Only applies to query types which produce a matrix response.Optional Loki organization ID for partitioning. Default is \"\".",
    "params": [
      {
        "name": "url",
        "description": "LogQL/qryn URL and port. Default is http://qryn:3100.",
        "required": false
      },
      {
        "name": "path",
        "description": "LogQL query_range API path.",
        "required": false
      },
      {
        "name": "limit",
        "description": "Query limit. Default is 100.",
        "required": false
      },
      {
        "name": "query",
        "description": "(Required)\nLogQL query to execute.",
        "required": true
      },
      {
        "name": "start",
        "description": "Earliest time to include in results. Default is -1h.Results include points that match the specified start time.\nUse a relative duration or absolute time.\nFor example, -1h or 2022-01-01T22:00:00.801064Z.",
        "required": false
      },
      {
        "name": "end",
        "description": "Latest time to include in results. Default is now().Results exclude points that match the specified stop time.\nUse a relative duration or absolute time.\nFor example, -1h or 2022-01-01T22:00:00.801064Z.",
        "required": false
      },
      {
        "name": "step",
        "description": "Query resolution step width in seconds. Default is 10.Only applies to query types which produce a matrix response.",
        "required": false
      },
      {
        "name": "orgid",
        "description": "Optional Loki organization ID for partitioning. Default is \"\".",
        "required": false
      }
    ],
    "examples": null,
    "package": "logql"
  },
  {
    "name": "lowestAverage",
    "description": "lowestAverage() calculates the average of each input table and returns the lowest\nn averages.Note: lowestAverage() drops empty tables.(Required)\nNumber of records to return.Column to evaluate. Default is _value.List of columns to group by. Default is [].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of records to return.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to evaluate. Default is _value.",
        "required": false
      },
      {
        "name": "groupColumns",
        "description": "List of columns to group by. Default is [].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "lowestCurrent",
    "description": "lowestCurrent() selects the last record from each input table and returns the\nlowest n records.Note: lowestCurrent() drops empty tables.(Required)\nNumber of records to return.Column to evaluate. Default is _value.List of columns to group by. Default is [].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of records to return.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to evaluate. Default is _value.",
        "required": false
      },
      {
        "name": "groupColumns",
        "description": "List of columns to group by. Default is [].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "lowestMin",
    "description": "lowestMin() selects the record with the lowest value in the specified column\nfrom each input table and returns the bottom n records.Note: lowestMin() drops empty tables.(Required)\nNumber of records to return.Column to evaluate. Default is _value.List of columns to group by. Default is [].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of records to return.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to evaluate. Default is _value.",
        "required": false
      },
      {
        "name": "groupColumns",
        "description": "List of columns to group by. Default is [].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "map",
    "description": "map() iterates over and applies a function to input rows.Each input row is passed to the fn as a record, r.\nEach r property represents a column key-value pair.\nOutput values must be of the following supported column types:Output tables are the result of applying the map function (fn) to each\nrecord of the input tables. Output records are assigned to new tables based\non the group key of the input stream.\nIf the output record contains a different value for a group key column, the\nrecord is regrouped into the appropriate table.\nIf the output record drops a group key column, that column is removed from\nthe group key.map() drops any columns that are not mapped explictly by column label or\nimplicitly using the with operator in the fn function.\nThe with operator updates a record property if it already exists, creates\na new record property if it doesn\u2019t exist, and includes all existing\nproperties in the output record.(Required)\nSingle argument function to apply to each record.\nThe return value must be a record.(Deprecated) Merge group keys of mapped records. Default is false.Input data. Default is piped-forward data (<-).Use the with operator on the r record to preserve columns not directly\noperated on by the map operation.",
    "params": [
      {
        "name": "fn",
        "description": "(Required)\nSingle argument function to apply to each record.\nThe return value must be a record.",
        "required": true
      },
      {
        "name": "mergeKey",
        "description": "(Deprecated) Merge group keys of mapped records. Default is false.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "abs",
    "description": "math.abs() returns the absolute value of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "acos",
    "description": "math.acos() returns the acosine of x in radians.(Required)\nValue to operate on.x should be greater than -1 and less than 1. Otherwise, the operation\nwill return NaN.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.x should be greater than -1 and less than 1. Otherwise, the operation\nwill return NaN.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "acosh",
    "description": "math.acosh() returns the inverse hyperbolic cosine of x.(Required)\nValue to operate on.x should be greater than 1. If less than 1 the operation will return NaN.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.x should be greater than 1. If less than 1 the operation will return NaN.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "asin",
    "description": "math.asin() returns the arcsine of x in radians.(Required)\nValue to operate on.x should be greater than -1 and less than 1. Otherwise the function will\nreturn NaN.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.x should be greater than -1 and less than 1. Otherwise the function will\nreturn NaN.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "asinh",
    "description": "math.asinh() returns the inverse hyperbolic sine of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "atan",
    "description": "math.atan() returns the arctangent of x in radians.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "atan2",
    "description": "math.atan2() returns the artangent of x/y, using the signs\nof the two to determine the quadrant of the return value.(Required)\ny-coordinate to use in the operation.(Required)\nx-corrdinate to use in the operation.",
    "params": [
      {
        "name": "y",
        "description": "(Required)\ny-coordinate to use in the operation.",
        "required": true
      },
      {
        "name": "x",
        "description": "(Required)\nx-corrdinate to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "atanh",
    "description": "math.atanh() returns the inverse hyperbolic tangent of x.(Required)\nValue to operate on.x should be greater than -1 and less than 1. Otherwise the operation\nwill return NaN.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.x should be greater than -1 and less than 1. Otherwise the operation\nwill return NaN.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "cbrt",
    "description": "math.cbrt() returns the cube root of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "ceil",
    "description": "math.ceil() returns the least integer value greater than or equal to x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "copysign",
    "description": "math.copysign() returns a value with the magnitude x and the sign of y.(Required)\nMagnitude to use in the operation.(Required)\nSign to use in the operation.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nMagnitude to use in the operation.",
        "required": true
      },
      {
        "name": "y",
        "description": "(Required)\nSign to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "cos",
    "description": "math.cos() returns the cosine of the radian argument x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "cosh",
    "description": "math.cosh() returns the hyperbolic cosine of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "dim",
    "description": "math.dim() returns the maximum of x - y or 0.(Required)\nx-value to use in the operation.(Required)\ny-value to use in the operation.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nx-value to use in the operation.",
        "required": true
      },
      {
        "name": "y",
        "description": "(Required)\ny-value to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "erf",
    "description": "math.erf() returns the error function of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "erfc",
    "description": "math.erfc() returns the complementary error function of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "erfcinv",
    "description": "math.erfcinv() returns the inverse of math.erfc().(Required)\nValue to operate on.x should be greater than 0 and less than 2. Otherwise the operation\nwill return NaN.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.x should be greater than 0 and less than 2. Otherwise the operation\nwill return NaN.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "erfinv",
    "description": "math.erfinv() returns the inverse error function of x.(Required)\nValue to operate on.x should be greater than -1 and less than 1. Otherwise, the operation will\nreturn NaN.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.x should be greater than -1 and less than 1. Otherwise, the operation will\nreturn NaN.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "exp",
    "description": "math.exp() returns e**x, the base-e exponential of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "exp2",
    "description": "math.exp2() returns 2**x, the base-2 exponential of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "expm1",
    "description": "math.expm1() returns e**x - 1, the base-e exponential of x minus 1.\nIt is more accurate than math.exp(x:x) - 1 when x is near zero.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "float64bits",
    "description": "math.float64bits() returns the IEEE 754 binary representation of f,\nwith the sign bit of f and the result in the same bit position.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "f",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "float64frombits",
    "description": "math.float64frombits() returns the floating-point number corresponding to the IEE\n754 binary representation b, with the sign bit of b and the result in the\nsame bit position.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "b",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "floor",
    "description": "math.floor() returns the greatest integer value less than or equal to x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "frexp",
    "description": "math.frexp() breaks f into a normalized fraction and an integral part of two.It returns frac and exp satisfying f == frac x 2**exp,\nwith the absolute value of frac in the interval [1/2, 1).(Required)\nValue to operate on.",
    "params": [
      {
        "name": "f",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "gamma",
    "description": "math.gamma() returns the gamma function of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "hypot",
    "description": "math.hypot() returns the square root of p*p + q*q, taking care to avoid overflow\nand underflow.(Required)\np-value to use in the operation.(Required)\nq-value to use in the operation.",
    "params": [
      {
        "name": "p",
        "description": "(Required)\np-value to use in the operation.",
        "required": true
      },
      {
        "name": "q",
        "description": "(Required)\nq-value to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "ilogb",
    "description": "math.ilogb() returns the binary exponent of x as an integer.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "isInf",
    "description": "math.isInf() reports whether f is an infinity, according to sign.If sign > 0, math.isInf reports whether f is positive infinity.\nIf sign < 0, math.isInf reports whether f is negative infinity.\nIf sign == 0, math.isInf reports whether f is either infinity.(Required)\nis the value used in the evaluation.(Required)\nis the sign used in the eveluation.",
    "params": [
      {
        "name": "f",
        "description": "(Required)\nis the value used in the evaluation.",
        "required": true
      },
      {
        "name": "sign",
        "description": "(Required)\nis the sign used in the eveluation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "isNaN",
    "description": "math.isNaN() reports whether f is an IEEE 754 \u201cnot-a-number\u201d value.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "f",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "j0",
    "description": "math.j0() returns the order-zero Bessel function of the first kind.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "j1",
    "description": "math.j1() is a funciton that returns the order-one Bessel function for the first kind.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "jn",
    "description": "math.jn() returns the order-n Bessel funciton of the first kind.(Required)\nOrder number.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nOrder number.",
        "required": true
      },
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "ldexp",
    "description": "math.ldexp() is the inverse of math.frexp(). It returns frac x 2**exp.(Required)\nFraction to use in the operation.(Required)\nExponent to use in the operation.",
    "params": [
      {
        "name": "frac",
        "description": "(Required)\nFraction to use in the operation.",
        "required": true
      },
      {
        "name": "exp",
        "description": "(Required)\nExponent to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "lgamma",
    "description": "math.lgamma() returns the natural logarithm and sign (-1 or +1) of math.gamma(x:x).(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "log",
    "description": "math.log() returns the natural logarithm of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "log10",
    "description": "math.log10() returns the decimal logarithm of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "log1p",
    "description": "math.log1p() returns the natural logarithm of 1 plus x.\nThis operation is more accurate than math.log(x: 1 + x) when x is\nnear zero.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "log2",
    "description": "math.log2() is a function returns the binary logarithm of x.(Required)\nthe value used in the operation.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nthe value used in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "logb",
    "description": "math.logb() returns the binary exponent of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "mInf",
    "description": "math.mInf() returns positive infinity if sign >= 0, negative infinity\nif sign < 0.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "sign",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "mMax",
    "description": "math.mMax() returns the larger of x or y.(Required)\nx-value to use in the operation.(Required)\ny-value to use in the operation.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nx-value to use in the operation.",
        "required": true
      },
      {
        "name": "y",
        "description": "(Required)\ny-value to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "mMin",
    "description": "math.mMin() is a function taht returns the lessser of x or y.(Required)\nx-value to use in the operation.(Required)\ny-value to use in the operation.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nx-value to use in the operation.",
        "required": true
      },
      {
        "name": "y",
        "description": "(Required)\ny-value to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "mod",
    "description": "math.mod() returns a floating-point remainder of x/y.The magnitude of the result is less than y and its sign agrees\nwith that of x.Note: math.mod() performs the same operation as the modulo operator (%).\nFor example: 4.56 % 1.23(Required)\nx-value to use in the operation.(Required)\ny-value to use in the operation.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nx-value to use in the operation.",
        "required": true
      },
      {
        "name": "y",
        "description": "(Required)\ny-value to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "modf",
    "description": "math.modf() returns integer and fractional floating-point numbers that sum to f.Both values have the same sign as f.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "f",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "NaN",
    "description": "math.NaN() returns a IEEE 754 \u201cnot-a-number\u201d value.",
    "params": [],
    "examples": null,
    "package": "math"
  },
  {
    "name": "nextafter",
    "description": "math.nextafter() returns the next representable float value after x towards y.(Required)\nx-value to use in the operation.(Required)\ny-value to use in the operation.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nx-value to use in the operation.",
        "required": true
      },
      {
        "name": "y",
        "description": "(Required)\ny-value to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "pow",
    "description": "math.pow() returns x**y, the base-x exponential of y.(Required)\nBase value to operate on.(Required)\nExponent value.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nBase value to operate on.",
        "required": true
      },
      {
        "name": "y",
        "description": "(Required)\nExponent value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "pow10",
    "description": "math.pow10() returns 10**n, the base-10 exponential of n.(Required)\nExponent value.",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nExponent value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "remainder",
    "description": "math.remainder() returns the IEEE 754 floating-point remainder of x/y.(Required)\nNumerator to use in the operation.(Required)\nDenominator to use in the operation.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nNumerator to use in the operation.",
        "required": true
      },
      {
        "name": "y",
        "description": "(Required)\nDenominator to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "round",
    "description": "math.round() returns the nearest integer, rounding half away from zero.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "roundtoeven",
    "description": "math.roundtoeven() returns the nearest integer, rounding ties to even.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "signbit",
    "description": "math.signbit() reports whether x is negative or negative zero.(Required)\nValue to evaluate.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to evaluate.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "sin",
    "description": "math.sin() returns the sine of the radian argument x.(Required)\nRadian value to use in the operation.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nRadian value to use in the operation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "sincos",
    "description": "math.sincos() returns the values of math.sin(x:x) and math.cos(x:x).(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "sinh",
    "description": "math.sinh() returns the hyperbolic sine of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "sqrt",
    "description": "math.sqrt() returns the square root of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "tan",
    "description": "math.tan() returns the tangent of the radian argument x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "tanh",
    "description": "math.tanh() returns the hyperbolic tangent of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "trunc",
    "description": "math.trunc() returns the integer value of x.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "y0",
    "description": "math.y0() returns the order-zero Bessel function of the second kind.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "y1",
    "description": "math.y1() returns the order-one Bessel function of the second kind.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "yn",
    "description": "math.yn() returns the order-n Bessel function of the second kind.(Required)\nOrder number to use in the operation.(Required)\nValue to operate on.",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nOrder number to use in the operation.",
        "required": true
      },
      {
        "name": "x",
        "description": "(Required)\nValue to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "math"
  },
  {
    "name": "max",
    "description": "max() returns the row with the maximum value in a specified column from each\ninput table.Note: max() drops empty tables.Column to return maximum values from. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to return maximum values from. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "mean",
    "description": "mean() returns the average of non-null values in a specified column from each\ninput table.Column to use to compute means. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to use to compute means. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "median",
    "description": "median() returns the median _value of an input table or all non-null records\nin the input table with values that fall within the 0.5 quantile (50th percentile).median() acts as an aggregate or selector transformation depending on the\nspecified method.Column to use to compute the median. Default is _value.Computation method. Default is estimate_tdigest.Avaialable methods:Number of centroids to use when compressing the dataset.\nDefault is 0.0.A larger number produces a more accurate result at the cost of increased\nmemory requirements.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to use to compute the median. Default is _value.",
        "required": false
      },
      {
        "name": "method",
        "description": "Computation method. Default is estimate_tdigest.Avaialable methods:",
        "required": false
      },
      {
        "name": "compression",
        "description": "Number of centroids to use when compressing the dataset.\nDefault is 0.0.A larger number produces a more accurate result at the cost of increased\nmemory requirements.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "min",
    "description": "min() returns the row with the minimum value in a specified column from each\ninput table.Note: min() drops empty tables.Column to return minimum values from. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to return minimum values from. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "mode",
    "description": "mode() returns the non-null value or values that occur most often in a\nspecified column in each input table.If there are multiple modes, mode() returns all mode values in a sorted table.\nIf there is no mode, mode() returns null.Note: mode() drops empty tables.Column to return the mode from. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to return the mode from. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "check",
    "description": "monitor.check() checks input data and assigns a level (ok, info, warn, or crit)\nto each row based on predicate functions.monitor.check() stores statuses in the _level column and writes results\nto the statuses measurement in the _monitoring bucket.Predicate function that determines crit status. Default is (r) => false.Predicate function that determines warn status. Default is (r) => false.Predicate function that determines info status. Default is (r) => false.Predicate function that determines ok status. Default is (r) => true.(Required)\nPredicate function that constructs a message to append to each row.The message is stored in the _message column.(Required)\nCheck data to append to output used to identify this check.This data specifies which notification rule and notification endpoint to\nassociate with the sent notification.\nThe data record must contain the following properties:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "crit",
        "description": "Predicate function that determines crit status. Default is (r) => false.",
        "required": false
      },
      {
        "name": "warn",
        "description": "Predicate function that determines warn status. Default is (r) => false.",
        "required": false
      },
      {
        "name": "info",
        "description": "Predicate function that determines info status. Default is (r) => false.",
        "required": false
      },
      {
        "name": "ok",
        "description": "Predicate function that determines ok status. Default is (r) => true.",
        "required": false
      },
      {
        "name": "messageFn",
        "description": "(Required)\nPredicate function that constructs a message to append to each row.The message is stored in the _message column.",
        "required": true
      },
      {
        "name": "data",
        "description": "(Required)\nCheck data to append to output used to identify this check.This data specifies which notification rule and notification endpoint to\nassociate with the sent notification.\nThe data record must contain the following properties:",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "monitor"
  },
  {
    "name": "deadman",
    "description": "monitor.deadman() detects when a group stops reporting data.\nIt takes a stream of tables and reports if groups have been observed since time t.monitor.deadman() retains the most recent row from each input table and adds a dead column.\nIf a record appears after time t, monitor.deadman() sets dead to false.\nOtherwise, dead is set to true.(Required)\nTime threshold for the deadman check.Input data. Default is piped-forward data (<-).Use date.add() to return a time value relative to a specified time.",
    "params": [
      {
        "name": "t",
        "description": "(Required)\nTime threshold for the deadman check.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "monitor"
  },
  {
    "name": "from",
    "description": "monitor.from() retrieves check statuses stored in the statuses measurement in the\n_monitoring bucket.(Required)\nEarliest time to include in results.Use a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().Latest time to include in results. Default is now().Use a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now()Predicate function that evaluates true or false.Records or rows (r) that evaluate to true are included in output tables.\nRecords that evaluate to null or false are not included in output tables.",
    "params": [
      {
        "name": "start",
        "description": "(Required)\nEarliest time to include in results.Use a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "stop",
        "description": "Latest time to include in results. Default is now().Use a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now()",
        "required": false
      },
      {
        "name": "fn",
        "description": "Predicate function that evaluates true or false.Records or rows (r) that evaluate to true are included in output tables.\nRecords that evaluate to null or false are not included in output tables.",
        "required": false
      }
    ],
    "examples": null,
    "package": "monitor"
  },
  {
    "name": "log",
    "description": "monitor.log() persists notification events to an InfluxDB bucket.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "monitor"
  },
  {
    "name": "logs",
    "description": "monitor.logs() retrieves notification events stored in the notifications measurement\nin the _monitoring bucket.(Required)\nEarliest time to include in results.Use a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().Latest time to include in results. Default is now().Use a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().(Required)\nPredicate function that evaluates true or false.Records or rows (r) that evaluate to true are included in output tables.\nRecords that evaluate to null or false are not included in output tables.",
    "params": [
      {
        "name": "start",
        "description": "(Required)\nEarliest time to include in results.Use a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "stop",
        "description": "Latest time to include in results. Default is now().Use a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": false
      },
      {
        "name": "fn",
        "description": "(Required)\nPredicate function that evaluates true or false.Records or rows (r) that evaluate to true are included in output tables.\nRecords that evaluate to null or false are not included in output tables.",
        "required": true
      }
    ],
    "examples": null,
    "package": "monitor"
  },
  {
    "name": "notify",
    "description": "monitor.notify() sends a notification to an endpoint and logs it in the notifications\nmeasurement in the _monitoring bucket.(Required)\nA function that constructs and sends the notification to an endpoint.(Required)\nNotification data to append to the output.This data specifies which notification rule and notification endpoint to\nassociate with the sent notification.\nThe data record must contain the following properties:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "endpoint",
        "description": "(Required)\nA function that constructs and sends the notification to an endpoint.",
        "required": true
      },
      {
        "name": "data",
        "description": "(Required)\nNotification data to append to the output.This data specifies which notification rule and notification endpoint to\nassociate with the sent notification.\nThe data record must contain the following properties:",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "monitor"
  },
  {
    "name": "stateChanges",
    "description": "monitor.stateChanges() detects state changes in a stream of data with a _level column\nand outputs records that change from fromLevel to toLevel.Level to detect a change from. Default is \"any\".Level to detect a change to. Default is \"any\".Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "fromLevel",
        "description": "Level to detect a change from. Default is \"any\".",
        "required": false
      },
      {
        "name": "toLevel",
        "description": "Level to detect a change to. Default is \"any\".",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "monitor"
  },
  {
    "name": "stateChangesOnly",
    "description": "monitor.stateChangesOnly() takes a stream of tables that contains a _level column\nand returns a stream of tables grouped by _level where each record\nrepresents a state change.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "monitor"
  },
  {
    "name": "write",
    "description": "monitor.write() persists check statuses to an InfluxDB bucket.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "monitor"
  },
  {
    "name": "movingAverage",
    "description": "movingAverage() calculates the mean of non-null values using the current value\nand n - 1 previous values in the _values column.(Required)\nNumber of values to average.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of values to average.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "publish",
    "description": "mqtt.publish() sends data to an MQTT broker using MQTT protocol.(Required)\nMQTT broker connection string.(Required)\nMQTT topic to send data to.(Required)\nMessage to send to the MQTT broker.MQTT Quality of Service (QoS) level. Values range from [0-2].\nDefault is 0.MQTT retain flag. Default is false.MQTT client ID.Username to send to the MQTT broker.Username is only required if the broker requires authentication.\nIf you provide a username, you must provide a password.Password to send to the MQTT broker.Password is only required if the broker requires authentication.\nIf you provide a password, you must provide a username.MQTT connection timeout. Default is 1s.",
    "params": [
      {
        "name": "broker",
        "description": "(Required)\nMQTT broker connection string.",
        "required": true
      },
      {
        "name": "topic",
        "description": "(Required)\nMQTT topic to send data to.",
        "required": true
      },
      {
        "name": "message",
        "description": "(Required)\nMessage to send to the MQTT broker.",
        "required": true
      },
      {
        "name": "qos",
        "description": "MQTT Quality of Service (QoS) level. Values range from [0-2].\nDefault is 0.",
        "required": false
      },
      {
        "name": "retain",
        "description": "MQTT retain flag. Default is false.",
        "required": false
      },
      {
        "name": "clientid",
        "description": "MQTT client ID.",
        "required": false
      },
      {
        "name": "username",
        "description": "Username to send to the MQTT broker.Username is only required if the broker requires authentication.\nIf you provide a username, you must provide a password.",
        "required": false
      },
      {
        "name": "password",
        "description": "Password to send to the MQTT broker.Password is only required if the broker requires authentication.\nIf you provide a password, you must provide a username.",
        "required": false
      },
      {
        "name": "timeout",
        "description": "MQTT connection timeout. Default is 1s.",
        "required": false
      }
    ],
    "examples": null,
    "package": "mqtt"
  },
  {
    "name": "to",
    "description": "mqtt.to() outputs data from a stream of tables to an MQTT broker using MQTT protocol.(Required)\nMQTT broker connection string.MQTT topic to send data to.MQTT Quality of Service (QoS) level. Values range from [0-2]. Default is 0.MQTT retain flag. Default is false.MQTT client ID.Username to send to the MQTT broker.Username is only required if the broker requires authentication.\nIf you provide a username, you must provide a password.Password to send to the MQTT broker.\nPassword is only required if the broker requires authentication.\nIf you provide a password, you must provide a username.Name for the MQTT message.MQTT connection timeout. Default is 1s.Column to use as time values in the output line protocol.\nDefault is \"_time\".Columns to use as tag sets in the output line protocol.\nDefault is [].Columns to use as field values in the output line protocol.\nDefault is [\"_value\"].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "broker",
        "description": "(Required)\nMQTT broker connection string.",
        "required": true
      },
      {
        "name": "topic",
        "description": "MQTT topic to send data to.",
        "required": false
      },
      {
        "name": "qos",
        "description": "MQTT Quality of Service (QoS) level. Values range from [0-2]. Default is 0.",
        "required": false
      },
      {
        "name": "retain",
        "description": "MQTT retain flag. Default is false.",
        "required": false
      },
      {
        "name": "clientid",
        "description": "MQTT client ID.",
        "required": false
      },
      {
        "name": "username",
        "description": "Username to send to the MQTT broker.Username is only required if the broker requires authentication.\nIf you provide a username, you must provide a password.",
        "required": false
      },
      {
        "name": "password",
        "description": "Password to send to the MQTT broker.\nPassword is only required if the broker requires authentication.\nIf you provide a password, you must provide a username.",
        "required": false
      },
      {
        "name": "name",
        "description": "Name for the MQTT message.",
        "required": false
      },
      {
        "name": "timeout",
        "description": "MQTT connection timeout. Default is 1s.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Column to use as time values in the output line protocol.\nDefault is \"_time\".",
        "required": false
      },
      {
        "name": "tagColumns",
        "description": "Columns to use as tag sets in the output line protocol.\nDefault is [].",
        "required": false
      },
      {
        "name": "valueColumns",
        "description": "Columns to use as field values in the output line protocol.\nDefault is [\"_value\"].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "mqtt"
  },
  {
    "name": "naiveBayes",
    "description": "naiveBayesClassifier.naiveBayes() performs a naive Bayes classification.(Required)\nMeasurement to use as training data.(Required)\nField to use as training data.(Required)\nClass to classify against.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "myMeasurement",
        "description": "(Required)\nMeasurement to use as training data.",
        "required": true
      },
      {
        "name": "myField",
        "description": "(Required)\nField to use as training data.",
        "required": true
      },
      {
        "name": "myClass",
        "description": "(Required)\nClass to classify against.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "naiveBayesClassifier"
  },
  {
    "name": "now",
    "description": "now() is a function option that, by default, returns the current system time.now() returns the current system time (UTC). now() is cached at runtime,\nso all executions of now() in a Flux script return the same time value.\nsystem.time() returns the system time (UTC) at which system.time() is executed.\nEach instance of system.time() in a Flux script returns a unique value.",
    "params": [],
    "examples": null,
    "package": null
  },
  {
    "name": "APQ",
    "description": "oee.APQ() computes availability, performance, quality (APQ) and overall equipment\neffectiveness (OEE) in producing parts.Provide the required input schema to ensure this function successfully calculates APQ and OEE.Input tables must include the following columns:For each input table, oee.APQ outputs a table with a single row that includes the following columns:(Required)\nState value that represents a running state.(Required)\nTotal time that equipment is expected to produce parts.(Required)\nIdeal minimum time to produce one part.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "runningState",
        "description": "(Required)\nState value that represents a running state.",
        "required": true
      },
      {
        "name": "plannedTime",
        "description": "(Required)\nTotal time that equipment is expected to produce parts.",
        "required": true
      },
      {
        "name": "idealCycleTime",
        "description": "(Required)\nIdeal minimum time to produce one part.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "oee"
  },
  {
    "name": "computeAPQ",
    "description": "oee.computeAPQ() computes availability, performance, and quality (APQ)\nand overall equipment effectiveness (OEE) using two separate input streams:\nproduction events and part events.For each input table, oee.computeAPQ outputs a table with a single row and\nthe following columns:(Required)\nProduction events stream that contains the production\nstate or start and stop events.Each row must contain the following columns:(Required)\nPart events that contains the running totals of parts produced and\nparts that do not meet quality standards.Each row must contain the following columns:(Required)\nState value that represents a running state.(Required)\nTotal time that equipment is expected to produce parts.(Required)\nIdeal minimum time to produce one part.",
    "params": [
      {
        "name": "productionEvents",
        "description": "(Required)\nProduction events stream that contains the production\nstate or start and stop events.Each row must contain the following columns:",
        "required": true
      },
      {
        "name": "partEvents",
        "description": "(Required)\nPart events that contains the running totals of parts produced and\nparts that do not meet quality standards.Each row must contain the following columns:",
        "required": true
      },
      {
        "name": "runningState",
        "description": "(Required)\nState value that represents a running state.",
        "required": true
      },
      {
        "name": "plannedTime",
        "description": "(Required)\nTotal time that equipment is expected to produce parts.",
        "required": true
      },
      {
        "name": "idealCycleTime",
        "description": "(Required)\nIdeal minimum time to produce one part.",
        "required": true
      }
    ],
    "examples": null,
    "package": "oee"
  },
  {
    "name": "endpoint",
    "description": "opsgenie.endpoint() sends an alert message to Opsgenie using data from table rows.opsgenie.endpoint is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the record used to generate the POST request. Requires an r parameter.mapFn accepts a table row (r) and returns a record that must include the following fields:For more information, see opsgenie.sendAlert.Opsgenie API URL. Defaults to https://api.opsgenie.com/v2/alerts.(Required)\n(Required) Opsgenie API authorization key.Alert entity used to specify the alert domain.",
    "params": [
      {
        "name": "url",
        "description": "Opsgenie API URL. Defaults to https://api.opsgenie.com/v2/alerts.",
        "required": false
      },
      {
        "name": "apiKey",
        "description": "(Required)\n(Required) Opsgenie API authorization key.",
        "required": true
      },
      {
        "name": "entity",
        "description": "Alert entity used to specify the alert domain.",
        "required": false
      }
    ],
    "examples": null,
    "package": "opsgenie"
  },
  {
    "name": "respondersToJSON",
    "description": "opsgenie.respondersToJSON() converts an array of Opsgenie responder strings\nto a string-encoded JSON array that can be embedded in an alert message.(Required)\n(Required) Array of Opsgenie responder strings.\nResponder strings must begin with\nuser: , team: , escalation: , or schedule: .",
    "params": [
      {
        "name": "v",
        "description": "(Required)\n(Required) Array of Opsgenie responder strings.\nResponder strings must begin with\nuser: , team: , escalation: , or schedule: .",
        "required": true
      }
    ],
    "examples": null,
    "package": "opsgenie"
  },
  {
    "name": "sendAlert",
    "description": "opsgenie.sendAlert() sends an alert message to Opsgenie.Opsgenie API URL. Defaults to https://api.opsgenie.com/v2/alerts.(Required)\n(Required) Opsgenie API authorization key.(Required)\n(Required) Alert message text.\n130 characters or less.Opsgenie alias usee to de-deduplicate alerts.\n250 characters or less.\nDefaults to message.Alert description. 15000 characters or less.Opsgenie alert priority.Valid values include:List of responder teams or users.\nUse the user: prefix for users and teams: prefix for teams.Alert tags.Alert entity used to specify the alert domain.List of actions available for the alert.Additional alert details. Must be a JSON-encoded map of key-value string pairs.List of teams and users the alert will be visible to without sending notifications.\nUse the user: prefix for users and teams: prefix for teams.",
    "params": [
      {
        "name": "url",
        "description": "Opsgenie API URL. Defaults to https://api.opsgenie.com/v2/alerts.",
        "required": false
      },
      {
        "name": "apiKey",
        "description": "(Required)\n(Required) Opsgenie API authorization key.",
        "required": true
      },
      {
        "name": "message",
        "description": "(Required)\n(Required) Alert message text.\n130 characters or less.",
        "required": true
      },
      {
        "name": "alias",
        "description": "Opsgenie alias usee to de-deduplicate alerts.\n250 characters or less.\nDefaults to message.",
        "required": false
      },
      {
        "name": "description",
        "description": "Alert description. 15000 characters or less.",
        "required": false
      },
      {
        "name": "priority",
        "description": "Opsgenie alert priority.Valid values include:",
        "required": false
      },
      {
        "name": "responders",
        "description": "List of responder teams or users.\nUse the user: prefix for users and teams: prefix for teams.",
        "required": false
      },
      { "name": "tags", "description": "Alert tags.", "required": false },
      {
        "name": "entity",
        "description": "Alert entity used to specify the alert domain.",
        "required": false
      },
      {
        "name": "actions",
        "description": "List of actions available for the alert.",
        "required": false
      },
      {
        "name": "details",
        "description": "Additional alert details. Must be a JSON-encoded map of key-value string pairs.",
        "required": false
      },
      {
        "name": "visibleTo",
        "description": "List of teams and users the alert will be visible to without sending notifications.\nUse the user: prefix for users and teams: prefix for teams.",
        "required": false
      }
    ],
    "examples": null,
    "package": "opsgenie"
  },
  {
    "name": "actionFromLevel",
    "description": "pagerduty.actionFromLevel() converts a monitoring level to a PagerDuty action.(Required)\nMonitoring level to convert to a PagerDuty action.",
    "params": [
      {
        "name": "level",
        "description": "(Required)\nMonitoring level to convert to a PagerDuty action.",
        "required": true
      }
    ],
    "examples": null,
    "package": "pagerduty"
  },
  {
    "name": "actionFromSeverity",
    "description": "pagerduty.actionFromSeverity() converts a severity to a PagerDuty action.(Required)\nSeverity to convert to a PagerDuty action.",
    "params": [
      {
        "name": "severity",
        "description": "(Required)\nSeverity to convert to a PagerDuty action.",
        "required": true
      }
    ],
    "examples": null,
    "package": "pagerduty"
  },
  {
    "name": "dedupKey",
    "description": "pagerduty.dedupKey() uses the group key of an input table to generate and store a\ndeduplication key in the _pagerdutyDedupKeycolumn.\nThe function sorts, newline-concatenates, SHA256-hashes, and hex-encodes the\ngroup key to create a unique deduplication key for each input table.Group key columns to exclude when generating the deduplication key.\nDefault is [\"_start\", \u201c_stop\u201d, \u201c_level\u201d].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "exclude",
        "description": "Group key columns to exclude when generating the deduplication key.\nDefault is [\"_start\", \u201c_stop\u201d, \u201c_level\u201d].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "pagerduty"
  },
  {
    "name": "endpoint",
    "description": "pagerduty.endpoint() returns a function that sends a message to PagerDuty that includes output data.pagerduty.endpoint() is a factory function that outputs another function.\nThe output function requires a mapFn parameter.Function that builds the record used to generate the POST request.\nRequires an r parameter.mapFn accepts a table row (r) and returns a record that must include the\nfollowing properties:PagerDuty v2 Events API URL.Default is https://events.pagerduty.com/v2/enqueue.",
    "params": [
      {
        "name": "url",
        "description": "PagerDuty v2 Events API URL.Default is https://events.pagerduty.com/v2/enqueue.",
        "required": false
      }
    ],
    "examples": null,
    "package": "pagerduty"
  },
  {
    "name": "sendEvent",
    "description": "pagerduty.sendEvent() sends an event to PagerDuty and returns the HTTP response code of the request.PagerDuty endpoint URL.Default is https://events.pagerduty.com/v2/enqueue.(Required)\nRouting key generated from your PagerDuty integration.(Required)\nName of the client sending the alert.(Required)\nURL of the client sending the alert.(Required)\nPer-alert ID that acts as deduplication key and allows you to\nacknowledge or change the severity of previous messages.\nSupports a maximum of 255 characters.(Required)\nClass or type of the event.Classes are user-defined.\nFor example, ping failure or cpu load.(Required)\nLogical grouping used by PagerDuty.Groups are user-defined.\nFor example, app-stack.(Required)\nSeverity of the event.Valid values:(Required)\nEvent type to send to PagerDuty.Valid values:(Required)\nUnique location of the affected system.\nFor example, the hostname or fully qualified domain name (FQDN).Component responsible for the event.(Required)\nBrief text summary of the event used as the summaries or titles of associated alerts.\nThe maximum permitted length is 1024 characters.(Required)\nTime the detected event occurred in RFC3339nano format.Record with additional details about the event.",
    "params": [
      {
        "name": "pagerdutyURL",
        "description": "PagerDuty endpoint URL.Default is https://events.pagerduty.com/v2/enqueue.",
        "required": false
      },
      {
        "name": "routingKey",
        "description": "(Required)\nRouting key generated from your PagerDuty integration.",
        "required": true
      },
      {
        "name": "client",
        "description": "(Required)\nName of the client sending the alert.",
        "required": true
      },
      {
        "name": "clientURL",
        "description": "(Required)\nURL of the client sending the alert.",
        "required": true
      },
      {
        "name": "dedupKey",
        "description": "(Required)\nPer-alert ID that acts as deduplication key and allows you to\nacknowledge or change the severity of previous messages.\nSupports a maximum of 255 characters.",
        "required": true
      },
      {
        "name": "class",
        "description": "(Required)\nClass or type of the event.Classes are user-defined.\nFor example, ping failure or cpu load.",
        "required": true
      },
      {
        "name": "group",
        "description": "(Required)\nLogical grouping used by PagerDuty.Groups are user-defined.\nFor example, app-stack.",
        "required": true
      },
      {
        "name": "severity",
        "description": "(Required)\nSeverity of the event.Valid values:",
        "required": true
      },
      {
        "name": "eventAction",
        "description": "(Required)\nEvent type to send to PagerDuty.Valid values:",
        "required": true
      },
      {
        "name": "source",
        "description": "(Required)\nUnique location of the affected system.\nFor example, the hostname or fully qualified domain name (FQDN).",
        "required": true
      },
      {
        "name": "component",
        "description": "Component responsible for the event.",
        "required": false
      },
      {
        "name": "summary",
        "description": "(Required)\nBrief text summary of the event used as the summaries or titles of associated alerts.\nThe maximum permitted length is 1024 characters.",
        "required": true
      },
      {
        "name": "timestamp",
        "description": "(Required)\nTime the detected event occurred in RFC3339nano format.",
        "required": true
      },
      {
        "name": "customDetails",
        "description": "Record with additional details about the event.",
        "required": false
      }
    ],
    "examples": null,
    "package": "pagerduty"
  },
  {
    "name": "severityFromLevel",
    "description": "pagerduty.severityFromLevel() converts an InfluxDB status level to a PagerDuty severity.(Required)\nInfluxDB status level to convert to a PagerDuty severity.",
    "params": [
      {
        "name": "level",
        "description": "(Required)\nInfluxDB status level to convert to a PagerDuty severity.",
        "required": true
      }
    ],
    "examples": null,
    "package": "pagerduty"
  },
  {
    "name": "pearsonr",
    "description": "pearsonr() returns the covariance of two streams of tables normalized to the\nPearson R coefficient.(Required)\nFirst input stream.(Required)\nSecond input stream.(Required)\nList of columns to join on.",
    "params": [
      {
        "name": "x",
        "description": "(Required)\nFirst input stream.",
        "required": true
      },
      {
        "name": "y",
        "description": "(Required)\nSecond input stream.",
        "required": true
      },
      {
        "name": "on",
        "description": "(Required)\nList of columns to join on.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "pivot",
    "description": "pivot() collects unique values stored vertically (column-wise) and aligns them\nhorizontally (row-wise) into logical sets.The group key of the resulting table is the same as the input tables,\nexcluding columns found in the columnKey and valueColumn parameters.\nThese columns are not part of the resulting output table and are dropped from\nthe group key.Every input row should have a 1:1 mapping to a particular row and column\ncombination in the output table. Row and column combinations are determined\nby the rowKey and columnKey parameters. In cases where more than one\nvalue is identified for the same row and column pair, the last value\nencountered in the set of table rows is used as the result.The output is constructed as follows:(Required)\nColumns to use to uniquely identify an output row.(Required)\nColumns to use to identify new output columns.(Required)\nColumn to use to populate the value of pivoted columnKey columns.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "rowKey",
        "description": "(Required)\nColumns to use to uniquely identify an output row.",
        "required": true
      },
      {
        "name": "columnKey",
        "description": "(Required)\nColumns to use to identify new output columns.",
        "required": true
      },
      {
        "name": "valueColumn",
        "description": "(Required)\nColumn to use to populate the value of pivoted columnKey columns.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "rdp",
    "description": "polyline.rdp() applies the Ramer Douglas Peucker (RDP) algorithm to input data to downsample curves composed\nof line segments into visually indistinguishable curves with fewer points.Column with Y axis values of the given curve. Default is _value.Column with X axis values of the given curve. Default is _time.Maximum tolerance value that determines the amount of compression.Epsilon should be greater than 0.0.Percentage of points to retain after downsampling.Retention rate should be between 0.0 and 100.0.Input data. Default is piped-forward data (<-).When using polyline.rdp(), leave both epsilon and retention unspecified\nto automatically calculate the maximum tolerance for producing a visually\nindistinguishable curve.",
    "params": [
      {
        "name": "valColumn",
        "description": "Column with Y axis values of the given curve. Default is _value.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Column with X axis values of the given curve. Default is _time.",
        "required": false
      },
      {
        "name": "epsilon",
        "description": "Maximum tolerance value that determines the amount of compression.Epsilon should be greater than 0.0.",
        "required": false
      },
      {
        "name": "retention",
        "description": "Percentage of points to retain after downsampling.Retention rate should be between 0.0 and 100.0.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "polyline"
  },
  {
    "name": "histogramQuantile",
    "description": "prometheus.histogramQuantile() calculates a quantile on a set of Prometheus histogram values.This function supports Prometheus metric parsing formats\nused by prometheus.scrape(), the Telegraf promtheus input plugin, and\nInfluxDB scrapers available in InfluxDB OSS.(Required)\nQuantile to compute. Must be a float value between 0.0 and 1.0.Prometheus metric parsing format\nused to parse queried Prometheus data.\nAvailable versions are 1 and 2.\nDefault is 2.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "quantile",
        "description": "(Required)\nQuantile to compute. Must be a float value between 0.0 and 1.0.",
        "required": true
      },
      {
        "name": "metricVersion",
        "description": "Prometheus metric parsing format\nused to parse queried Prometheus data.\nAvailable versions are 1 and 2.\nDefault is 2.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "prometheus"
  },
  {
    "name": "scrape",
    "description": "prometheus.scrape() scrapes Prometheus metrics from an HTTP-accessible endpoint and returns\nthem as a stream of tables.(Required)\nURL to scrape Prometheus metrics from.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nURL to scrape Prometheus metrics from.",
        "required": true
      }
    ],
    "examples": null,
    "package": "prometheus"
  },
  {
    "name": "changes",
    "description": "promql.changes() implements functionality equivalent to\nPromQL\u2019s changes() function.Important: The internal/promql package is not meant for external use.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "emptyTable",
    "description": "promql.emptyTable() returns an empty table, which is used as a helper function to implement\nPromQL\u2019s time() and\nvector() functions.Important: The internal/promql package is not meant for external use.",
    "params": [],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "extrapolatedRate",
    "description": "promql.extrapolatedRate() is a helper function that calculates extrapolated rates over\ncounters and is used to implement PromQL\u2019s\nrate(),\ndelta(),\nand increase() functions.Important: The internal/promql package is not meant for external use.Input data. Default is piped-forward data (<-).Data represents a counter.Data represents a rate.",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "isCounter",
        "description": "Data represents a counter.",
        "required": false
      },
      {
        "name": "isRate",
        "description": "Data represents a rate.",
        "required": false
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "holtWinters",
    "description": "promql.holtWinters() implements functionality equivalent to\nPromQL\u2019s holt_winters() function.Important: The internal/promql package is not meant for external use.Input data. Default is piped-forward data (<-).Exponential smoothing factor.Trend factor.",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "smoothingFactor",
        "description": "Exponential smoothing factor.",
        "required": false
      },
      {
        "name": "trendFactor",
        "description": "Trend factor.",
        "required": false
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "instantRate",
    "description": "promql.instantRate() is a helper function that calculates instant rates over\ncounters and is used to implement PromQL\u2019s\nirate() and\nidelta() functions.Important: The internal/promql package is not meant for external use.Input data. Defaults is piped-forward data (<-).Data represents a rate.",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Defaults is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "isRate",
        "description": "Data represents a rate.",
        "required": false
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "join",
    "description": "promql.join() joins two streams of tables on the group key and _time column.\nSee experimental.join.Important: The internal/promql package is not meant for external use.(Required)\nFirst of two streams of tables to join.(Required)\nSecond of two streams of tables to join.(Required)\nFunction with left and right arguments that maps a new output record\nusing values from the left and right input records.\nThe return value must be a record.",
    "params": [
      {
        "name": "left",
        "description": "(Required)\nFirst of two streams of tables to join.",
        "required": true
      },
      {
        "name": "right",
        "description": "(Required)\nSecond of two streams of tables to join.",
        "required": true
      },
      {
        "name": "fn",
        "description": "(Required)\nFunction with left and right arguments that maps a new output record\nusing values from the left and right input records.\nThe return value must be a record.",
        "required": true
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "labelReplace",
    "description": "promql.labelReplace() implements functionality equivalent to\nPromQL\u2019s label_replace() function.Important: The internal/promql package is not meant for external use.Input data. Default is piped-forward data (<-).(Required)\nInput label.(Required)\nOutput label.(Required)\nPattern as a regex string.(Required)\nReplacement value.",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "source",
        "description": "(Required)\nInput label.",
        "required": true
      },
      {
        "name": "destination",
        "description": "(Required)\nOutput label.",
        "required": true
      },
      {
        "name": "regex",
        "description": "(Required)\nPattern as a regex string.",
        "required": true
      },
      {
        "name": "replacement",
        "description": "(Required)\nReplacement value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "linearRegression",
    "description": "promql.linearRegression() implements linear regression functionality required to implement\nPromQL\u2019s deriv()\nand predict_linear() functions.Important: The internal/promql package is not meant for external use.Input data. Default is piped-forward data (<-).Output should contain a prediction.Time as a floating point value.",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "predict",
        "description": "Output should contain a prediction.",
        "required": false
      },
      {
        "name": "fromNow",
        "description": "Time as a floating point value.",
        "required": false
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "promHistogramQuantile",
    "description": "promql.promHistogramQuantile() implements functionality equivalent to\nPromQL\u2019s histogram_quantile() function.Important: The internal/promql package is not meant for external use.Input data. Default is piped-forward data (<-).Quantile to compute ([0.0 - 1.0]).Count column name.Upper bound column name.Output value column name.",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "quantile",
        "description": "Quantile to compute ([0.0 - 1.0]).",
        "required": false
      },
      {
        "name": "countColumn",
        "description": "Count column name.",
        "required": false
      },
      {
        "name": "upperBoundColumn",
        "description": "Upper bound column name.",
        "required": false
      },
      {
        "name": "valueColumn",
        "description": "Output value column name.",
        "required": false
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "promqlDayOfMonth",
    "description": "promql.promqlDayOfMonth() implements functionality equivalent to\nPromQL\u2019s day_of_month() function.Important: The internal/promql package is not meant for external use.(Required)\nTime as a floating point value.",
    "params": [
      {
        "name": "timestamp",
        "description": "(Required)\nTime as a floating point value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "promqlDayOfWeek",
    "description": "promql.promqlDayOfWeek() implements functionality equivalent to\nPromQL\u2019s day_of_week() function.Important: The internal/promql package is not meant for external use.(Required)\nTime as a floating point value.",
    "params": [
      {
        "name": "timestamp",
        "description": "(Required)\nTime as a floating point value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "promqlDaysInMonth",
    "description": "promql.promqlDaysInMonth() implements functionality equivalent to\nPromQL\u2019s days_in_month() function.Important: The internal/promql package is not meant for external use.(Required)\nTime as a floating point value.",
    "params": [
      {
        "name": "timestamp",
        "description": "(Required)\nTime as a floating point value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "promqlHour",
    "description": "promql.promqlHour() implements functionality equivalent to\nPromQL\u2019s hour() function.Important: The internal/promql package is not meant for external use.(Required)\nTime as a floating point value.",
    "params": [
      {
        "name": "timestamp",
        "description": "(Required)\nTime as a floating point value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "promqlMinute",
    "description": "promql.promqlMinute() implements functionality equivalent to\nPromQL\u2019s minute() function.Important: The internal/promql package is not meant for external use.(Required)\nTime as a floating point value.",
    "params": [
      {
        "name": "timestamp",
        "description": "(Required)\nTime as a floating point value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "promqlMonth",
    "description": "promql.promqlMonth() implements functionality equivalent to\nPromQL\u2019s month() function.Important: The internal/promql package is not meant for external use.(Required)\nTime as a floating point value.",
    "params": [
      {
        "name": "timestamp",
        "description": "(Required)\nTime as a floating point value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "promqlYear",
    "description": "promql.promqlYear() implements functionality equivalent to\nPromQL\u2019s year() function.Important: The internal/promql package is not meant for external use.(Required)\nTime as a floating point value.",
    "params": [
      {
        "name": "timestamp",
        "description": "(Required)\nTime as a floating point value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "quantile",
    "description": "promql.quantile() accounts checks for quantile values that are out of range, above 1.0 or\nbelow 0.0, by either returning positive infinity or negative infinity in the _value\ncolumn respectively. q must be a float.Important: The internal/promql package is not meant for external use.Input data. Default is piped-forward data (<-).(Required)\nQuantile to compute ([0.0 - 1.0]).Quantile method to use.",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "q",
        "description": "(Required)\nQuantile to compute ([0.0 - 1.0]).",
        "required": true
      },
      {
        "name": "method",
        "description": "Quantile method to use.",
        "required": false
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "resets",
    "description": "promql.resets() implements functionality equivalent to\nPromQL\u2019s resets() function.Important: The internal/promql package is not meant for external use.Input data. Defaults is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Defaults is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "timestamp",
    "description": "promql.timestamp() implements functionality equivalent to\nPromQL\u2019s timestamp() function.Important: The internal/promql package is not meant for external use.Input data. Defaults is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Defaults is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "promql"
  },
  {
    "name": "endpoint",
    "description": "pushbullet.endpoint() creates the endpoint for the Pushbullet API and sends a notification of type note.pushbullet.endpoint() is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the record used to generate the API request.\nRequires an r parameter.mapFn accepts a table row (r) and returns a record that must include the\nfollowing properties (as defined in pushbullet.pushNote()):PushBullet API endpoint URL. Default is \"https://api.pushbullet.com/v2/pushes\".Pushbullet API token string. Default is \"\".",
    "params": [
      {
        "name": "url",
        "description": "PushBullet API endpoint URL. Default is \"https://api.pushbullet.com/v2/pushes\".",
        "required": false
      },
      {
        "name": "token",
        "description": "Pushbullet API token string. Default is \"\".",
        "required": false
      }
    ],
    "examples": null,
    "package": "pushbullet"
  },
  {
    "name": "pushData",
    "description": "pushbullet.pushData() sends a push notification to the Pushbullet API.URL of the PushBullet endpoint. Default is \"https://api.pushbullet.com/v2/pushes\".API token string. Default is \"\".(Required)\nData to send to the endpoint. Data is JSON-encoded and sent to the Pushbullet\u2019s endpoint.For how to structure data, see the Pushbullet API documentation.",
    "params": [
      {
        "name": "url",
        "description": "URL of the PushBullet endpoint. Default is \"https://api.pushbullet.com/v2/pushes\".",
        "required": false
      },
      {
        "name": "token",
        "description": "API token string. Default is \"\".",
        "required": false
      },
      {
        "name": "data",
        "description": "(Required)\nData to send to the endpoint. Data is JSON-encoded and sent to the Pushbullet\u2019s endpoint.For how to structure data, see the Pushbullet API documentation.",
        "required": true
      }
    ],
    "examples": null,
    "package": "pushbullet"
  },
  {
    "name": "pushNote",
    "description": "pushbullet.pushNote() sends a push notification of type \u201cnote\u201d to the Pushbullet API.URL of the PushBullet endpoint. Default is \"https://api.pushbullet.com/v2/pushes\".API token string. Defaults to: \"\".(Required)\nTitle of the notification.(Required)\nText to display in the notification.",
    "params": [
      {
        "name": "url",
        "description": "URL of the PushBullet endpoint. Default is \"https://api.pushbullet.com/v2/pushes\".",
        "required": false
      },
      {
        "name": "token",
        "description": "API token string. Defaults to: \"\".",
        "required": false
      },
      {
        "name": "title",
        "description": "(Required)\nTitle of the notification.",
        "required": true
      },
      {
        "name": "text",
        "description": "(Required)\nText to display in the notification.",
        "required": true
      }
    ],
    "examples": null,
    "package": "pushbullet"
  },
  {
    "name": "quantile",
    "description": "quantile() returns rows from each input table with values that fall within a\nspecified quantile or returns the row with the value that represents the\nspecified quantile.quantile() supports columns with float values.quantile() acts as an aggregate or selector transformation depending on the\nspecified method.Column to use to compute the quantile. Default is _value.(Required)\nQuantile to compute. Must be between 0.0 and 1.0.Computation method. Default is estimate_tdigest.Avaialable methods:Number of centroids to use when compressing the dataset.\nDefault is 1000.0.A larger number produces a more accurate result at the cost of increased\nmemory requirements.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to use to compute the quantile. Default is _value.",
        "required": false
      },
      {
        "name": "q",
        "description": "(Required)\nQuantile to compute. Must be between 0.0 and 1.0.",
        "required": true
      },
      {
        "name": "method",
        "description": "Computation method. Default is estimate_tdigest.Avaialable methods:",
        "required": false
      },
      {
        "name": "compression",
        "description": "Number of centroids to use when compressing the dataset.\nDefault is 1000.0.A larger number produces a more accurate result at the cost of increased\nmemory requirements.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "filterFields",
    "description": "query.filterFields() filters input data by field.Fields to filter by. Default is [].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "fields",
        "description": "Fields to filter by. Default is [].",
        "required": false
      },
      {
        "name": "table",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "query"
  },
  {
    "name": "filterMeasurement",
    "description": "query.filterMeasurement() filters input data by measurement.(Required)\nInfluxDB measurement name to filter by.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "measurement",
        "description": "(Required)\nInfluxDB measurement name to filter by.",
        "required": true
      },
      {
        "name": "table",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "query"
  },
  {
    "name": "fromRange",
    "description": "query.fromRange() returns all data from a specified bucket within given time bounds.(Required)\nInfluxDB bucket name.(Required)\nEarliest time to include in results.Results include points that match the specified start time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().Latest time to include in results. Default is now().Results exclude points that match the specified stop time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).For example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nInfluxDB bucket name.",
        "required": true
      },
      {
        "name": "start",
        "description": "(Required)\nEarliest time to include in results.Results include points that match the specified start time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "stop",
        "description": "Latest time to include in results. Default is now().Results exclude points that match the specified stop time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).For example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "query"
  },
  {
    "name": "inBucket",
    "description": "query.inBucket() queries data from a specified InfluxDB bucket within given time bounds,\nfilters data by measurement, field, and optional predicate expressions.(Required)\nInfluxDB bucket name.(Required)\nInfluxDB measurement name to filter by.(Required)\nEarliest time to include in results.Results include points that match the specified start time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().Latest time to include in results. Default is now().Results exclude points that match the specified stop time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).For example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().Fields to filter by. Default is [].Predicate function that evaluates column values and returns true or false.\nDefault is (r) => true.Records (r) are passed to the function.\nThose that evaluate to true are included in the output tables.\nRecords that evaluate to null or false are not included in the output tables.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nInfluxDB bucket name.",
        "required": true
      },
      {
        "name": "measurement",
        "description": "(Required)\nInfluxDB measurement name to filter by.",
        "required": true
      },
      {
        "name": "start",
        "description": "(Required)\nEarliest time to include in results.Results include points that match the specified start time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "stop",
        "description": "Latest time to include in results. Default is now().Results exclude points that match the specified stop time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).For example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": false
      },
      {
        "name": "fields",
        "description": "Fields to filter by. Default is [].",
        "required": false
      },
      {
        "name": "predicate",
        "description": "Predicate function that evaluates column values and returns true or false.\nDefault is (r) => true.Records (r) are passed to the function.\nThose that evaluate to true are included in the output tables.\nRecords that evaluate to null or false are not included in the output tables.",
        "required": false
      }
    ],
    "examples": null,
    "package": "query"
  },
  {
    "name": "range",
    "description": "range() filters rows based on time bounds.Input data must have a _time column of type time.\nRows with a null value in the _time are filtered.\nrange() adds a _start column with the value of start and a _stop\ncolumn with the value of stop.\n_start and _stop columns are added to the group key.\nEach input table\u2019s group key value is modified to fit within the time bounds.\nTables with all rows outside the time bounds are filtered entirely.(Required)\nEarliest time to include in results.Results include rows with _time values that match the specified start time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().Latest time to include in results. Default is now().Results exclude rows with _time values that match the specified stop time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "start",
        "description": "(Required)\nEarliest time to include in results.Results include rows with _time values that match the specified start time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": true
      },
      {
        "name": "stop",
        "description": "Latest time to include in results. Default is now().Results exclude rows with _time values that match the specified stop time.\nUse a relative duration, absolute time, or integer (Unix timestamp in seconds).\nFor example, -1h, 2019-08-28T22:00:00Z, or 1567029600.\nDurations are relative to now().",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "get",
    "description": "record.get() returns a value from a record by key name or a default value if the key\ndoesn\u2019t exist in the record.This is an interim solution for the exists operator\u2019s limited use with\nrecords outside of a stream of tables.\nFor more information, see influxdata/flux#4073.(Required)\nRecord to retrieve the value from.(Required)\nProperty key to retrieve.(Required)\nDefault value to return if the specified key does not exist in the record.",
    "params": [
      {
        "name": "r",
        "description": "(Required)\nRecord to retrieve the value from.",
        "required": true
      },
      {
        "name": "key",
        "description": "(Required)\nProperty key to retrieve.",
        "required": true
      },
      {
        "name": "default",
        "description": "(Required)\nDefault value to return if the specified key does not exist in the record.",
        "required": true
      }
    ],
    "examples": null,
    "package": "record"
  },
  {
    "name": "reduce",
    "description": "reduce() aggregates rows in each input table using a reducer function (fn).The output for each table is the group key of the table with columns\ncorresponding to each field in the reducer record.\nIf the reducer record contains a column with the same name as a group key column,\nthe group key column\u2019s value is overwritten, and the outgoing group key is changed.\nHowever, if two reduced tables write to the same destination group key, the\nfunction returns an error.reduce() drops any columns that:(Required)\nReducer function to apply to each row record (r).The reducer function accepts two parameters:(Required)\nRecord that defines the reducer record and provides initial values\nfor the reducer operation on the first row.May be used more than once in asynchronous processing use cases.\nThe data type of values in the identity record determine the data type of\noutput values.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "fn",
        "description": "(Required)\nReducer function to apply to each row record (r).The reducer function accepts two parameters:",
        "required": true
      },
      {
        "name": "identity",
        "description": "(Required)\nRecord that defines the reducer record and provides initial values\nfor the reducer operation on the first row.May be used more than once in asynchronous processing use cases.\nThe data type of values in the identity record determine the data type of\noutput values.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "compile",
    "description": "regexp.compile() parses a string into a regular expression and returns a regexp type\nthat can be used to match against strings.(Required)\nString value to parse into a regular expression.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to parse into a regular expression.",
        "required": true
      }
    ],
    "examples": null,
    "package": "regexp"
  },
  {
    "name": "findString",
    "description": "regexp.findString() returns the left-most regular expression match in a string.(Required)\nRegular expression used to search v.(Required)\nString value to search.",
    "params": [
      {
        "name": "r",
        "description": "(Required)\nRegular expression used to search v.",
        "required": true
      },
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      }
    ],
    "examples": null,
    "package": "regexp"
  },
  {
    "name": "findStringIndex",
    "description": "regexp.findStringIndex() returns a two-element array of integers that represent the\nbeginning and ending indexes of the first regular expression match in a string.(Required)\nRegular expression used to search v.(Required)\nString value to search.",
    "params": [
      {
        "name": "r",
        "description": "(Required)\nRegular expression used to search v.",
        "required": true
      },
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      }
    ],
    "examples": null,
    "package": "regexp"
  },
  {
    "name": "getString",
    "description": "regexp.getString() returns the source string used to compile a regular expression.(Required)\nRegular expression object to convert to a string.",
    "params": [
      {
        "name": "r",
        "description": "(Required)\nRegular expression object to convert to a string.",
        "required": true
      }
    ],
    "examples": null,
    "package": "regexp"
  },
  {
    "name": "matchRegexpString",
    "description": "regexp.matchRegexpString() tests if a string contains any match to a regular expression.(Required)\nRegular expression used to search v.(Required)\nString value to search.",
    "params": [
      {
        "name": "r",
        "description": "(Required)\nRegular expression used to search v.",
        "required": true
      },
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      }
    ],
    "examples": null,
    "package": "regexp"
  },
  {
    "name": "quoteMeta",
    "description": "regexp.quoteMeta() escapes all regular expression metacharacters in a string.(Required)\nString that contains regular expression metacharacters to escape.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString that contains regular expression metacharacters to escape.",
        "required": true
      }
    ],
    "examples": null,
    "package": "regexp"
  },
  {
    "name": "replaceAllString",
    "description": "regexp.replaceAllString() replaces all reguar expression matches in a string with a\nspecified replacement.(Required)\nRegular expression used to search v.(Required)\nString value to search.(Required)\nReplacement for matches to r.",
    "params": [
      {
        "name": "r",
        "description": "(Required)\nRegular expression used to search v.",
        "required": true
      },
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "t",
        "description": "(Required)\nReplacement for matches to r.",
        "required": true
      }
    ],
    "examples": null,
    "package": "regexp"
  },
  {
    "name": "splitRegexp",
    "description": "regexp.splitRegexp() splits a string into substrings separated by regular expression\nmatches and returns an array of i substrings between matches.(Required)\nRegular expression used to search v.(Required)\nString value to be searched.(Required)\nMaximum number of substrings to return.-1 returns all matching substrings.",
    "params": [
      {
        "name": "r",
        "description": "(Required)\nRegular expression used to search v.",
        "required": true
      },
      {
        "name": "v",
        "description": "(Required)\nString value to be searched.",
        "required": true
      },
      {
        "name": "i",
        "description": "(Required)\nMaximum number of substrings to return.-1 returns all matching substrings.",
        "required": true
      }
    ],
    "examples": null,
    "package": "regexp"
  },
  {
    "name": "relativeStrengthIndex",
    "description": "relativeStrengthIndex() measures the relative speed and change of values in input tables.For each input table with x rows, relativeStrengthIndex() outputs a table\nwith x - n rows.(Required)\nNumber of values to use to calculate the RSI.Columns to operate on. Default is [\"_value\"].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of values to use to calculate the RSI.",
        "required": true
      },
      {
        "name": "columns",
        "description": "Columns to operate on. Default is [\"_value\"].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "rename",
    "description": "rename() renames columns in a table.If a column in the group key is renamed, the column name in the group key is updated.Record that maps old column names to new column names.Function that takes the current column name (column) and returns a\nnew column name.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "columns",
        "description": "Record that maps old column names to new column names.",
        "required": false
      },
      {
        "name": "fn",
        "description": "Function that takes the current column name (column) and returns a\nnew column name.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "do",
    "description": "requests.do() makes an http request.The returned response contains the following properties:(Required)\nmethod of the http request.\nSupported methods: DELETE, GET, HEAD, PATCH, POST, PUT.(Required)\nURL to request. This should not include any query parameters.Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.Set of key values pairs to include on the request.Data to send with the request.Set of options to control how the request should be performed.",
    "params": [
      {
        "name": "method",
        "description": "(Required)\nmethod of the http request.\nSupported methods: DELETE, GET, HEAD, PATCH, POST, PUT.",
        "required": true
      },
      {
        "name": "url",
        "description": "(Required)\nURL to request. This should not include any query parameters.",
        "required": true
      },
      {
        "name": "params",
        "description": "Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.",
        "required": false
      },
      {
        "name": "headers",
        "description": "Set of key values pairs to include on the request.",
        "required": false
      },
      {
        "name": "body",
        "description": "Data to send with the request.",
        "required": false
      },
      {
        "name": "config",
        "description": "Set of options to control how the request should be performed.",
        "required": false
      }
    ],
    "examples": null,
    "package": "requests"
  },
  {
    "name": "do",
    "description": "requests.do() makes an http request.The returned response contains the following properties:(Required)\nmethod of the http request.\nSupported methods: DELETE, GET, HEAD, PATCH, POST, PUT.(Required)\nURL to request. This should not include any query parameters.Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.Set of key values pairs to include on the request.Data to send with the request.Set of options to control how the request should be performed.",
    "params": [
      {
        "name": "method",
        "description": "(Required)\nmethod of the http request.\nSupported methods: DELETE, GET, HEAD, PATCH, POST, PUT.",
        "required": true
      },
      {
        "name": "url",
        "description": "(Required)\nURL to request. This should not include any query parameters.",
        "required": true
      },
      {
        "name": "params",
        "description": "Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.",
        "required": false
      },
      {
        "name": "headers",
        "description": "Set of key values pairs to include on the request.",
        "required": false
      },
      {
        "name": "body",
        "description": "Data to send with the request.",
        "required": false
      },
      {
        "name": "config",
        "description": "Set of options to control how the request should be performed.",
        "required": false
      }
    ],
    "examples": null,
    "package": "requests"
  },
  {
    "name": "get",
    "description": "requests.get() makes a http GET request. This identical to calling request.do(method: \"GET\", ...).(Required)\nURL to request. This should not include any query parameters.Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.Set of key values pairs to include on the request.Data to send with the request.Set of options to control how the request should be performed.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nURL to request. This should not include any query parameters.",
        "required": true
      },
      {
        "name": "params",
        "description": "Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.",
        "required": false
      },
      {
        "name": "headers",
        "description": "Set of key values pairs to include on the request.",
        "required": false
      },
      {
        "name": "body",
        "description": "Data to send with the request.",
        "required": false
      },
      {
        "name": "config",
        "description": "Set of options to control how the request should be performed.",
        "required": false
      }
    ],
    "examples": null,
    "package": "requests"
  },
  {
    "name": "get",
    "description": "requests.get() makes a http GET request. This identical to calling request.do(method: \"GET\", ...).(Required)\nURL to request. This should not include any query parameters.Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.Set of key values pairs to include on the request.Data to send with the request.Set of options to control how the request should be performed.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nURL to request. This should not include any query parameters.",
        "required": true
      },
      {
        "name": "params",
        "description": "Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.",
        "required": false
      },
      {
        "name": "headers",
        "description": "Set of key values pairs to include on the request.",
        "required": false
      },
      {
        "name": "body",
        "description": "Data to send with the request.",
        "required": false
      },
      {
        "name": "config",
        "description": "Set of options to control how the request should be performed.",
        "required": false
      }
    ],
    "examples": null,
    "package": "requests"
  },
  {
    "name": "peek",
    "description": "requests.peek() converts an HTTP response into a table for easy inspection.The output table includes the following columns:To customize how the response data is structured in a table, use array.from()\nwith a function like json.parse(). Parse the response body into a set of values\nand then use array.from() to construct a table from those values.(Required)\nResponse data from an HTTP request.",
    "params": [
      {
        "name": "response",
        "description": "(Required)\nResponse data from an HTTP request.",
        "required": true
      }
    ],
    "examples": null,
    "package": "requests"
  },
  {
    "name": "peek",
    "description": "requests.peek() converts an HTTP response into a table for easy inspection.The output table includes the following columns:To customize how the response data is structured in a table, use array.from()\nwith a function like json.parse(). Parse the response body into a set of values\nand then use array.from() to construct a table from those values.(Required)\nResponse data from an HTTP request.",
    "params": [
      {
        "name": "response",
        "description": "(Required)\nResponse data from an HTTP request.",
        "required": true
      }
    ],
    "examples": null,
    "package": "requests"
  },
  {
    "name": "post",
    "description": "requests.post() makes a http POST request. This identical to calling request.do(method: \"POST\", ...).(Required)\nURL to request. This should not include any query parameters.Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.Set of key values pairs to include on the request.Data to send with the request.Set of options to control how the request should be performed.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nURL to request. This should not include any query parameters.",
        "required": true
      },
      {
        "name": "params",
        "description": "Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.",
        "required": false
      },
      {
        "name": "headers",
        "description": "Set of key values pairs to include on the request.",
        "required": false
      },
      {
        "name": "body",
        "description": "Data to send with the request.",
        "required": false
      },
      {
        "name": "config",
        "description": "Set of options to control how the request should be performed.",
        "required": false
      }
    ],
    "examples": null,
    "package": "requests"
  },
  {
    "name": "post",
    "description": "requests.post() makes a http POST request. This identical to calling request.do(method: \"POST\", ...).(Required)\nURL to request. This should not include any query parameters.Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.Set of key values pairs to include on the request.Data to send with the request.Set of options to control how the request should be performed.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nURL to request. This should not include any query parameters.",
        "required": true
      },
      {
        "name": "params",
        "description": "Set of key value pairs to add to the URL as query parameters.\nQuery parameters will be URL encoded.\nAll values for a key will be appended to the query.",
        "required": false
      },
      {
        "name": "headers",
        "description": "Set of key values pairs to include on the request.",
        "required": false
      },
      {
        "name": "body",
        "description": "Data to send with the request.",
        "required": false
      },
      {
        "name": "config",
        "description": "Set of options to control how the request should be performed.",
        "required": false
      }
    ],
    "examples": null,
    "package": "requests"
  },
  {
    "name": "version",
    "description": "runtime.version() returns the current Flux version.",
    "params": [],
    "examples": null,
    "package": "runtime"
  },
  {
    "name": "alignToNow",
    "description": "sample.alignToNow() shifts time values in input data to align the chronological last point to now.When writing static historical sample datasets to InfluxDB Cloud, use alignToNow()\nto avoid losing sample data with timestamps outside of the retention period\nassociated with your InfluxDB Cloud account.Input data must have a _time column.Input data. Defaults to piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Defaults to piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "sample"
  },
  {
    "name": "data",
    "description": "sample.data() downloads a specified InfluxDB sample dataset.(Required)\nSample data set to download and output.Valid datasets:",
    "params": [
      {
        "name": "set",
        "description": "(Required)\nSample data set to download and output.Valid datasets:",
        "required": true
      }
    ],
    "examples": null,
    "package": "sample"
  },
  {
    "name": "list",
    "description": "sample.list() outputs information about available InfluxDB sample datasets.",
    "params": [],
    "examples": null,
    "package": "sample"
  },
  {
    "name": "sample",
    "description": "sample() selects a subset of the rows from each input table.Note: sample() drops empty tables.(Required)\nSample every Nth element.Position offset from the start of results where sampling begins.\nDefault is -1 (random offset).pos must be less than n. If pos is less than 0, a random offset is used.Column to operate on.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nSample every Nth element.",
        "required": true
      },
      {
        "name": "pos",
        "description": "Position offset from the start of results where sampling begins.\nDefault is -1 (random offset).pos must be less than n. If pos is less than 0, a random offset is used.",
        "required": false
      },
      {
        "name": "column",
        "description": "Column to operate on.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "bool",
    "description": "sampledata.bool() returns a sample data set with boolean values.Include null values in the returned dataset.\nDefault is false.",
    "params": [
      {
        "name": "includeNull",
        "description": "Include null values in the returned dataset.\nDefault is false.",
        "required": false
      }
    ],
    "examples": null,
    "package": "sampledata"
  },
  {
    "name": "float",
    "description": "sampledata.float() returns a sample data set with float values.Include null values in the returned dataset.\nDefault is false.",
    "params": [
      {
        "name": "includeNull",
        "description": "Include null values in the returned dataset.\nDefault is false.",
        "required": false
      }
    ],
    "examples": null,
    "package": "sampledata"
  },
  {
    "name": "int",
    "description": "sampledata.int() returns a sample data set with integer values.Include null values in the returned dataset.\nDefault is false.",
    "params": [
      {
        "name": "includeNull",
        "description": "Include null values in the returned dataset.\nDefault is false.",
        "required": false
      }
    ],
    "examples": null,
    "package": "sampledata"
  },
  {
    "name": "numericBool",
    "description": "sampledata.numericBool() returns a sample data set with numeric (integer) boolean values.Include null values in the returned dataset.\nDefault is false.",
    "params": [
      {
        "name": "includeNull",
        "description": "Include null values in the returned dataset.\nDefault is false.",
        "required": false
      }
    ],
    "examples": null,
    "package": "sampledata"
  },
  {
    "name": "string",
    "description": "sampledata.string() returns a sample data set with string values.Include null values in the returned dataset.\nDefault is false.",
    "params": [
      {
        "name": "includeNull",
        "description": "Include null values in the returned dataset.\nDefault is false.",
        "required": false
      }
    ],
    "examples": null,
    "package": "sampledata"
  },
  {
    "name": "uint",
    "description": "sampledata.uint() returns a sample data set with unsigned integer values.Include null values in the returned dataset.\nDefault is false.",
    "params": [
      {
        "name": "includeNull",
        "description": "Include null values in the returned dataset.\nDefault is false.",
        "required": false
      }
    ],
    "examples": null,
    "package": "sampledata"
  },
  {
    "name": "fieldKeys",
    "description": "schema.fieldKeys() returns field keys in a bucket.Results include a single table with a single column, _value.Note: FieldKeys is a special application of tagValues() that returns field\nkeys in a given bucket.(Required)\nBucket to list field keys from.Predicate function that filters field keys.\nDefault is (r) => true.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to list field keys from.",
        "required": true
      },
      {
        "name": "predicate",
        "description": "Predicate function that filters field keys.\nDefault is (r) => true.",
        "required": false
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
        "required": false
      }
    ],
    "examples": null,
    "package": "schema"
  },
  {
    "name": "fieldsAsCols",
    "description": "schema.fieldsAsCols() is a special application of pivot() that pivots input data\non _field and _time columns to align fields within each input table that\nhave the same timestamp.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "schema"
  },
  {
    "name": "measurementFieldKeys",
    "description": "schema.measurementFieldKeys() returns a list of fields in a measurement.Results include a single table with a single column, _value.(Required)\nBucket to retrieve field keys from.(Required)\nMeasurement to list field keys from.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to retrieve field keys from.",
        "required": true
      },
      {
        "name": "measurement",
        "description": "(Required)\nMeasurement to list field keys from.",
        "required": true
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
        "required": false
      }
    ],
    "examples": null,
    "package": "schema"
  },
  {
    "name": "measurements",
    "description": "schema.measurements() returns a list of measurements in a specific bucket.Results include a single table with a single column, _value.(Required)\nBucket to retrieve measurements from.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to retrieve measurements from.",
        "required": true
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "schema"
  },
  {
    "name": "measurementTagKeys",
    "description": "schema.measurementTagKeys() returns the list of tag keys for a specific measurement.Results include a single table with a single column, _value.(Required)\nBucket to return tag keys from for a specific measurement.(Required)\nMeasurement to return tag keys from.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to return tag keys from for a specific measurement.",
        "required": true
      },
      {
        "name": "measurement",
        "description": "(Required)\nMeasurement to return tag keys from.",
        "required": true
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "schema"
  },
  {
    "name": "measurementTagValues",
    "description": "schema.measurementTagValues() returns a list of tag values for a specific measurement.Results include a single table with a single column, _value.(Required)\nBucket to return tag values from for a specific measurement.(Required)\nMeasurement to return tag values from.(Required)\nTag to return all unique values from.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to return tag values from for a specific measurement.",
        "required": true
      },
      {
        "name": "measurement",
        "description": "(Required)\nMeasurement to return tag values from.",
        "required": true
      },
      {
        "name": "tag",
        "description": "(Required)\nTag to return all unique values from.",
        "required": true
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "schema"
  },
  {
    "name": "tagKeys",
    "description": "schema.tagKeys() returns a list of tag keys for all series that match the predicate.Results include a single table with a single column, _value.(Required)\nBucket to return tag keys from.Predicate function that filters tag keys.\nDefault is (r) => true.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to return tag keys from.",
        "required": true
      },
      {
        "name": "predicate",
        "description": "Predicate function that filters tag keys.\nDefault is (r) => true.",
        "required": false
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
        "required": false
      }
    ],
    "examples": null,
    "package": "schema"
  },
  {
    "name": "tagValues",
    "description": "schema.tagValues() returns a list of unique values for a given tag.Results include a single table with a single column, _value.(Required)\nBucket to return unique tag values from.(Required)\nTag to return unique values from.Predicate function that filters tag values.\nDefault is (r) => true.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to return unique tag values from.",
        "required": true
      },
      {
        "name": "tag",
        "description": "(Required)\nTag to return unique values from.",
        "required": true
      },
      {
        "name": "predicate",
        "description": "Predicate function that filters tag values.\nDefault is (r) => true.",
        "required": false
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
        "required": false
      }
    ],
    "examples": null,
    "package": "schema"
  },
  {
    "name": "get",
    "description": "secrets.get() retrieves a secret from the InfluxDB secret store.(Required)\nSecret key to retrieve.",
    "params": [
      {
        "name": "key",
        "description": "(Required)\nSecret key to retrieve.",
        "required": true
      }
    ],
    "examples": null,
    "package": "secrets"
  },
  {
    "name": "endpoint",
    "description": "sensu.endpoint() sends an event\nto the Sensu Events API\nusing data from table rows.sensu.endpoint() is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the object used to generate the POST request. Requires an r parameter.mapFn accepts a table row (r) and returns an object that must include the following fields:For more information, see sensu.event() parameters.(Required)\nBase URL of Sensu API\nwithout a trailing slash.\nExample: http://localhost:8080.(Required)\nSensu API Key.Sensu handlers to execute.\nDefault is [].Sensu namespace.\nDefault is default.Event source.\nDefault is influxdb.Use alphanumeric characters, underscores (_), periods (.), and hyphens (-).\nAll other characters are replaced with an underscore.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nBase URL of Sensu API\nwithout a trailing slash.\nExample: http://localhost:8080.",
        "required": true
      },
      {
        "name": "apiKey",
        "description": "(Required)\nSensu API Key.",
        "required": true
      },
      {
        "name": "handlers",
        "description": "Sensu handlers to execute.\nDefault is [].",
        "required": false
      },
      {
        "name": "namespace",
        "description": "Sensu namespace.\nDefault is default.",
        "required": false
      },
      {
        "name": "entityName",
        "description": "Event source.\nDefault is influxdb.Use alphanumeric characters, underscores (_), periods (.), and hyphens (-).\nAll other characters are replaced with an underscore.",
        "required": false
      }
    ],
    "examples": null,
    "package": "sensu"
  },
  {
    "name": "event",
    "description": "sensu.event() sends a single event to the Sensu Events API.(Required)\nBase URL of Sensu API\nwithout a trailing slash.Example: http://localhost:8080(Required)\nSensu API Key.(Required)\nCheck name.Use alphanumeric characters, underscores (_), periods (.), and hyphens (-).\nAll other characters are replaced with an underscore.(Required)\nEvent text.Mapped to output in the Sensu Events API request.Sensu handlers to execute. Default is [].Event status code that indicates state.\nDefault is 0.Event state.\nDefault is \"passing\" for 0 status and \"failing\" for other statuses.Accepted values:Sensu namespace.\nDefault is \"default\".Event source.\nDefault is influxdb.Use alphanumeric characters, underscores (_), periods (.), and hyphens (-).\nAll other characters are replaced with an underscore.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nBase URL of Sensu API\nwithout a trailing slash.Example: http://localhost:8080",
        "required": true
      },
      {
        "name": "apiKey",
        "description": "(Required)\nSensu API Key.",
        "required": true
      },
      {
        "name": "checkName",
        "description": "(Required)\nCheck name.Use alphanumeric characters, underscores (_), periods (.), and hyphens (-).\nAll other characters are replaced with an underscore.",
        "required": true
      },
      {
        "name": "text",
        "description": "(Required)\nEvent text.Mapped to output in the Sensu Events API request.",
        "required": true
      },
      {
        "name": "handlers",
        "description": "Sensu handlers to execute. Default is [].",
        "required": false
      },
      {
        "name": "status",
        "description": "Event status code that indicates state.\nDefault is 0.",
        "required": false
      },
      {
        "name": "state",
        "description": "Event state.\nDefault is \"passing\" for 0 status and \"failing\" for other statuses.Accepted values:",
        "required": false
      },
      {
        "name": "namespace",
        "description": "Sensu namespace.\nDefault is \"default\".",
        "required": false
      },
      {
        "name": "entityName",
        "description": "Event source.\nDefault is influxdb.Use alphanumeric characters, underscores (_), periods (.), and hyphens (-).\nAll other characters are replaced with an underscore.",
        "required": false
      }
    ],
    "examples": null,
    "package": "sensu"
  },
  {
    "name": "toSensuName",
    "description": "sensu.toSensuName() translates a string value to a Sensu name\nby replacing non-alphanumeric characters ([a-zA-Z0-9_.-]) with underscores (_).(Required)\nString to operate on.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to operate on.",
        "required": true
      }
    ],
    "examples": null,
    "package": "sensu"
  },
  {
    "name": "endpoint",
    "description": "servicenow.endpoint() sends events to ServiceNow using data from input rows.servicenow.endpoint is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the object used to generate the ServiceNow API request. Requires an r parameter.mapFn accepts a table row (r) and returns an object that must include the following properties:For more information, see servicenow.event() parameters.(Required)\nServiceNow web service URL.(Required)\nServiceNow username to use for HTTP BASIC authentication.(Required)\nServiceNow password to use for HTTP BASIC authentication.Source name. Default is \"Flux\".",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nServiceNow web service URL.",
        "required": true
      },
      {
        "name": "username",
        "description": "(Required)\nServiceNow username to use for HTTP BASIC authentication.",
        "required": true
      },
      {
        "name": "password",
        "description": "(Required)\nServiceNow password to use for HTTP BASIC authentication.",
        "required": true
      },
      {
        "name": "source",
        "description": "Source name. Default is \"Flux\".",
        "required": false
      }
    ],
    "examples": null,
    "package": "servicenow"
  },
  {
    "name": "event",
    "description": "servicenow.event() sends an event to ServiceNow.ServiceNow Event API fields are described in\nServiceNow Create Event documentation.(Required)\nServiceNow web service URL.(Required)\nServiceNow username to use for HTTP BASIC authentication.(Required)\nServiceNow password to use for HTTP BASIC authentication.(Required)\nEvent description.(Required)\nSeverity of the event.Supported values:Source name. Default is \"Flux\".Node name or IP address related to the event.\nDefault is an empty string (\"\").Metric type related to the event (for example, CPU).\nDefault is an empty string (\"\").Resource related to the event (for example, CPU-1).\nDefault is an empty string (\"\").Metric name related to the event (for example, usage_idle).\nDefault is an empty string (\"\").Unique identifier of the event (for example, the InfluxDB alert ID).\nDefault is an empty string (\"\").\nIf an empty string, ServiceNow generates a value.Additional information to include with the event.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nServiceNow web service URL.",
        "required": true
      },
      {
        "name": "username",
        "description": "(Required)\nServiceNow username to use for HTTP BASIC authentication.",
        "required": true
      },
      {
        "name": "password",
        "description": "(Required)\nServiceNow password to use for HTTP BASIC authentication.",
        "required": true
      },
      {
        "name": "description",
        "description": "(Required)\nEvent description.",
        "required": true
      },
      {
        "name": "severity",
        "description": "(Required)\nSeverity of the event.Supported values:",
        "required": true
      },
      {
        "name": "source",
        "description": "Source name. Default is \"Flux\".",
        "required": false
      },
      {
        "name": "node",
        "description": "Node name or IP address related to the event.\nDefault is an empty string (\"\").",
        "required": false
      },
      {
        "name": "metricType",
        "description": "Metric type related to the event (for example, CPU).\nDefault is an empty string (\"\").",
        "required": false
      },
      {
        "name": "resource",
        "description": "Resource related to the event (for example, CPU-1).\nDefault is an empty string (\"\").",
        "required": false
      },
      {
        "name": "metricName",
        "description": "Metric name related to the event (for example, usage_idle).\nDefault is an empty string (\"\").",
        "required": false
      },
      {
        "name": "messageKey",
        "description": "Unique identifier of the event (for example, the InfluxDB alert ID).\nDefault is an empty string (\"\").\nIf an empty string, ServiceNow generates a value.",
        "required": false
      },
      {
        "name": "additionalInfo",
        "description": "Additional information to include with the event.",
        "required": false
      }
    ],
    "examples": null,
    "package": "servicenow"
  },
  {
    "name": "set",
    "description": "set() assigns a static column value to each row in the input tables.set() may modify an existing column or add a new column.\nIf the modified column is part of the group key, output tables are regrouped as needed.\nset() can only set string values.(Required)\nLabel of the column to modify or set.(Required)\nString value to set.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "key",
        "description": "(Required)\nLabel of the column to modify or set.",
        "required": true
      },
      {
        "name": "value",
        "description": "(Required)\nString value to set.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "skew",
    "description": "skew() returns the skew of non-null records in each input table as a float.Column to operate on. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "endpoint",
    "description": "slack.endpoint() returns a function that can be used to send a message to Slack per input row.Each output row includes a _sent column that indicates if the message for\nthat row was sent successfully.slack.endpoint() is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the record used to generate the POST request.mapFn accepts a table row (r) and returns a record that must include the\nfollowing properties:Slack API URL. Default is https://slack.com/api/chat.postMessage.If using the Slack webhook API, this URL is provided ine Slack webhook setup process.Slack API token. Default is \"\".If using the Slack Webhook API, a token is not required.",
    "params": [
      {
        "name": "url",
        "description": "Slack API URL. Default is https://slack.com/api/chat.postMessage.If using the Slack webhook API, this URL is provided ine Slack webhook setup process.",
        "required": false
      },
      {
        "name": "token",
        "description": "Slack API token. Default is \"\".If using the Slack Webhook API, a token is not required.",
        "required": false
      }
    ],
    "examples": null,
    "package": "slack"
  },
  {
    "name": "message",
    "description": "slack.message() sends a single message to a Slack channel and returns the HTTP\nresponse code of the request.The function works with either with the chat.postMessage API or with a Slack webhook.Slack API URL.\nDefault is https://slack.com/api/chat.postMessage.If using the Slack webhook API, this URL is provided in the Slack webhook setup process.Slack API token. Default is \"\".If using the Slack Webhook API, a token is not required.(Required)\nSlack channel or user to send the message to.(Required)\nMessage text.(Required)\nSlack message color.Valid values:",
    "params": [
      {
        "name": "url",
        "description": "Slack API URL.\nDefault is https://slack.com/api/chat.postMessage.If using the Slack webhook API, this URL is provided in the Slack webhook setup process.",
        "required": false
      },
      {
        "name": "token",
        "description": "Slack API token. Default is \"\".If using the Slack Webhook API, a token is not required.",
        "required": false
      },
      {
        "name": "channel",
        "description": "(Required)\nSlack channel or user to send the message to.",
        "required": true
      },
      {
        "name": "text",
        "description": "(Required)\nMessage text.",
        "required": true
      },
      {
        "name": "color",
        "description": "(Required)\nSlack message color.Valid values:",
        "required": true
      }
    ],
    "examples": null,
    "package": "slack"
  },
  {
    "name": "validateColorString",
    "description": "slack.validateColorString() ensures a string contains a valid hex color code.(Required)\nHex color code.",
    "params": [
      {
        "name": "color",
        "description": "(Required)\nHex color code.",
        "required": true
      }
    ],
    "examples": null,
    "package": "slack"
  },
  {
    "name": "from",
    "description": "socket.from() returns data from a socket connection and outputs a stream of tables\ngiven a specified decoder.The function produces a single table for everything that it receives from the\nstart to the end of the connection.(Required)\nURL to return data from.Supported URL schemes:Decoder to use to parse returned data into a stream of tables.Supported decoders:",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nURL to return data from.Supported URL schemes:",
        "required": true
      },
      {
        "name": "decoder",
        "description": "Decoder to use to parse returned data into a stream of tables.Supported decoders:",
        "required": false
      }
    ],
    "examples": null,
    "package": "socket"
  },
  {
    "name": "sort",
    "description": "sort() orders rows in each intput table based on values in specified columns.One output table is produced for each input table.\nOutput tables have the same schema as their corresponding input tables.When desc: false, null values are last in the sort order.\nWhen desc: true, null values are first in the sort order.List of columns to sort by. Default is [\"_value\"].Sort precedence is determined by list order (left to right).Sort results in descending order. Default is false.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "columns",
        "description": "List of columns to sort by. Default is [\"_value\"].Sort precedence is determined by list order (left to right).",
        "required": false
      },
      {
        "name": "desc",
        "description": "Sort results in descending order. Default is false.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "spread",
    "description": "spread() returns the difference between the minimum and maximum values in a\nspecified column.Column to operate on. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "from",
    "description": "sql.from() retrieves data from a SQL data source.(Required)\nDriver to use to connect to the SQL database.Supported drivers:(Required)\nData source name (DNS) or connection string used to connect\nto the SQL database.(Required)\nQuery to run against the SQL database.",
    "params": [
      {
        "name": "driverName",
        "description": "(Required)\nDriver to use to connect to the SQL database.Supported drivers:",
        "required": true
      },
      {
        "name": "dataSourceName",
        "description": "(Required)\nData source name (DNS) or connection string used to connect\nto the SQL database.",
        "required": true
      },
      {
        "name": "query",
        "description": "(Required)\nQuery to run against the SQL database.",
        "required": true
      }
    ],
    "examples": null,
    "package": "sql"
  },
  {
    "name": "to",
    "description": "sql.to() writes data to an SQL database.(Required)\nDriver used to connect to the SQL database.Supported drivers:(Required)\nData source name (DNS) or connection string used\nto connect to the SQL database.(Required)\nDestination table.Number of parameters or columns that can be queued within each\ncall to Exec. Default is 10000.If writing to SQLite database, set the batchSize to 999 or less.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "driverName",
        "description": "(Required)\nDriver used to connect to the SQL database.Supported drivers:",
        "required": true
      },
      {
        "name": "dataSourceName",
        "description": "(Required)\nData source name (DNS) or connection string used\nto connect to the SQL database.",
        "required": true
      },
      {
        "name": "table",
        "description": "(Required)\nDestination table.",
        "required": true
      },
      {
        "name": "batchSize",
        "description": "Number of parameters or columns that can be queued within each\ncall to Exec. Default is 10000.If writing to SQLite database, set the batchSize to 999 or less.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "sql"
  },
  {
    "name": "stateCount",
    "description": "stateCount() returns the number of consecutive rows in a given state.The state is defined by the fn predicate function. For each consecutive\nrecord that evaluates to true, the state count is incremented. When a record\nevaluates to false, the value is set to -1 and the state count is reset.\nIf the record generates an error during evaluation, the point is discarded,\nand does not affect the state count.\nThe state count is added as an additional column to each record.(Required)\nPredicate function that identifies the state of a record.Column to store the state count in. Default is stateCount.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "fn",
        "description": "(Required)\nPredicate function that identifies the state of a record.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to store the state count in. Default is stateCount.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "stateDuration",
    "description": "stateDuration() returns the cumulative duration of a given state.The state is defined by the fn predicate function. For each consecutive\nrecord that evaluates to true, the state duration is incremented by the\nduration of time between records using the specified unit. When a record\nevaluates to false, the value is set to -1 and the state duration is reset.\nIf the record generates an error during evaluation, the point is discarded,\nand does not affect the state duration.The state duration is added as an additional column to each record.\nThe duration is represented as an integer in the units specified.Note: As the first point in the given state has no previous point, its\nstate duration will be 0.(Required)\nPredicate function that identifies the state of a record.Column to store the state duration in. Default is stateDuration.Time column to use to calculate elapsed time between rows.\nDefault is _time.Unit of time to use to increment state duration. Default is 1s (seconds).Example units:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "fn",
        "description": "(Required)\nPredicate function that identifies the state of a record.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to store the state duration in. Default is stateDuration.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Time column to use to calculate elapsed time between rows.\nDefault is _time.",
        "required": false
      },
      {
        "name": "unit",
        "description": "Unit of time to use to increment state duration. Default is 1s (seconds).Example units:",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "stateTracking",
    "description": "stateTracking() returns the cumulative count and duration of consecutive\nrows that match a predicate function that defines a state.To return the cumulative count of consecutive rows that match the predicate,\ninclude the countColumn parameter.\nTo return the cumulative duration of consecutive rows that match the predicate,\ninclude the durationColumn parameter.\nRows that do not match the predicate function fn return -1 in the count\nand duration columns.(Required)\nPredicate function to determine state.Column to store state count in.If not defined, stateTracking() does not return the state count.Column to store state duration in.If not defined, stateTracking() does not return the state duration.Unit of time to report state duration in. Default is 1s.Column with time values used to calculate state duration.\nDefault is _time.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "fn",
        "description": "(Required)\nPredicate function to determine state.",
        "required": true
      },
      {
        "name": "countColumn",
        "description": "Column to store state count in.If not defined, stateTracking() does not return the state count.",
        "required": false
      },
      {
        "name": "durationColumn",
        "description": "Column to store state duration in.If not defined, stateTracking() does not return the state duration.",
        "required": false
      },
      {
        "name": "durationUnit",
        "description": "Unit of time to report state duration in. Default is 1s.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Column with time values used to calculate state duration.\nDefault is _time.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "linearRegression",
    "description": "statsmodels.linearRegression() performs a linear regression.It calculates and returns \u0177 (y_hat),\nand residual sum of errors (rse).\nOutput data includes the following columns:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "statsmodels"
  },
  {
    "name": "stddev",
    "description": "stddev() returns the standard deviation of non-null values in a specified column.Column to operate on. Default is _value.Standard deviation mode or type of standard deviation to calculate.\nDefault is sample.Availble modes:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "mode",
        "description": "Standard deviation mode or type of standard deviation to calculate.\nDefault is sample.Availble modes:",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "string",
    "description": "string() converts a value to a string type.(Required)\nValue to convert.If converting the _value column to string types, use toString().\nIf converting columns other than _value, use map() to iterate over each\nrow and string() to covert a column value to a string type.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "compare",
    "description": "strings.compare() compares the lexicographical order of two strings.(Required)\nString value to compare.(Required)\nString value to compare against.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to compare.",
        "required": true
      },
      {
        "name": "t",
        "description": "(Required)\nString value to compare against.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "containsAny",
    "description": "strings.containsAny() reports whether a specified string contains characters from another string.(Required)\nString value to search.(Required)\nCharacters to search for.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "chars",
        "description": "(Required)\nCharacters to search for.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "containsStr",
    "description": "strings.containsStr() reports whether a string contains a specified substring.(Required)\nString value to search.(Required)\nSubstring value to search for.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "substr",
        "description": "(Required)\nSubstring value to search for.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "countStr",
    "description": "strings.countStr() counts the number of non-overlapping instances of a substring appears in a string.(Required)\nString value to search.(Required)\nSubstring to count occurences of.The function counts only non-overlapping instances of substr.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "substr",
        "description": "(Required)\nSubstring to count occurences of.The function counts only non-overlapping instances of substr.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "equalFold",
    "description": "strings.equalFold() reports whether two UTF-8 strings are equal under Unicode case-folding.(Required)\nString value to compare.(Required)\nString value to compare against.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to compare.",
        "required": true
      },
      {
        "name": "t",
        "description": "(Required)\nString value to compare against.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "hasPrefix",
    "description": "strings.hasPrefix() indicates if a string begins with a specified prefix.(Required)\nString value to search.(Required)\nPrefix to search for.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "prefix",
        "description": "(Required)\nPrefix to search for.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "hasSuffix",
    "description": "strings.hasSuffix() indicates if a string ends with a specified suffix.(Required)\nString value to search.(Required)\nSuffix to search for.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "suffix",
        "description": "(Required)\nSuffix to search for.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "index",
    "description": "strings.index() returns the index of the first instance of a substring in a string.\nIf the substring is not present, it returns -1.(Required)\nString value to search.(Required)\nSubstring to search for.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "substr",
        "description": "(Required)\nSubstring to search for.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "indexAny",
    "description": "strings.indexAny() returns the index of the first instance of specified characters in a string.\nIf none of the specified characters are present, it returns -1.(Required)\nString value to search.(Required)\nCharacters to search for.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "chars",
        "description": "(Required)\nCharacters to search for.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "isDigit",
    "description": "strings.isDigit() tests if a single-character string is a digit (0-9).(Required)\nSingle-character string to test.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nSingle-character string to test.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "isLetter",
    "description": "strings.isLetter() tests if a single character string is a letter (a-z, A-Z).(Required)\nSingle-character string to test.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nSingle-character string to test.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "isLower",
    "description": "strings.isLower() tests if a single-character string is lowercase.(Required)\nSingle-character string value to test.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nSingle-character string value to test.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "isUpper",
    "description": "strings.isUpper() tests if a single character string is uppercase.(Required)\nSingle-character string value to test.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nSingle-character string value to test.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "joinStr",
    "description": "strings.joinStr() concatenates elements of a string array into a single string using a specified separator.(Required)\nArray of strings to concatenate.(Required)\nSeparator to use in the concatenated value.",
    "params": [
      {
        "name": "arr",
        "description": "(Required)\nArray of strings to concatenate.",
        "required": true
      },
      {
        "name": "v",
        "description": "(Required)\nSeparator to use in the concatenated value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "lastIndex",
    "description": "strings.lastIndex() returns the index of the last instance of a substring in a string.\nIf the substring is not present, the function returns -1.(Required)\nString value to search.(Required)\nSubstring to search for.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "substr",
        "description": "(Required)\nSubstring to search for.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "lastIndexAny",
    "description": "strings.lastIndexAny() returns the index of the last instance of any specified\ncharacters in a string.\nIf none of the specified characters are present, the function returns -1.(Required)\nString value to search.(Required)\nCharacters to search for.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "chars",
        "description": "(Required)\nCharacters to search for.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "repeat",
    "description": "strings.repeat() returns a string consisting of i copies of a specified string.(Required)\nString value to repeat.(Required)\nNumber of times to repeat v.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to repeat.",
        "required": true
      },
      {
        "name": "i",
        "description": "(Required)\nNumber of times to repeat v.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "replace",
    "description": "strings.replace() replaces the first i non-overlapping instances of a substring with\na specified replacement.(Required)\nString value to search.(Required)\nSubstring value to replace.(Required)\nReplacement for i instances of t.(Required)\nNumber of non-overlapping t matches to replace.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "t",
        "description": "(Required)\nSubstring value to replace.",
        "required": true
      },
      {
        "name": "u",
        "description": "(Required)\nReplacement for i instances of t.",
        "required": true
      },
      {
        "name": "i",
        "description": "(Required)\nNumber of non-overlapping t matches to replace.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "replaceAll",
    "description": "strings.replaceAll() replaces all non-overlapping instances of a substring with a specified replacement.(Required)\nString value to search.(Required)\nSubstring to replace.(Required)\nReplacement for all instances of t.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search.",
        "required": true
      },
      {
        "name": "t",
        "description": "(Required)\nSubstring to replace.",
        "required": true
      },
      {
        "name": "u",
        "description": "(Required)\nReplacement for all instances of t.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "split",
    "description": "strings.split() splits a string on a specified separator and returns an array of substrings.(Required)\nString value to split.(Required)\nString value that acts as the separator.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to split.",
        "required": true
      },
      {
        "name": "t",
        "description": "(Required)\nString value that acts as the separator.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "splitAfter",
    "description": "strings.splitAfter() splits a string after a specified separator and returns an array of substrings.\nSplit substrings include the separator, t.(Required)\nString value to split.(Required)\nString value that acts as the separator.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to split.",
        "required": true
      },
      {
        "name": "t",
        "description": "(Required)\nString value that acts as the separator.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "splitAfterN",
    "description": "strings.splitAfterN() splits a string after a specified separator and returns an array of i substrings.\nSplit substrings include the separator, t.(Required)\nString value to split.(Required)\nString value that acts as the separator.(Required)\nMaximum number of split substrings to return.-1 returns all matching substrings.\nThe last substring is the unsplit remainder.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to split.",
        "required": true
      },
      {
        "name": "t",
        "description": "(Required)\nString value that acts as the separator.",
        "required": true
      },
      {
        "name": "i",
        "description": "(Required)\nMaximum number of split substrings to return.-1 returns all matching substrings.\nThe last substring is the unsplit remainder.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "splitN",
    "description": "strings.splitN() splits a string on a specified separator and returns an array of i substrings.(Required)\nString value to split.(Required)\nString value that acts as the separator.(Required)\nMaximum number of split substrings to return.-1 returns all matching substrings.\nThe last substring is the unsplit remainder.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to split.",
        "required": true
      },
      {
        "name": "t",
        "description": "(Required)\nString value that acts as the separator.",
        "required": true
      },
      {
        "name": "i",
        "description": "(Required)\nMaximum number of split substrings to return.-1 returns all matching substrings.\nThe last substring is the unsplit remainder.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "strlen",
    "description": "strings.strlen() returns the length of a string. String length is determined by the number of UTF code points a string contains.(Required)\nString value to measure.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to measure.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "substring",
    "description": "strings.substring() returns a substring based on start and end parameters. These parameters are represent indices of UTF code points in the string.When start or end are past the bounds of the string, respecitvely the start or end of the string\nis assumed. When end is less than or equal to start an empty string is returned.(Required)\nString value to search for.(Required)\nStarting inclusive index of the substring.(Required)\nEnding exclusive index of the substring.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to search for.",
        "required": true
      },
      {
        "name": "start",
        "description": "(Required)\nStarting inclusive index of the substring.",
        "required": true
      },
      {
        "name": "end",
        "description": "(Required)\nEnding exclusive index of the substring.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "title",
    "description": "strings.title() converts a string to title case.(Required)\nString value to convert.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "toLower",
    "description": "strings.toLower() converts a string to lowercase.(Required)\nString value to convert.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "toTitle",
    "description": "strings.toTitle() converts all characters in a string to title case.The results of toTitle() and toUpper() are often the same, however the\ndifference is visible when using special characters:(Required)\nString value to convert.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "toUpper",
    "description": "strings.toUpper() converts a string to uppercase.The results of toUpper() and toTitle() are often the same, however the\ndifference is visible when using special characters:(Required)\nString value to convert.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString value to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "trim",
    "description": "strings.trim() removes leading and trailing characters specified in the cutset from a string.(Required)\nString to remove characters from.(Required)\nLeading and trailing characters to remove from the string.Only characters that match the cutset string exactly are trimmed.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to remove characters from.",
        "required": true
      },
      {
        "name": "cutset",
        "description": "(Required)\nLeading and trailing characters to remove from the string.Only characters that match the cutset string exactly are trimmed.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "trimLeft",
    "description": "strings.trimLeft() removes specified leading characters from a string.(Required)\nString to to remove characters from.(Required)\nLeading characters to trim from the string.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to to remove characters from.",
        "required": true
      },
      {
        "name": "cutset",
        "description": "(Required)\nLeading characters to trim from the string.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "trimPrefix",
    "description": "strings.trimPrefix() removes a prefix from a string. Strings that do not start with the prefix are returned unchanged.(Required)\nString to trim.(Required)\nPrefix to remove.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to trim.",
        "required": true
      },
      {
        "name": "prefix",
        "description": "(Required)\nPrefix to remove.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "trimRight",
    "description": "strings.trimRight() removes trailing characters specified in the cutset from a string.(Required)\nString to to remove characters from.(Required)\nTrailing characters to trim from the string.Only characters that match the cutset string exactly are trimmed.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to to remove characters from.",
        "required": true
      },
      {
        "name": "cutset",
        "description": "(Required)\nTrailing characters to trim from the string.Only characters that match the cutset string exactly are trimmed.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "trimSpace",
    "description": "strings.trimSpace() removes leading and trailing spaces from a string.(Required)\nString to remove spaces from.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to remove spaces from.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "trimSuffix",
    "description": "strings.trimSuffix() removes a suffix from a string.Strings that do not end with the suffix are returned unchanged.(Required)\nString to trim.(Required)\nSuffix to remove.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nString to trim.",
        "required": true
      },
      {
        "name": "suffix",
        "description": "(Required)\nSuffix to remove.",
        "required": true
      }
    ],
    "examples": null,
    "package": "strings"
  },
  {
    "name": "sum",
    "description": "sum() returns the sum of non-null values in a specified column.Column to operate on. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "time",
    "description": "system.time() returns the current system time.",
    "params": [],
    "examples": null,
    "package": "system"
  },
  {
    "name": "fill",
    "description": "table.fill() adds a single row to empty tables in a stream of tables.Columns that are in the group key are filled with the column value defined in the group key.\nColumns not in the group key are filled with a null value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "table"
  },
  {
    "name": "tableFind",
    "description": "tableFind() extracts the first table in a stream with group key values that\nmatch a specified predicate.(Required)\nPredicate function to evaluate input table group keys.tableFind() returns the first table that resolves as true.\nThe predicate function requires a key argument that represents each input\ntable\u2019s group key as a record.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "fn",
        "description": "(Required)\nPredicate function to evaluate input table group keys.tableFind() returns the first table that resolves as true.\nThe predicate function requires a key argument that represents each input\ntable\u2019s group key as a record.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "tail",
    "description": "tail() limits each output table to the last n rows.tail() produces one output table for each input table.\nEach output table contains the last n records before the offset.\nIf the input table has less than offset + n records, tail() outputs all\nrecords before the offset.(Required)\nMaximum number of rows to output.Number of records to skip at the end of a table table before\nlimiting to n. Default is 0.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nMaximum number of rows to output.",
        "required": true
      },
      {
        "name": "offset",
        "description": "Number of records to skip at the end of a table table before\nlimiting to n. Default is 0.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "lastSuccess",
    "description": "tasks.lastSuccess() returns the time of the last successful run of the InfluxDB task\nor the value of the orTime parameter if the task has never successfully run.(Required)\nDefualt time value returned if the task has never successfully run.",
    "params": [
      {
        "name": "orTime",
        "description": "(Required)\nDefualt time value returned if the task has never successfully run.",
        "required": true
      }
    ],
    "examples": null,
    "package": "tasks"
  },
  {
    "name": "endpoint",
    "description": "teams.endpoint() sends a message to a Microsoft Teams channel using data from table rows.teams.endpoint is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the object used to generate the POST request. Requires an r parameter.mapFn accepts a table row (r) and returns an object that must include the following fields:For more information, see teams.message parameters.(Required)\nIncoming webhook URL.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nIncoming webhook URL.",
        "required": true
      }
    ],
    "examples": null,
    "package": "teams"
  },
  {
    "name": "message",
    "description": "teams.message() sends a single message to a Microsoft Teams channel using an\nincoming webhook.(Required)\nIncoming webhook URL.(Required)\nMessage card title.(Required)\nMessage card text.Message card summary.\nDefault is \"\".If no summary is provided, Flux generates the summary from the message text.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nIncoming webhook URL.",
        "required": true
      },
      {
        "name": "title",
        "description": "(Required)\nMessage card title.",
        "required": true
      },
      {
        "name": "text",
        "description": "(Required)\nMessage card text.",
        "required": true
      },
      {
        "name": "summary",
        "description": "Message card summary.\nDefault is \"\".If no summary is provided, Flux generates the summary from the message text.",
        "required": false
      }
    ],
    "examples": null,
    "package": "teams"
  },
  {
    "name": "endpoint",
    "description": "telegram.endpoint() sends a message to a Telegram channel using data from table rows.telegram.endpoint is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the object used to generate the POST request. Requires an r parameter.mapFn accepts a table row (r) and returns an object that must include the following fields:For more information, see telegram.message() parameters.See telegram.message parameters for more information.URL of the Telegram bot endpoint. Default is https://api.telegram.org/bot.(Required)\nTelegram bot token.Parse mode\nof the message text.\nDefault is MarkdownV2.Disable preview of web links in the sent message.\nDefault is false.",
    "params": [
      {
        "name": "url",
        "description": "URL of the Telegram bot endpoint. Default is https://api.telegram.org/bot.",
        "required": false
      },
      {
        "name": "token",
        "description": "(Required)\nTelegram bot token.",
        "required": true
      },
      {
        "name": "parseMode",
        "description": "Parse mode\nof the message text.\nDefault is MarkdownV2.",
        "required": false
      },
      {
        "name": "disableWebPagePreview",
        "description": "Disable preview of web links in the sent message.\nDefault is false.",
        "required": false
      }
    ],
    "examples": null,
    "package": "telegram"
  },
  {
    "name": "message",
    "description": "telegram.message() sends a single message to a Telegram channel\nusing the sendMessage method of the Telegram Bot API.URL of the Telegram bot endpoint. Default is https://api.telegram.org/bot.(Required)\nTelegram bot token.(Required)\nTelegram channel ID.(Required)\nMessage text.Parse mode\nof the message text.\nDefault is MarkdownV2.Disable preview of web links in the sent message.\nDefault is false.Send message silently.\nDefault is true.",
    "params": [
      {
        "name": "url",
        "description": "URL of the Telegram bot endpoint. Default is https://api.telegram.org/bot.",
        "required": false
      },
      {
        "name": "token",
        "description": "(Required)\nTelegram bot token.",
        "required": true
      },
      {
        "name": "channel",
        "description": "(Required)\nTelegram channel ID.",
        "required": true
      },
      {
        "name": "text",
        "description": "(Required)\nMessage text.",
        "required": true
      },
      {
        "name": "parseMode",
        "description": "Parse mode\nof the message text.\nDefault is MarkdownV2.",
        "required": false
      },
      {
        "name": "disableWebPagePreview",
        "description": "Disable preview of web links in the sent message.\nDefault is false.",
        "required": false
      },
      {
        "name": "silent",
        "description": "Send message silently.\nDefault is true.",
        "required": false
      }
    ],
    "examples": null,
    "package": "telegram"
  },
  {
    "name": "assertEmpty",
    "description": "testing.assertEmpty() tests if an input stream is empty. If not empty, the function returns an error.assertEmpty can be used to perform in-line tests in a query.Input data. Default is piped-forward data (<-).This example uses testing.diff() to output the difference between two streams of tables.\ntesting.assertEmpty() checks to see if the difference is empty.",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "testing"
  },
  {
    "name": "assertEquals",
    "description": "testing.assertEquals() tests whether two streams of tables are identical.If equal, the function outputs the tested data stream unchanged.\nIf unequal, the function returns an error.assertEquals can be used to perform in-line tests in a query.(Required)\nUnique assertion name.Data to test. Default is piped-forward data (<-).(Required)\nExpected data to test against.",
    "params": [
      {
        "name": "name",
        "description": "(Required)\nUnique assertion name.",
        "required": true
      },
      {
        "name": "got",
        "description": "Data to test. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "want",
        "description": "(Required)\nExpected data to test against.",
        "required": true
      }
    ],
    "examples": null,
    "package": "testing"
  },
  {
    "name": "assertEqualValues",
    "description": "testing.assertEqualValues() tests whether two values are equal.(Required)\nValue to test.(Required)\nExpected value to test against.",
    "params": [
      {
        "name": "got",
        "description": "(Required)\nValue to test.",
        "required": true
      },
      {
        "name": "want",
        "description": "(Required)\nExpected value to test against.",
        "required": true
      }
    ],
    "examples": null,
    "package": "testing"
  },
  {
    "name": "assertMatches",
    "description": "testing.assertMatches() tests whether a string matches a given regex.(Required)\nValue to test.(Required)\nRegex to test against.",
    "params": [
      {
        "name": "got",
        "description": "(Required)\nValue to test.",
        "required": true
      },
      {
        "name": "want",
        "description": "(Required)\nRegex to test against.",
        "required": true
      }
    ],
    "examples": null,
    "package": "testing"
  },
  {
    "name": "diff",
    "description": "testing.diff() produces a diff between two streams.The function matches tables from each stream based on group keys.\nFor each matched table, it produces a diff.\nAny added or removed rows are added to the table as a row.\nAn additional string column with the name diff is created and contains a\n- if the row was present in the got table and not in the want table or\n+ if the opposite is true.diff() function emits at least one row if the tables are\ndifferent and no rows if the tables are the same.\nThe exact diff produced may change.\ndiff() can be used to perform in-line diffs in a query.Stream containing data to test. Default is piped-forward data (<-).(Required)\nStream that contains data to test against.Specify how far apart two float values can be, but still considered equal. Defaults to 0.000000001.Include detailed differences in output. Default is false.Consider NaN float values equal. Default is false.",
    "params": [
      {
        "name": "got",
        "description": "Stream containing data to test. Default is piped-forward data (<-).",
        "required": false
      },
      {
        "name": "want",
        "description": "(Required)\nStream that contains data to test against.",
        "required": true
      },
      {
        "name": "epsilon",
        "description": "Specify how far apart two float values can be, but still considered equal. Defaults to 0.000000001.",
        "required": false
      },
      {
        "name": "verbose",
        "description": "Include detailed differences in output. Default is false.",
        "required": false
      },
      {
        "name": "nansEqual",
        "description": "Consider NaN float values equal. Default is false.",
        "required": false
      }
    ],
    "examples": null,
    "package": "testing"
  },
  {
    "name": "load",
    "description": "testing.load() loads test data from a stream of tables.Input data. Default is piped-forward data (<-).The following test uses array.from() to create two streams of tables to\ncompare in the test.",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "testing"
  },
  {
    "name": "shouldError",
    "description": "testing.shouldError() calls a function that catches any error and checks that the error matches the expected value.(Required)\nFunction to call.(Required)\nRegular expression to match the expected error.",
    "params": [
      {
        "name": "fn",
        "description": "(Required)\nFunction to call.",
        "required": true
      },
      {
        "name": "want",
        "description": "(Required)\nRegular expression to match the expected error.",
        "required": true
      }
    ],
    "examples": null,
    "package": "testing"
  },
  {
    "name": "shouldErrorWithCode",
    "description": "testing.shouldErrorWithCode() calls a function that catches any error and checks that the error matches the expected value.(Required)\nFunction to call.(Required)\nRegular expression to match the expected error.(Required)\nWhich flux error code to expect",
    "params": [
      {
        "name": "fn",
        "description": "(Required)\nFunction to call.",
        "required": true
      },
      {
        "name": "want",
        "description": "(Required)\nRegular expression to match the expected error.",
        "required": true
      },
      {
        "name": "code",
        "description": "(Required)\nWhich flux error code to expect",
        "required": true
      }
    ],
    "examples": null,
    "package": "testing"
  },
  {
    "name": "fail",
    "description": "testutil.fail() causes the current script to fail.",
    "params": [],
    "examples": null,
    "package": "testutil"
  },
  {
    "name": "makeAny",
    "description": "testutil.makeAny() constructs any value based on a type description as a string.(Required)\nDescription of the type to create.",
    "params": [
      {
        "name": "typ",
        "description": "(Required)\nDescription of the type to create.",
        "required": true
      }
    ],
    "examples": null,
    "package": "testutil"
  },
  {
    "name": "makeRecord",
    "description": "testutil.makeRecord() is the identity function, but breaks the type connection from input to output.(Required)\nRecord value.",
    "params": [
      {
        "name": "o",
        "description": "(Required)\nRecord value.",
        "required": true
      }
    ],
    "examples": null,
    "package": "testutil"
  },
  {
    "name": "yield",
    "description": "testutil.yield() is the identity function.Any value.",
    "params": [{ "name": "v", "description": "Any value.", "required": false }],
    "examples": null,
    "package": "testutil"
  },
  {
    "name": "alert",
    "description": "tickscript.alert() identifies events of varying severity levels\nand writes them to the statuses measurement in the InfluxDB _monitoring\nsystem bucket.This function is comparable to\nTICKscript alert().(Required)\nInfluxDB check data.\nSee tickscript.defineCheck().Function that returns the InfluxDB check ID provided by the check record.\nDefault is (r) => \"${r._check_id}\".Function to return the InfluxDB check details using data from input rows.\nDefault is (r) => \"\".Function to return the InfluxDB check message using data from input rows.\nDefault is (r) => \"Threshold Check: ${r._check_name} is: ${r._level}\".Predicate function to determine crit status. Default is (r) => false.Predicate function to determine warn status. Default is (r) => false.Predicate function to determine info status. Default is (r) => false.Predicate function to determine ok status. Default is (r) => true.Check topic. Default is \"\".Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "check",
        "description": "(Required)\nInfluxDB check data.\nSee tickscript.defineCheck().",
        "required": true
      },
      {
        "name": "id",
        "description": "Function that returns the InfluxDB check ID provided by the check record.\nDefault is (r) => \"${r._check_id}\".",
        "required": false
      },
      {
        "name": "details",
        "description": "Function to return the InfluxDB check details using data from input rows.\nDefault is (r) => \"\".",
        "required": false
      },
      {
        "name": "message",
        "description": "Function to return the InfluxDB check message using data from input rows.\nDefault is (r) => \"Threshold Check: ${r._check_name} is: ${r._level}\".",
        "required": false
      },
      {
        "name": "crit",
        "description": "Predicate function to determine crit status. Default is (r) => false.",
        "required": false
      },
      {
        "name": "warn",
        "description": "Predicate function to determine warn status. Default is (r) => false.",
        "required": false
      },
      {
        "name": "info",
        "description": "Predicate function to determine info status. Default is (r) => false.",
        "required": false
      },
      {
        "name": "ok",
        "description": "Predicate function to determine ok status. Default is (r) => true.",
        "required": false
      },
      {
        "name": "topic",
        "description": "Check topic. Default is \"\".",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "tickscript"
  },
  {
    "name": "compute",
    "description": "tickscript.compute() is an alias for tickscript.select() that changes a column\u2019s name and\noptionally applies an aggregate or selector function.(Required)\nNew column name.Column to operate on. Default is _value.Aggregate or selector function to apply.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "as",
        "description": "(Required)\nNew column name.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "fn",
        "description": "Aggregate or selector function to apply.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "tickscript"
  },
  {
    "name": "deadman",
    "description": "tickscript.deadman() detects low data throughput and writes a point with a critical status to\nthe InfluxDB _monitoring system bucket.For each input table containing a number of rows less than or equal to the specified threshold,\nthe function assigns a crit value to the _level column.This function is comparable to Kapacitor AlertNode deadman.(Required)\nInfluxDB check data. See tickscript.defineCheck().(Required)\nMeasurement name. Should match the queried measurement.Count threshold. Default is 0.The function assigns a crit status to input tables with a number of rows less than or equal to the threshold.Function that returns the InfluxDB check ID provided by the check record.\nDefault is (r) => \"${r._check_id}\".Function that returns the InfluxDB check message using data from input rows.\nDefault is (r) => \"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\").Check topic. Default is \"\".Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "check",
        "description": "(Required)\nInfluxDB check data. See tickscript.defineCheck().",
        "required": true
      },
      {
        "name": "measurement",
        "description": "(Required)\nMeasurement name. Should match the queried measurement.",
        "required": true
      },
      {
        "name": "threshold",
        "description": "Count threshold. Default is 0.The function assigns a crit status to input tables with a number of rows less than or equal to the threshold.",
        "required": false
      },
      {
        "name": "id",
        "description": "Function that returns the InfluxDB check ID provided by the check record.\nDefault is (r) => \"${r._check_id}\".",
        "required": false
      },
      {
        "name": "message",
        "description": "Function that returns the InfluxDB check message using data from input rows.\nDefault is (r) => \"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\").",
        "required": false
      },
      {
        "name": "topic",
        "description": "Check topic. Default is \"\".",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "tickscript"
  },
  {
    "name": "defineCheck",
    "description": "tickscript.defineCheck() creates custom check data required by alert() and deadman().(Required)\nInfluxDB check ID.(Required)\nInfluxDB check name.InfluxDB check type. Default is custom.Valid values:",
    "params": [
      {
        "name": "id",
        "description": "(Required)\nInfluxDB check ID.",
        "required": true
      },
      {
        "name": "name",
        "description": "(Required)\nInfluxDB check name.",
        "required": true
      },
      {
        "name": "type",
        "description": "InfluxDB check type. Default is custom.Valid values:",
        "required": false
      }
    ],
    "examples": null,
    "package": "tickscript"
  },
  {
    "name": "groupBy",
    "description": "tickscript.groupBy() groups results by the _measurement column and other specified columns.This function is comparable to Kapacitor QueryNode .groupBy.Note: To group by time intervals, use window() or tickscript.selectWindow().(Required)\nList of columns to group by.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "columns",
        "description": "(Required)\nList of columns to group by.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "tickscript"
  },
  {
    "name": "join",
    "description": "tickscript.join() merges two input streams into a single output stream\nbased on specified columns with equal values and appends a new measurement name.This function is comparable to Kapacitor JoinNode.(Required)\nMap of two streams to join.List of columns to join on. Default is [\"_time\"].(Required)\nMeasurement name to use in results.",
    "params": [
      {
        "name": "tables",
        "description": "(Required)\nMap of two streams to join.",
        "required": true
      },
      {
        "name": "on",
        "description": "List of columns to join on. Default is [\"_time\"].",
        "required": false
      },
      {
        "name": "measurement",
        "description": "(Required)\nMeasurement name to use in results.",
        "required": true
      }
    ],
    "examples": null,
    "package": "tickscript"
  },
  {
    "name": "select",
    "description": "tickscript.select() changes a column\u2019s name and optionally applies an aggregate or selector\nfunction to values in the column.tickscript.select() is a helper function meant to replicate TICKscript operations like the following:Column to operate on. Default is _value.Aggregate or selector function to apply.(Required)\nNew column name.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "fn",
        "description": "Aggregate or selector function to apply.",
        "required": false
      },
      {
        "name": "as",
        "description": "(Required)\nNew column name.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "tickscript"
  },
  {
    "name": "selectWindow",
    "description": "tickscript.selectWindow() changes a column\u2019s name, windows rows by time, and then applies an\naggregate or selector function the specified column for each window of time.tickscript.selectWindow is a helper function meant to replicate TICKscript operations like the following:Column to operate on. Default is _value.(Required)\nAggregate or selector function to apply.(Required)\nNew column name.(Required)\nDuration of windows.(Required)\nDefault fill value for null values in column.\nMust be the same data type as column.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "fn",
        "description": "(Required)\nAggregate or selector function to apply.",
        "required": true
      },
      {
        "name": "as",
        "description": "(Required)\nNew column name.",
        "required": true
      },
      {
        "name": "every",
        "description": "(Required)\nDuration of windows.",
        "required": true
      },
      {
        "name": "defaultValue",
        "description": "(Required)\nDefault fill value for null values in column.\nMust be the same data type as column.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "tickscript"
  },
  {
    "name": "time",
    "description": "time() converts a value to a time type.(Required)\nValue to convert.Strings must be valid RFC3339 timestamps.\nInteger and unsigned integer values are parsed as nanosecond epoch timestamps.If converting the _value column to time types, use toTime().\nIf converting columns other than _value, use map() to iterate over each\nrow and time() to covert a column value to a time type.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert.Strings must be valid RFC3339 timestamps.\nInteger and unsigned integer values are parsed as nanosecond epoch timestamps.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "timedMovingAverage",
    "description": "timedMovingAverage() returns the mean of values in a defined time range at a\nspecified frequency.For each row in a table, timedMovingAverage() returns the average of the\ncurrent value and all row values in the previous period (duration).\nIt returns moving averages at a frequency defined by the every parameter.every and period parameters support all valid duration units, including\ncalendar months (1mo) and years (1y).When aggregating by week (1w), weeks are determined using the Unix epoch\n(1970-01-01T00:00:00Z UTC). The Unix epoch was on a Thursday, so all\ncalculated weeks begin on Thursday.(Required)\nFrequency of time window.(Required)\nLength of each averaged time window.A negative duration indicates start and stop boundaries are reversed.Column to operate on. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "every",
        "description": "(Required)\nFrequency of time window.",
        "required": true
      },
      {
        "name": "period",
        "description": "(Required)\nLength of each averaged time window.A negative duration indicates start and stop boundaries are reversed.",
        "required": true
      },
      {
        "name": "column",
        "description": "Column to operate on. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "timeShift",
    "description": "timeShift() adds a fixed duration to time columns.The output table schema is the same as the input table schema.\nnull time values remain null.(Required)\nAmount of time to add to each time value. May be a negative duration.List of time columns to operate on. Default is [\"_start\", \"_stop\", \"_time\"].Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "duration",
        "description": "(Required)\nAmount of time to add to each time value. May be a negative duration.",
        "required": true
      },
      {
        "name": "columns",
        "description": "List of time columns to operate on. Default is [\"_start\", \"_stop\", \"_time\"].",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "timeWeightedAvg",
    "description": "timeWeightedAvg() returns the time-weighted average of non-null values in\n_value column as a float for each input table.Time is weighted using the linearly interpolated integral of values in the table.(Required)\nUnit of time to use to compute the time-weighted average.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "unit",
        "description": "(Required)\nUnit of time to use to compute the time-weighted average.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "fixed",
    "description": "timezone.fixed() returns a location record with a fixed offset.(Required)\nFixed duration for the location offset.\nThis duration is the offset from UTC.",
    "params": [
      {
        "name": "offset",
        "description": "(Required)\nFixed duration for the location offset.\nThis duration is the offset from UTC.",
        "required": true
      }
    ],
    "examples": null,
    "package": "timezone"
  },
  {
    "name": "location",
    "description": "timezone.location() returns a location record based on a location or timezone name.(Required)\nLocation name (as defined by your operating system timezone database).",
    "params": [
      {
        "name": "name",
        "description": "(Required)\nLocation name (as defined by your operating system timezone database).",
        "required": true
      }
    ],
    "examples": null,
    "package": "timezone"
  },
  {
    "name": "to",
    "description": "to() writes data to an InfluxDB Cloud or 2.x bucket and returns the written data.to() writes data structured using the standard InfluxDB Cloud and v2.x data\nstructure that includes, at a minimum, the following columns:All other columns are written to InfluxDB as\ntags.Note: to() drops rows with null _time values and does not write them\nto InfluxDB.to() is part of the influxdata/influxdb package, but is part of the\nFlux prelude and does not require an import statement or package namespace.Name of the bucket to write to.\nbucket and bucketID are mutually exclusive.String-encoded bucket ID to to write to.\nbucket and bucketID are mutually exclusive.URL of the InfluxDB instance to write to.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.\nhost is required when writing to a remote InfluxDB instance.\nIf specified, token is also required.Organization name.\norg and orgID are mutually exclusive.String-encoded organization ID to query.\norg and orgID are mutually exclusive.InfluxDB API token.InfluxDB 1.x or Enterprise: If authentication is disabled, provide an\nempty string (\"\"). If authentication is enabled, provide your InfluxDB\nusername and password using the <username>:<password> syntax.\ntoken is required when writing to another organization or when host\nis specified.Time column of the output. Default is \"_time\".Measurement column of the output. Default is \"_measurement\".Tag columns in the output. Defaults to all columns with type\nstring, excluding all value columns and columns identified by fieldFn.Function that maps a field key to a field value and returns a record.\nDefault is (r) => ({ [r._field]: r._value }).Input data. Default is piped-forward data (<-).The example above produces the following line protocol and sends it to the\nInfluxDB /api/v2/write endpoint:The example above produces the following line protocol and sends it to the\nInfluxDB /api/v2/write endpoint:The example below does the following:",
    "params": [
      {
        "name": "bucket",
        "description": "Name of the bucket to write to.\nbucket and bucketID are mutually exclusive.",
        "required": false
      },
      {
        "name": "bucketID",
        "description": "String-encoded bucket ID to to write to.\nbucket and bucketID are mutually exclusive.",
        "required": false
      },
      {
        "name": "host",
        "description": "URL of the InfluxDB instance to write to.See InfluxDB Cloud regions\nor InfluxDB OSS URLs.\nhost is required when writing to a remote InfluxDB instance.\nIf specified, token is also required.",
        "required": false
      },
      {
        "name": "org",
        "description": "Organization name.\norg and orgID are mutually exclusive.",
        "required": false
      },
      {
        "name": "orgID",
        "description": "String-encoded organization ID to query.\norg and orgID are mutually exclusive.",
        "required": false
      },
      {
        "name": "token",
        "description": "InfluxDB API token.InfluxDB 1.x or Enterprise: If authentication is disabled, provide an\nempty string (\"\"). If authentication is enabled, provide your InfluxDB\nusername and password using the <username>:<password> syntax.\ntoken is required when writing to another organization or when host\nis specified.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Time column of the output. Default is \"_time\".",
        "required": false
      },
      {
        "name": "measurementColumn",
        "description": "Measurement column of the output. Default is \"_measurement\".",
        "required": false
      },
      {
        "name": "tagColumns",
        "description": "Tag columns in the output. Defaults to all columns with type\nstring, excluding all value columns and columns identified by fieldFn.",
        "required": false
      },
      {
        "name": "fieldFn",
        "description": "Function that maps a field key to a field value and returns a record.\nDefault is (r) => ({ [r._field]: r._value }).",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "toBool",
    "description": "toBool() converts all values in the _value column to boolean types.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "today",
    "description": "today() returns the now() timestamp truncated to the day unit.",
    "params": [],
    "examples": null,
    "package": null
  },
  {
    "name": "toFloat",
    "description": "toFloat() converts all values in the _value column to float types.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "toInt",
    "description": "toInt() converts all values in the _value column to integer types.toInt() behavior depends on the _value column type:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "top",
    "description": "top() sorts each input table by specified columns and keeps the top n records\nin each table.Note: top() drops empty tables.(Required)\nNumber of rows to return from each input table.List of columns to sort by. Default is [\"_value\"].Sort precedence is determined by list order (left to right).Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of rows to return from each input table.",
        "required": true
      },
      {
        "name": "columns",
        "description": "List of columns to sort by. Default is [\"_value\"].Sort precedence is determined by list order (left to right).",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "toString",
    "description": "toString() converts all values in the _value column to string types.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "toTime",
    "description": "toTime() converts all values in the _value column to time types.toTime() treats all numeric input values as nanosecond epoch timestamps.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "toUInt",
    "description": "toUInt() converts all values in the _value column to unsigned integer types.toUInt() behavior depends on the _value column type:Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "tripleEMA",
    "description": "tripleEMA() returns the triple exponential moving average (TEMA) of values in\nthe _value column.tripleEMA uses n number of points to calculate the TEMA, giving more\nweight to recent data with less lag than exponentialMovingAverage() and\ndoubleEMA().(Required)\nNumber of points to use in the calculation.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of points to use in the calculation.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "tripleExponentialDerivative",
    "description": "tripleExponentialDerivative() returns the triple exponential derivative (TRIX)\nvalues using n points.Triple exponential derivative, commonly referred to as \u201cTRIX,\u201d\nis a momentum indicator and oscillator. A triple exponential derivative uses\nthe natural logarithm (log) of input data to calculate a triple exponential\nmoving average over the period of time. The calculation prevents cycles\nshorter than the defined period from being considered by the indicator.\ntripleExponentialDerivative() uses the time between n points to define\nthe period.Triple exponential derivative oscillates around a zero line.\nA positive momentum oscillator value indicates an overbought market;\na negative value indicates an oversold market.\nA positive momentum indicator value indicates increasing momentum;\na negative value indicates decreasing momentum.(Required)\nNumber of points to use in the calculation.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "n",
        "description": "(Required)\nNumber of points to use in the calculation.",
        "required": true
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "truncateTimeColumn",
    "description": "truncateTimeColumn() truncates all input time values in the _time to a\nspecified unit.When truncating a time value to the week (1w), weeks are determined using the\nUnix epoch (1970-01-01T00:00:00Z UTC). The Unix epoch was on a Thursday,\nso all calculated weeks begin on Thursday.(Required)\nUnit of time to truncate to.Example units:Time column to truncate. Default is _time.Note: Currently, assigning a custom value to this parameter will have\nno effect.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "unit",
        "description": "(Required)\nUnit of time to truncate to.Example units:",
        "required": true
      },
      {
        "name": "timeColumn",
        "description": "Time column to truncate. Default is _time.Note: Currently, assigning a custom value to this parameter will have\nno effect.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "isNumeric",
    "description": "types.isNumeric() tests if a value is a numeric type (int, uint, or float).This is a helper function to test or filter for values that can be used in\narithmatic operations or aggregations.(Required)\nValue to test.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to test.",
        "required": true
      }
    ],
    "examples": null,
    "package": "types"
  },
  {
    "name": "isType",
    "description": "types.isType() tests if a value is a specified type.(Required)\nValue to test.(Required)\nString describing the type to check against.Supported types:",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to test.",
        "required": true
      },
      {
        "name": "type",
        "description": "(Required)\nString describing the type to check against.Supported types:",
        "required": true
      }
    ],
    "examples": null,
    "package": "types"
  },
  {
    "name": "uint",
    "description": "uint() converts a value to an unsigned integer type.uint() behavior depends on the input data type:(Required)\nValue to convert.If converting the _value column to uint types, use toUInt().\nIf converting columns other than _value, use map() to iterate over each\nrow and uint() to covert a column value to a uint type.",
    "params": [
      {
        "name": "v",
        "description": "(Required)\nValue to convert.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "union",
    "description": "union() merges two or more input streams into a single output stream.The output schemas of union() is the union of all input schemas.\nunion() does not preserve the sort order of the rows within tables.\nUse sort() if you need a specific sort order.union() does not modify data in rows, but unions separate streams of tables\ninto a single stream of tables and groups rows of data based on existing group keys.\njoin() creates new rows based on common values in one or more specified columns.\nOutput rows also contain the differing values from each of the joined streams.(Required)\nList of two or more streams of tables to union together.",
    "params": [
      {
        "name": "tables",
        "description": "(Required)\nList of two or more streams of tables to union together.",
        "required": true
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "unique",
    "description": "unique() returns all records containing unique values in a specified column.Group keys, columns, and values are not modified.\nunique() drops empty tables.Column to search for unique values. Default is _value.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "column",
        "description": "Column to search for unique values. Default is _value.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "from",
    "description": "usage.from() returns usage data from an InfluxDB Cloud organization.(Required)\nEarliest time to include in results.(Required)\nLatest time to include in results.InfluxDB Cloud region URL.\nDefault is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).InfluxDB Cloud organization ID. Default is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).InfluxDB Cloud API token.\nDefault is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).Return raw, high resolution usage data instead of downsampled usage data.\nDefault is false.usage.from() can query the following time ranges:The following query returns query counts for the following query endpoints:The following query compares the amount of data written to and queried from your\nInfluxDB Cloud organization to your organization\u2019s rate limits.\nIt appends a limitReached column to each row that indicates if your rate\nlimit was exceeded.",
    "params": [
      {
        "name": "start",
        "description": "(Required)\nEarliest time to include in results.",
        "required": true
      },
      {
        "name": "stop",
        "description": "(Required)\nLatest time to include in results.",
        "required": true
      },
      {
        "name": "host",
        "description": "InfluxDB Cloud region URL.\nDefault is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).",
        "required": false
      },
      {
        "name": "orgID",
        "description": "InfluxDB Cloud organization ID. Default is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).",
        "required": false
      },
      {
        "name": "token",
        "description": "InfluxDB Cloud API token.\nDefault is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).",
        "required": false
      },
      {
        "name": "raw",
        "description": "Return raw, high resolution usage data instead of downsampled usage data.\nDefault is false.usage.from() can query the following time ranges:",
        "required": false
      }
    ],
    "examples": null,
    "package": "usage"
  },
  {
    "name": "limits",
    "description": "usage.limits() returns a record containing usage limits for an InfluxDB Cloud organization.InfluxDB Cloud region URL.\nDefault is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).InfluxDB Cloud organization ID. Default is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).InfluxDB Cloud API token.\nDefault is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).",
    "params": [
      {
        "name": "host",
        "description": "InfluxDB Cloud region URL.\nDefault is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).",
        "required": false
      },
      {
        "name": "orgID",
        "description": "InfluxDB Cloud organization ID. Default is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).",
        "required": false
      },
      {
        "name": "token",
        "description": "InfluxDB Cloud API token.\nDefault is \"\".(Required if executed outside of your InfluxDB Cloud organization or region).",
        "required": false
      }
    ],
    "examples": null,
    "package": "usage"
  },
  {
    "name": "databases",
    "description": "v1.databases() returns a list of databases in an InfluxDB 1.x (1.7+) instance.Output includes the following columns:Organization name.Organization ID.InfluxDB URL. Default is http://localhost:8086.InfluxDB API token.",
    "params": [
      { "name": "org", "description": "Organization name.", "required": false },
      { "name": "orgID", "description": "Organization ID.", "required": false },
      {
        "name": "host",
        "description": "InfluxDB URL. Default is http://localhost:8086.",
        "required": false
      },
      {
        "name": "token",
        "description": "InfluxDB API token.",
        "required": false
      }
    ],
    "examples": null,
    "package": "v1"
  },
  {
    "name": "fieldKeys",
    "description": "v1.fieldKeys() returns field keys in a bucket.Results include a single table with a single column, _value.Note: FieldKeys is a special application of `tagValues that returns field\nkeys in a given bucket.(Required)\nBucket to list field keys from.Predicate function that filters field keys.\nDefault is (r) => true.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to list field keys from.",
        "required": true
      },
      {
        "name": "predicate",
        "description": "Predicate function that filters field keys.\nDefault is (r) => true.",
        "required": false
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
        "required": false
      }
    ],
    "examples": null,
    "package": "v1"
  },
  {
    "name": "fieldsAsCols",
    "description": "v1.fieldsAsCols() is a special application of pivot() that pivots input data\non _field and _time columns to align fields within each input table that\nhave the same timestamp.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": "v1"
  },
  {
    "name": "json",
    "description": "v1.json() parses an InfluxDB 1.x JSON result into a stream of tables.InfluxDB 1.x query results in JSON format.json and file are mutually exclusive.File path to file containing InfluxDB 1.x query results in JSON format.The path can be absolute or relative.\nIf relative, it is relative to the working directory of the fluxd process.\nThe JSON file must exist in the same file system running the fluxd process.\nNote: InfluxDB OSS and InfluxDB Cloud do not support the file parameter.\nNeither allow access to the underlying filesystem.",
    "params": [
      {
        "name": "json",
        "description": "InfluxDB 1.x query results in JSON format.json and file are mutually exclusive.",
        "required": false
      },
      {
        "name": "file",
        "description": "File path to file containing InfluxDB 1.x query results in JSON format.The path can be absolute or relative.\nIf relative, it is relative to the working directory of the fluxd process.\nThe JSON file must exist in the same file system running the fluxd process.\nNote: InfluxDB OSS and InfluxDB Cloud do not support the file parameter.\nNeither allow access to the underlying filesystem.",
        "required": false
      }
    ],
    "examples": null,
    "package": "v1"
  },
  {
    "name": "measurementFieldKeys",
    "description": "v1.measurementFieldKeys() returns a list of fields in a measurement.Results include a single table with a single column, _value.(Required)\nBucket to retrieve field keys from.(Required)\nMeasurement to list field keys from.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to retrieve field keys from.",
        "required": true
      },
      {
        "name": "measurement",
        "description": "(Required)\nMeasurement to list field keys from.",
        "required": true
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
        "required": false
      }
    ],
    "examples": null,
    "package": "v1"
  },
  {
    "name": "measurements",
    "description": "v1.measurements() returns a list of measurements in a specific bucket.Results include a single table with a single column, _value.(Required)\nBucket to retrieve measurements from.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to retrieve measurements from.",
        "required": true
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "v1"
  },
  {
    "name": "measurementTagKeys",
    "description": "v1.measurementTagKeys() returns the list of tag keys for a specific measurement.Results include a single table with a single column, _value.(Required)\nBucket to return tag keys from for a specific measurement.(Required)\nMeasurement to return tag keys from.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to return tag keys from for a specific measurement.",
        "required": true
      },
      {
        "name": "measurement",
        "description": "(Required)\nMeasurement to return tag keys from.",
        "required": true
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "v1"
  },
  {
    "name": "measurementTagValues",
    "description": "v1.measurementTagValues() returns a list of tag values for a specific measurement.Results include a single table with a single column, _value.(Required)\nBucket to return tag values from for a specific measurement.(Required)\nMeasurement to return tag values from.(Required)\nTag to return all unique values from.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to return tag values from for a specific measurement.",
        "required": true
      },
      {
        "name": "measurement",
        "description": "(Required)\nMeasurement to return tag values from.",
        "required": true
      },
      {
        "name": "tag",
        "description": "(Required)\nTag to return all unique values from.",
        "required": true
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "v1"
  },
  {
    "name": "tagKeys",
    "description": "v1.tagKeys() returns a list of tag keys for all series that match the predicate.Results include a single table with a single column, _value.(Required)\nBucket to return tag keys from.Predicate function that filters tag keys.\nDefault is (r) => true.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to return tag keys from.",
        "required": true
      },
      {
        "name": "predicate",
        "description": "Predicate function that filters tag keys.\nDefault is (r) => true.",
        "required": false
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
        "required": false
      }
    ],
    "examples": null,
    "package": "v1"
  },
  {
    "name": "tagValues",
    "description": "v1.tagValues() returns a list of unique values for a given tag.Results include a single table with a single column, _value.(Required)\nBucket to return unique tag values from.(Required)\nTag to return unique values from.Predicate function that filters tag values.\nDefault is (r) => true.Oldest time to include in results. Default is -30d.Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
    "params": [
      {
        "name": "bucket",
        "description": "(Required)\nBucket to return unique tag values from.",
        "required": true
      },
      {
        "name": "tag",
        "description": "(Required)\nTag to return unique values from.",
        "required": true
      },
      {
        "name": "predicate",
        "description": "Predicate function that filters tag values.\nDefault is (r) => true.",
        "required": false
      },
      {
        "name": "start",
        "description": "Oldest time to include in results. Default is -30d.",
        "required": false
      },
      {
        "name": "stop",
        "description": "Newest time include in results.\nThe stop time is exclusive, meaning values with a time equal to stop time are excluded from the results.\nDefault is now().Relative start times are defined using negative durations.\nNegative durations are relative to now().\nAbsolute start times are defined using time values.",
        "required": false
      }
    ],
    "examples": null,
    "package": "v1"
  },
  {
    "name": "alert",
    "description": "victorops.alert() sends an alert to VictorOps.(Required)\nVictorOps REST endpoint integration URL.Example: https://alert.victorops.com/integrations/generic/00000000/alert/<api_key>/<routing_key>\nReplace <api_key> and <routing_key> with valid VictorOps API and routing keys.Monitoring agent name. Default is \"\".(Required)\nVictorOps message type (alert behavior).Valid values:Incident ID. Default is \"\".Incident display name or summary. Default is \"\".Verbose incident message. Default is \"\".Incident start time. Default is now().",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nVictorOps REST endpoint integration URL.Example: https://alert.victorops.com/integrations/generic/00000000/alert/<api_key>/<routing_key>\nReplace <api_key> and <routing_key> with valid VictorOps API and routing keys.",
        "required": true
      },
      {
        "name": "monitoringTool",
        "description": "Monitoring agent name. Default is \"\".",
        "required": false
      },
      {
        "name": "messageType",
        "description": "(Required)\nVictorOps message type (alert behavior).Valid values:",
        "required": true
      },
      {
        "name": "entityID",
        "description": "Incident ID. Default is \"\".",
        "required": false
      },
      {
        "name": "entityDisplayName",
        "description": "Incident display name or summary. Default is \"\".",
        "required": false
      },
      {
        "name": "stateMessage",
        "description": "Verbose incident message. Default is \"\".",
        "required": false
      },
      {
        "name": "timestamp",
        "description": "Incident start time. Default is now().",
        "required": false
      }
    ],
    "examples": null,
    "package": "victorops"
  },
  {
    "name": "endpoint",
    "description": "victorops.endpoint() sends events to VictorOps using data from input rows.victorops.endpoint is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the object used to generate the POST request. Requires an r parameter.mapFn accepts a table row (r) and returns an object that must include the following fields:For more information, see victorops.event() parameters.(Required)\nVictorOps REST endpoint integration URL.Example: https://alert.victorops.com/integrations/generic/00000000/alert/<api_key>/<routing_key>\nReplace <api_key> and <routing_key> with valid VictorOps API and routing keys.Tool to use for monitoring.\nDefault is InfluxDB.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nVictorOps REST endpoint integration URL.Example: https://alert.victorops.com/integrations/generic/00000000/alert/<api_key>/<routing_key>\nReplace <api_key> and <routing_key> with valid VictorOps API and routing keys.",
        "required": true
      },
      {
        "name": "monitoringTool",
        "description": "Tool to use for monitoring.\nDefault is InfluxDB.",
        "required": false
      }
    ],
    "examples": null,
    "package": "victorops"
  },
  {
    "name": "endpoint",
    "description": "webexteams.endpoint() returns a function that sends a message that includes data from input rows to a Webex room.webexteams.endpoint is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the object used to generate the POST request. Requires an r parameter.mapFn accepts a table row (r) and returns an object that must include the following fields:For more information, see webexteams.message parameters.Base URL of Webex API endpoint (without a trailing slash).\nDefault is https://webexapis.com.(Required)\nWebex API access token.",
    "params": [
      {
        "name": "url",
        "description": "Base URL of Webex API endpoint (without a trailing slash).\nDefault is https://webexapis.com.",
        "required": false
      },
      {
        "name": "token",
        "description": "(Required)\nWebex API access token.",
        "required": true
      }
    ],
    "examples": null,
    "package": "webexteams"
  },
  {
    "name": "message",
    "description": "webexteams.message() sends a single message to Webex\nusing the Webex messages API.Base URL of Webex API endpoint (without a trailing slash).\nDefault is https://webexapis.com.(Required)\nWebex API access token.(Required)\nRoom ID to send the message to.(Required)\nPlain text message.(Required)\nMarkdown formatted message.",
    "params": [
      {
        "name": "url",
        "description": "Base URL of Webex API endpoint (without a trailing slash).\nDefault is https://webexapis.com.",
        "required": false
      },
      {
        "name": "token",
        "description": "(Required)\nWebex API access token.",
        "required": true
      },
      {
        "name": "roomId",
        "description": "(Required)\nRoom ID to send the message to.",
        "required": true
      },
      {
        "name": "text",
        "description": "(Required)\nPlain text message.",
        "required": true
      },
      {
        "name": "markdown",
        "description": "(Required)\nMarkdown formatted message.",
        "required": true
      }
    ],
    "examples": null,
    "package": "webexteams"
  },
  {
    "name": "window",
    "description": "window() groups records using regular time intervals.The function calculates time windows and stores window bounds in the\n_start and _stop columns. _start and _stop values are assigned to\nrows based on the row\u2019s _time value.A single input row may be placed into zero or more output tables depending on\nthe parameters passed into window().This function is intended to be used when timeColumn (_time by default) is not in the group key.\nIf timeColumn is in the group key, resulting output is confusing and generally not useful.every, period, and offset parameters support all valid duration units,\nincluding calendar months (1mo) and years (1y).When windowing by week (1w), weeks are determined using the Unix epoch\n(1970-01-01T00:00:00Z UTC). The Unix epoch was on a Thursday, so all\ncalculated weeks begin on Thursday.Duration of time between windows.Duration of windows. Default is the every value.period can be negative, indicating the start and stop boundaries are reversed.Duration to shift the window boundaries by. Defualt is 0s.offset can be negative, indicating that the offset goes backwards in time.Location used to determine timezone. Default is the location option.Column that contains time values. Default is _time.Column to store the window start time in. Default is _start.Column to store the window stop time in. Default is _stop.Create empty tables for empty window. Default is false.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "every",
        "description": "Duration of time between windows.",
        "required": false
      },
      {
        "name": "period",
        "description": "Duration of windows. Default is the every value.period can be negative, indicating the start and stop boundaries are reversed.",
        "required": false
      },
      {
        "name": "offset",
        "description": "Duration to shift the window boundaries by. Defualt is 0s.offset can be negative, indicating that the offset goes backwards in time.",
        "required": false
      },
      {
        "name": "location",
        "description": "Location used to determine timezone. Default is the location option.",
        "required": false
      },
      {
        "name": "timeColumn",
        "description": "Column that contains time values. Default is _time.",
        "required": false
      },
      {
        "name": "startColumn",
        "description": "Column to store the window start time in. Default is _start.",
        "required": false
      },
      {
        "name": "stopColumn",
        "description": "Column to store the window stop time in. Default is _stop.",
        "required": false
      },
      {
        "name": "createEmpty",
        "description": "Create empty tables for empty window. Default is false.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "yield",
    "description": "yield() delivers input data as a result of the query.A query may have multiple yields, each identified by unique name specified in\nthe name parameter.Note: yield() is implicit for queries that output a single stream of\ntables and is only necessary when yielding multiple results from a query.Unique name for the yielded results. Default is _results.Input data. Default is piped-forward data (<-).",
    "params": [
      {
        "name": "name",
        "description": "Unique name for the yielded results. Default is _results.",
        "required": false
      },
      {
        "name": "tables",
        "description": "Input data. Default is piped-forward data (<-).",
        "required": false
      }
    ],
    "examples": null,
    "package": null
  },
  {
    "name": "endpoint",
    "description": "zenoss.endpoint() sends events to Zenoss using data from input rows.zenoss.endpoint is a factory function that outputs another function.\nThe output function requires a mapFn parameter.A function that builds the object used to generate the POST request. Requires an r parameter.mapFn accepts a table row (r) and returns an object that must include the following fields:For more information, see zenoss.event() parameters.(Required)\nZenoss router endpoint URL.Zenoss username to use for HTTP BASIC authentication.\nDefault is \"\" (no authentication).Zenoss password to use for HTTP BASIC authentication.\nDefault is \"\" (no authentication).Zenoss cloud API key.\nDefault is \"\" (no API key).Zenoss router name.\nDefault is \"EventsRouter\".EventsRouter method.\nDefault is \"add_event\".Event type. Default is \"rpc\".Temporary request transaction ID.\nDefault is 1.",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nZenoss router endpoint URL.",
        "required": true
      },
      {
        "name": "username",
        "description": "Zenoss username to use for HTTP BASIC authentication.\nDefault is \"\" (no authentication).",
        "required": false
      },
      {
        "name": "password",
        "description": "Zenoss password to use for HTTP BASIC authentication.\nDefault is \"\" (no authentication).",
        "required": false
      },
      {
        "name": "apiKey",
        "description": "Zenoss cloud API key.\nDefault is \"\" (no API key).",
        "required": false
      },
      {
        "name": "action",
        "description": "Zenoss router name.\nDefault is \"EventsRouter\".",
        "required": false
      },
      {
        "name": "method",
        "description": "EventsRouter method.\nDefault is \"add_event\".",
        "required": false
      },
      {
        "name": "type",
        "description": "Event type. Default is \"rpc\".",
        "required": false
      },
      {
        "name": "tid",
        "description": "Temporary request transaction ID.\nDefault is 1.",
        "required": false
      }
    ],
    "examples": null,
    "package": "zenoss"
  },
  {
    "name": "event",
    "description": "zenoss.event() sends an event to Zenoss.(Required)\nZenoss router endpoint URL.Zenoss username to use for HTTP BASIC authentication.\nDefault is \"\" (no authentication).Zenoss password to use for HTTP BASIC authentication.\nDefault is \"\" (no authentication).Zenoss cloud API key.\nDefault is \"\" (no API key).Zenoss router name.\nDefault is \u201cEventsRouter\u201d.EventsRouter method.\nDefault is \u201cadd_event\u201d.Event type.\nDefault is \u201crpc\u201d.Temporary request transaction ID.\nDefault is 1.Event summary.\nDefault is \"\".Related device.\nDefault is \"\".Related component.\nDefault is \"\".(Required)\nEvent severity level.Supported values:Event class.\nDefault is \"\".Event class key.\nDefault is \"\".Zenoss collector.\nDefault is \"\".Related message.\nDefault is \"\".",
    "params": [
      {
        "name": "url",
        "description": "(Required)\nZenoss router endpoint URL.",
        "required": true
      },
      {
        "name": "username",
        "description": "Zenoss username to use for HTTP BASIC authentication.\nDefault is \"\" (no authentication).",
        "required": false
      },
      {
        "name": "password",
        "description": "Zenoss password to use for HTTP BASIC authentication.\nDefault is \"\" (no authentication).",
        "required": false
      },
      {
        "name": "apiKey",
        "description": "Zenoss cloud API key.\nDefault is \"\" (no API key).",
        "required": false
      },
      {
        "name": "action",
        "description": "Zenoss router name.\nDefault is \u201cEventsRouter\u201d.",
        "required": false
      },
      {
        "name": "method",
        "description": "EventsRouter method.\nDefault is \u201cadd_event\u201d.",
        "required": false
      },
      {
        "name": "type",
        "description": "Event type.\nDefault is \u201crpc\u201d.",
        "required": false
      },
      {
        "name": "tid",
        "description": "Temporary request transaction ID.\nDefault is 1.",
        "required": false
      },
      {
        "name": "summary",
        "description": "Event summary.\nDefault is \"\".",
        "required": false
      },
      {
        "name": "device",
        "description": "Related device.\nDefault is \"\".",
        "required": false
      },
      {
        "name": "component",
        "description": "Related component.\nDefault is \"\".",
        "required": false
      },
      {
        "name": "severity",
        "description": "(Required)\nEvent severity level.Supported values:",
        "required": true
      },
      {
        "name": "eventClass",
        "description": "Event class.\nDefault is \"\".",
        "required": false
      },
      {
        "name": "eventClassKey",
        "description": "Event class key.\nDefault is \"\".",
        "required": false
      },
      {
        "name": "collector",
        "description": "Zenoss collector.\nDefault is \"\".",
        "required": false
      },
      {
        "name": "message",
        "description": "Related message.\nDefault is \"\".",
        "required": false
      }
    ],
    "examples": null,
    "package": "zenoss"
  }
]
